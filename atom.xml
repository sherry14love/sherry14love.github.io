<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>拉姆的小树屋</title>
  
  
  <link href="https://sherry14love.github.io/atom.xml" rel="self"/>
  
  <link href="https://sherry14love.github.io/"/>
  <updated>2024-11-09T05:55:02.150Z</updated>
  <id>https://sherry14love.github.io/</id>
  
  <author>
    <name>戴诺斯·拉姆</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>yolov8使用心得/包含标注ID转换脚本</title>
    <link href="https://sherry14love.github.io/2024/11/09/learn/yolov8/"/>
    <id>https://sherry14love.github.io/2024/11/09/learn/yolov8/</id>
    <published>2024-11-08T16:00:00.000Z</published>
    <updated>2024-11-09T05:55:02.150Z</updated>
    
    <content type="html"><![CDATA[<p>项目地址：<a href="https://www.codewithgpu.com/i/ultralytics/ultralytics/yolov8">yolov8一键部署运行与云服务器</a></p><h2 id="数据标注工具"><a class="markdownIt-Anchor" href="#数据标注工具"></a> 数据标注工具</h2><p>针对与yolo系列模型，拉姆推荐使用LabelImg，而框框可以旋转的roLabelImg或者多边形标记的labelme拉姆都不推荐，因为到最后的yolo格式需要自己转换，并且效果不好</p><p><s>仅针对于拉姆自己数据集的测试</s></p><p>对于标签类别ID，有的时候会很乱，比如，person的ID应该为83，但实际上，在使用LabelImg标签标记的时候是0，所以，可以用下面的脚本来创建一个字典映射进行更改：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义字符映射字典</span></span><br><span class="line">char_mapping = &#123;<span class="string">&#x27;0&#x27;</span>: <span class="string">&#x27;83&#x27;</span>,</span><br><span class="line">                <span class="string">&#x27;1&#x27;</span>: <span class="string">&#x27;84&#x27;</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义输入和输出文件夹路径</span></span><br><span class="line">input_folder = <span class="string">r&#x27;F:\work\1&#x27;</span> <span class="comment"># 请改成自己的输入路径</span></span><br><span class="line">output_folder = <span class="string">r&#x27;F:\work\2&#x27;</span> <span class="comment"># 请改成自己的输出路径</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 确保输出文件夹存在</span></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(output_folder):</span><br><span class="line">    os.makedirs(output_folder)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 遍历输入文件夹中的所有.txt文件</span></span><br><span class="line"><span class="keyword">for</span> filename <span class="keyword">in</span> os.listdir(input_folder):</span><br><span class="line">    <span class="keyword">if</span> filename.endswith(<span class="string">&#x27;.txt&#x27;</span>):</span><br><span class="line">        input_file_path = os.path.join(input_folder, filename)</span><br><span class="line">        output_file_path = os.path.join(output_folder, filename)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 读取文件内容</span></span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(input_file_path, <span class="string">&#x27;r&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> file:</span><br><span class="line">            lines = file.readlines()</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 处理每一行从第一个字符到第一个空格结束的部分</span></span><br><span class="line">        modified_lines = []</span><br><span class="line">        <span class="keyword">for</span> line <span class="keyword">in</span> lines:</span><br><span class="line">            <span class="comment"># 查找第一个空格的位置</span></span><br><span class="line">            space_index = line.find(<span class="string">&#x27; &#x27;</span>)</span><br><span class="line">            <span class="keyword">if</span> space_index != -<span class="number">1</span>:</span><br><span class="line">                <span class="comment"># 获取从第一个字符到第一个空格的部分</span></span><br><span class="line">                first_part = line[:space_index]</span><br><span class="line">                <span class="comment"># 进行映射替换</span></span><br><span class="line">                modified_first_part = char_mapping.get(first_part, first_part)</span><br><span class="line">                <span class="comment"># 替换并添加到修改后的行列表中</span></span><br><span class="line">                modified_line = modified_first_part + line[space_index:]</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="comment"># 如果没有空格，直接进行映射替换</span></span><br><span class="line">                modified_line = char_mapping.get(line.strip(), line.strip())</span><br><span class="line">            modified_lines.append(modified_line)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 将修改后的内容写入输出文件</span></span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(output_file_path, <span class="string">&#x27;w&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> file:</span><br><span class="line">            file.writelines(modified_lines)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;处理完成，结果已保存到&quot;</span>, output_folder)</span><br></pre></td></tr></table></figure><p><em>注意更改为自己的路径哦~</em></p><p>当然你如果想用多边形标记工具labelme（这个只能保存为json格式）</p><p>拉姆也有两个脚本，可以进行转正为yolo模型可以识别的相对路径txt格式：</p><p>脚本一：将json转换成txt格式，因为labelme标签ID为自己输入的字母或者其他字符，所以还需要脚本二</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"></span><br><span class="line">img_folder_path = <span class="string">r&#x27;F:\work\1\images&#x27;</span>  <span class="comment"># 图片存放文件夹</span></span><br><span class="line">folder_path = <span class="string">r&quot;F:\work\1\label&quot;</span>  <span class="comment"># 标注数据的文件地址</span></span><br><span class="line">txt_folder_path = <span class="string">r&quot;F:\work\1\txt&quot;</span>  <span class="comment"># 转换后的txt标签文件存放的文件夹</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 保存为相对坐标形式 :label x_center y_center w h</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">relative_coordinate_txt</span>(<span class="params">img_name, json_d, img_path</span>):</span><br><span class="line">    src_img = cv2.imread(img_path)</span><br><span class="line">    <span class="keyword">if</span> src_img <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;Failed to read image: <span class="subst">&#123;img_path&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    h, w = src_img.shape[:<span class="number">2</span>]</span><br><span class="line">    txt_name = img_name.split(<span class="string">&quot;.&quot;</span>)[<span class="number">0</span>] + <span class="string">&quot;.txt&quot;</span></span><br><span class="line">    txt_path = os.path.join(txt_folder_path, txt_name)</span><br><span class="line">    <span class="built_in">print</span>(txt_path)</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(txt_path, <span class="string">&#x27;w&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        <span class="keyword">for</span> item <span class="keyword">in</span> json_d[<span class="string">&quot;shapes&quot;</span>]:</span><br><span class="line">            point = item[<span class="string">&#x27;points&#x27;</span>]</span><br><span class="line">            <span class="comment"># 确保 point[0] 和 point[1] 的坐标值正确</span></span><br><span class="line">            x1, y1 = point[<span class="number">0</span>]</span><br><span class="line">            x2, y2 = point[<span class="number">1</span>]</span><br><span class="line">            x_min = <span class="built_in">min</span>(x1, x2)</span><br><span class="line">            x_max = <span class="built_in">max</span>(x1, x2)</span><br><span class="line">            y_min = <span class="built_in">min</span>(y1, y2)</span><br><span class="line">            y_max = <span class="built_in">max</span>(y1, y2)</span><br><span class="line"></span><br><span class="line">            x_center = (x_min + x_max) / <span class="number">2</span></span><br><span class="line">            y_center = (y_min + y_max) / <span class="number">2</span></span><br><span class="line">            width = x_max - x_min</span><br><span class="line">            height = y_max - y_min</span><br><span class="line"></span><br><span class="line">            f.write(<span class="string">&quot;&#123;&#125; &quot;</span>.<span class="built_in">format</span>(item[<span class="string">&#x27;label&#x27;</span>]))</span><br><span class="line">            f.write(<span class="string">&quot;&#123;&#125; &quot;</span>.<span class="built_in">format</span>(x_center / w))</span><br><span class="line">            f.write(<span class="string">&quot;&#123;&#125; &quot;</span>.<span class="built_in">format</span>(y_center / h))</span><br><span class="line">            f.write(<span class="string">&quot;&#123;&#125; &quot;</span>.<span class="built_in">format</span>(width / w))</span><br><span class="line">            f.write(<span class="string">&quot;&#123;&#125; &quot;</span>.<span class="built_in">format</span>(height / h))</span><br><span class="line">            f.write(<span class="string">&quot;\n&quot;</span>)</span><br><span class="line"></span><br><span class="line">i = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> jsonfile <span class="keyword">in</span> os.listdir(folder_path):</span><br><span class="line">    temp_path = os.path.join(folder_path, jsonfile)</span><br><span class="line"></span><br><span class="line">    i += <span class="number">1</span></span><br><span class="line">    <span class="comment"># if i &gt; 5:</span></span><br><span class="line">    <span class="comment">#     break</span></span><br><span class="line">    <span class="comment"># 如果是一个子目录就继续</span></span><br><span class="line">    <span class="keyword">if</span> os.path.isdir(temp_path):</span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;json_path:\t&quot;</span>, temp_path)</span><br><span class="line">    jsonfile_path = temp_path</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(jsonfile_path, <span class="string">&quot;r&quot;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        json_d = json.load(f)</span><br><span class="line">        <span class="comment"># 保留原始扩展名，而不是强制转换为.jpeg，支持各类图片的格式</span></span><br><span class="line">        img_name = json_d[<span class="string">&#x27;imagePath&#x27;</span>].split(<span class="string">&quot;\\&quot;</span>)[-<span class="number">1</span>]</span><br><span class="line">        img_path = os.path.join(img_folder_path, img_name)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;img_path:\t&quot;</span>, img_path)</span><br><span class="line">        relative_coordinate_txt(img_name, json_d, img_path)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>脚本二：读取标签为字母的txt并改成ID</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> shutil</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">process_label_files</span>(<span class="params">input_dir, output_dir</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    处理标签文件，将特定标签名称转换为数字编号</span></span><br><span class="line"><span class="string">    Args:</span></span><br><span class="line"><span class="string">        input_dir: 输入文件夹路径</span></span><br><span class="line"><span class="string">        output_dir: 输出文件夹路径</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="comment"># 创建标签映射字典</span></span><br><span class="line">    label_mapping = &#123;</span><br><span class="line">        <span class="string">&#x27;person&#x27;</span>: <span class="string">&#x27;4&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;ECGmonitor&#x27;</span>: <span class="string">&#x27;2&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;patientBed&#x27;</span>: <span class="string">&#x27;1&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;bedsideTable&#x27;</span>: <span class="string">&#x27;0&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;patient&#x27;</span>: <span class="string">&#x27;3&#x27;</span></span><br><span class="line">        <span class="comment"># 可以根据需要添加更多映射</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment"># 确保输出目录存在</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(output_dir):</span><br><span class="line">        os.makedirs(output_dir)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 遍历输入目录中的所有txt文件</span></span><br><span class="line">    <span class="keyword">for</span> filename <span class="keyword">in</span> os.listdir(input_dir):</span><br><span class="line">        <span class="keyword">if</span> filename.endswith(<span class="string">&#x27;.txt&#x27;</span>):</span><br><span class="line">            input_path = os.path.join(input_dir, filename)</span><br><span class="line">            output_path = os.path.join(output_dir, filename)</span><br><span class="line"></span><br><span class="line">            <span class="comment"># 读取并处理文件</span></span><br><span class="line">            <span class="keyword">with</span> <span class="built_in">open</span>(input_path, <span class="string">&#x27;r&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">                lines = f.readlines()</span><br><span class="line"></span><br><span class="line">            <span class="comment"># 处理每一行</span></span><br><span class="line">            processed_lines = []</span><br><span class="line">            <span class="keyword">for</span> line <span class="keyword">in</span> lines:</span><br><span class="line">                parts = line.strip().split()</span><br><span class="line">                <span class="keyword">if</span> parts:  <span class="comment"># 确保行不为空</span></span><br><span class="line">                    <span class="comment"># 替换标签</span></span><br><span class="line">                    <span class="keyword">if</span> parts[<span class="number">0</span>] <span class="keyword">in</span> label_mapping:</span><br><span class="line">                        parts[<span class="number">0</span>] = label_mapping[parts[<span class="number">0</span>]]</span><br><span class="line">                    processed_line = <span class="string">&#x27; &#x27;</span>.join(parts)</span><br><span class="line">                    processed_lines.append(processed_line + <span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line"></span><br><span class="line">            <span class="comment"># 写入新文件</span></span><br><span class="line">            <span class="keyword">with</span> <span class="built_in">open</span>(output_path, <span class="string">&#x27;w&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">                f.writelines(processed_lines)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 路径更改</span></span><br><span class="line">input_directory = <span class="string">r&#x27;F:\work\1&#x27;</span> <span class="comment"># 改为自己的输入路径</span></span><br><span class="line">output_directory = <span class="string">r&#x27;F:\work\2&#x27;</span> <span class="comment"># 改为自己的输出路径</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    process_label_files(input_directory, output_directory)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;处理完成！文件已保存到: <span class="subst">&#123;output_directory&#125;</span>&quot;</span>)</span><br><span class="line"><span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;处理过程中出现错误: <span class="subst">&#123;<span class="built_in">str</span>(e)&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure><h2 id="训练模型"><a class="markdownIt-Anchor" href="#训练模型"></a> 训练模型</h2><ol><li>首先在终端进入目录：ultralytics-8.3.27，在终端输入命令：</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> ultralytics-8.3.27</span><br></pre></td></tr></table></figure><ol start="2"><li>在ultralytics-8.3.27里找到train_v8.py文件，更改其代码：</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> argparse</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">from</span> ultralytics <span class="keyword">import</span> YOLO</span><br><span class="line"><span class="keyword">import</span> yaml</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>(<span class="params">opt</span>):</span><br><span class="line">    yaml_path = opt.cfg</span><br><span class="line">    weights = opt.weights</span><br><span class="line">    config_path = opt.config</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 加载配置文件</span></span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(config_path, <span class="string">&#x27;r&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        config = yaml.safe_load(f)</span><br><span class="line">    </span><br><span class="line">    model = YOLO(yaml_path).load(weights)</span><br><span class="line">    model.info()</span><br><span class="line">    </span><br><span class="line">    results = model.train(**config)  <span class="comment"># 使用配置文件中的所有参数</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">parse_opt</span>(<span class="params">known=<span class="literal">False</span></span>):</span><br><span class="line">    parser = argparse.ArgumentParser()</span><br><span class="line">    parser.add_argument(<span class="string">&#x27;--cfg&#x27;</span>, <span class="built_in">type</span>=<span class="built_in">str</span>, default=<span class="string">&#x27;ultralytics/cfg/models/v8/yolov8.yaml&#x27;</span>, <span class="built_in">help</span>=<span class="string">&#x27;model.yaml path&#x27;</span>)</span><br><span class="line">    parser.add_argument(<span class="string">&#x27;--weights&#x27;</span>, <span class="built_in">type</span>=<span class="built_in">str</span>, default=<span class="string">&#x27;&#x27;</span>, <span class="built_in">help</span>=<span class="string">&#x27;weights path&#x27;</span>)</span><br><span class="line">    parser.add_argument(<span class="string">&#x27;--config&#x27;</span>, <span class="built_in">type</span>=<span class="built_in">str</span>, default=<span class="string">&#x27;config.yaml&#x27;</span>, <span class="built_in">help</span>=<span class="string">&#x27;training config file&#x27;</span>)</span><br><span class="line">    </span><br><span class="line">    opt = parser.parse_known_args()[<span class="number">0</span>] <span class="keyword">if</span> known <span class="keyword">else</span> parser.parse_args()</span><br><span class="line">    <span class="keyword">return</span> opt</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    opt = parse_opt()</span><br><span class="line">    main(opt)</span><br></pre></td></tr></table></figure><ol start="3"><li>在ultralytics-8.3.27上传配置文件coco128.yaml(可以根据自己的需求进行更改)</li></ol><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 数据集位置</span></span><br><span class="line"><span class="attr">path:</span> <span class="string">../datasets/coco128</span> <span class="comment"># dataset root dir</span></span><br><span class="line"><span class="attr">train:</span> <span class="string">images/train2017</span> <span class="comment"># train images (relative to &#x27;path&#x27;) 128 images</span></span><br><span class="line"><span class="attr">val:</span> <span class="string">images/train2017</span> <span class="comment"># val images (relative to &#x27;path&#x27;) 128 images</span></span><br><span class="line"><span class="attr">test:</span> <span class="comment"># test images (optional)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 标签数量# 任务类型：目标检测</span></span><br><span class="line"><span class="attr">task:</span> <span class="string">detect</span></span><br><span class="line"><span class="comment"># 运行模式：训练</span></span><br><span class="line"><span class="attr">mode:</span> <span class="string">train</span></span><br><span class="line"><span class="comment"># 预训练模型：YOLOv8 Nano版本</span></span><br><span class="line"><span class="attr">model:</span> <span class="string">yolov8n.pt</span></span><br><span class="line"><span class="comment"># 数据集配置文件：COCO128数据集</span></span><br><span class="line"><span class="attr">data:</span> <span class="string">coco128.yaml</span></span><br><span class="line"><span class="comment"># 训练轮数：300轮</span></span><br><span class="line"><span class="attr">epochs:</span> <span class="number">300</span></span><br><span class="line"><span class="comment"># 输入图像尺寸：640x640像素</span></span><br><span class="line"><span class="attr">imgsz:</span> <span class="number">640</span></span><br><span class="line"><span class="comment"># 数据加载线程数：8个</span></span><br><span class="line"><span class="attr">workers:</span> <span class="number">8</span></span><br><span class="line"><span class="comment"># 批次样本数量：8个</span></span><br><span class="line"><span class="attr">batch:</span> <span class="number">8</span></span><br><span class="line"><span class="comment"># 初始学习率：0.0005</span></span><br><span class="line"><span class="attr">lr0:</span> <span class="number">0.0005</span></span><br><span class="line"><span class="comment"># 最终学习率：0.0005</span></span><br><span class="line"><span class="attr">lrf:</span> <span class="number">0.0005</span></span><br><span class="line"><span class="comment"># 动量参数：0.937</span></span><br><span class="line"><span class="attr">momentum:</span> <span class="number">0.937</span></span><br><span class="line"><span class="comment"># 权重衰减系数：0.0005</span></span><br><span class="line"><span class="attr">weight_decay:</span> <span class="number">0.0005</span></span><br><span class="line"><span class="comment"># 学习率预热轮数：3轮</span></span><br><span class="line"><span class="attr">warmup_epochs:</span> <span class="number">3.0</span></span><br><span class="line"><span class="comment"># 预热阶段动量参数：0.8</span></span><br><span class="line"><span class="attr">warmup_momentum:</span> <span class="number">0.8</span></span><br><span class="line"><span class="comment"># 预热阶段偏置项学习率：0.0001</span></span><br><span class="line"><span class="attr">warmup_bias_lr:</span> <span class="number">0.0001</span></span><br><span class="line"><span class="attr">nc:</span> <span class="number">84</span> </span><br><span class="line"><span class="comment"># 标签名字</span></span><br><span class="line"><span class="attr">names:</span> [<span class="string">&#x27;person&#x27;</span>, <span class="string">&#x27;bicycle&#x27;</span>, <span class="string">&#x27;car&#x27;</span>, <span class="string">&#x27;motorcycle&#x27;</span>, <span class="string">&#x27;airplane&#x27;</span>, <span class="string">&#x27;bus&#x27;</span>, <span class="string">&#x27;train&#x27;</span>, <span class="string">&#x27;truck&#x27;</span>, <span class="string">&#x27;boat&#x27;</span>, <span class="string">&#x27;traffic light&#x27;</span>, <span class="string">&#x27;fire hydrant&#x27;</span>, <span class="string">&#x27;stop sign&#x27;</span>, <span class="string">&#x27;parking meter&#x27;</span>, <span class="string">&#x27;bench&#x27;</span>, <span class="string">&#x27;bird&#x27;</span>, <span class="string">&#x27;cat&#x27;</span>, <span class="string">&#x27;dog&#x27;</span>, <span class="string">&#x27;horse&#x27;</span>, <span class="string">&#x27;sheep&#x27;</span>, <span class="string">&#x27;cow&#x27;</span>, <span class="string">&#x27;elephant&#x27;</span>, <span class="string">&#x27;bear&#x27;</span>, <span class="string">&#x27;zebra&#x27;</span>, <span class="string">&#x27;giraffe&#x27;</span>, <span class="string">&#x27;backpack&#x27;</span>, <span class="string">&#x27;umbrella&#x27;</span>, <span class="string">&#x27;handbag&#x27;</span>, <span class="string">&#x27;tie&#x27;</span>, <span class="string">&#x27;suitcase&#x27;</span>, <span class="string">&#x27;frisbee&#x27;</span>, <span class="string">&#x27;skis&#x27;</span>, <span class="string">&#x27;snowboard&#x27;</span>, <span class="string">&#x27;sports ball&#x27;</span>, <span class="string">&#x27;kite&#x27;</span>, <span class="string">&#x27;baseball bat&#x27;</span>, <span class="string">&#x27;baseball glove&#x27;</span>, <span class="string">&#x27;skateboard&#x27;</span>, <span class="string">&#x27;surfboard&#x27;</span>, <span class="string">&#x27;tennis racket&#x27;</span>, <span class="string">&#x27;bottle&#x27;</span>, <span class="string">&#x27;wine glass&#x27;</span>, <span class="string">&#x27;cup&#x27;</span>, <span class="string">&#x27;fork&#x27;</span>, <span class="string">&#x27;knife&#x27;</span>, <span class="string">&#x27;spoon&#x27;</span>, <span class="string">&#x27;bowl&#x27;</span>, <span class="string">&#x27;banana&#x27;</span>, <span class="string">&#x27;apple&#x27;</span>, <span class="string">&#x27;sandwich&#x27;</span>, <span class="string">&#x27;orange&#x27;</span>, <span class="string">&#x27;broccoli&#x27;</span>, <span class="string">&#x27;carrot&#x27;</span>, <span class="string">&#x27;hot dog&#x27;</span>, <span class="string">&#x27;pizza&#x27;</span>, <span class="string">&#x27;donut&#x27;</span>, <span class="string">&#x27;cake&#x27;</span>, <span class="string">&#x27;chair&#x27;</span>, <span class="string">&#x27;couch&#x27;</span>, <span class="string">&#x27;potted plant&#x27;</span>, <span class="string">&#x27;patientBed&#x27;</span>, <span class="string">&#x27;dining table&#x27;</span>, <span class="string">&#x27;toilet&#x27;</span>, <span class="string">&#x27;tv&#x27;</span>, <span class="string">&#x27;laptop&#x27;</span>, <span class="string">&#x27;mouse&#x27;</span>, <span class="string">&#x27;remote&#x27;</span>, <span class="string">&#x27;keyboard&#x27;</span>, <span class="string">&#x27;cell phone&#x27;</span>, <span class="string">&#x27;microwave&#x27;</span>, <span class="string">&#x27;oven&#x27;</span>, <span class="string">&#x27;toaster&#x27;</span>, <span class="string">&#x27;sink&#x27;</span>, <span class="string">&#x27;refrigerator&#x27;</span>, <span class="string">&#x27;book&#x27;</span>, <span class="string">&#x27;clock&#x27;</span>, <span class="string">&#x27;vase&#x27;</span>, <span class="string">&#x27;scissors&#x27;</span>, <span class="string">&#x27;teddy bear&#x27;</span>, <span class="string">&#x27;hair drier&#x27;</span>, <span class="string">&#x27;toothbrush&#x27;</span>, <span class="string">&#x27;patient&#x27;</span>, <span class="string">&#x27;bedsideTable&#x27;</span>, <span class="string">&#x27;ECGmonitor&#x27;</span>, <span class="string">&#x27;curtain&#x27;</span>]</span><br><span class="line"></span><br></pre></td></tr></table></figure><ol start="4"><li>在ultralytics-8.3.27上传配置文件config.yaml</li></ol><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 任务类型：目标检测</span></span><br><span class="line"><span class="attr">task:</span> <span class="string">detect</span></span><br><span class="line"><span class="comment"># 运行模式：训练</span></span><br><span class="line"><span class="attr">mode:</span> <span class="string">train</span></span><br><span class="line"><span class="comment"># 预训练模型：YOLOv8 Nano版本</span></span><br><span class="line"><span class="attr">model:</span> <span class="string">yolov8n.pt</span></span><br><span class="line"><span class="comment"># 数据集配置文件：COCO128数据集</span></span><br><span class="line"><span class="attr">data:</span> <span class="string">coco128.yaml</span></span><br><span class="line"><span class="comment"># 训练轮数：300轮</span></span><br><span class="line"><span class="attr">epochs:</span> <span class="number">300</span></span><br><span class="line"><span class="comment"># 输入图像尺寸：640x640像素</span></span><br><span class="line"><span class="attr">imgsz:</span> <span class="number">640</span></span><br><span class="line"><span class="comment"># 数据加载线程数：8个</span></span><br><span class="line"><span class="attr">workers:</span> <span class="number">8</span></span><br><span class="line"><span class="comment"># 批次样本数量：8个</span></span><br><span class="line"><span class="attr">batch:</span> <span class="number">8</span></span><br><span class="line"><span class="comment"># 初始学习率：0.0005</span></span><br><span class="line"><span class="attr">lr0:</span> <span class="number">0.0005</span></span><br><span class="line"><span class="comment"># 最终学习率：0.0005</span></span><br><span class="line"><span class="attr">lrf:</span> <span class="number">0.0005</span></span><br><span class="line"><span class="comment"># 动量参数：0.937</span></span><br><span class="line"><span class="attr">momentum:</span> <span class="number">0.937</span></span><br><span class="line"><span class="comment"># 权重衰减系数：0.0005</span></span><br><span class="line"><span class="attr">weight_decay:</span> <span class="number">0.0005</span></span><br><span class="line"><span class="comment"># 学习率预热轮数：3轮</span></span><br><span class="line"><span class="attr">warmup_epochs:</span> <span class="number">3.0</span></span><br><span class="line"><span class="comment"># 预热阶段动量参数：0.8</span></span><br><span class="line"><span class="attr">warmup_momentum:</span> <span class="number">0.8</span></span><br><span class="line"><span class="comment"># 预热阶段偏置项学习率：0.0001</span></span><br><span class="line"><span class="attr">warmup_bias_lr:</span> <span class="number">0.0001</span></span><br></pre></td></tr></table></figure><ol start="5"><li><p>记得更改ultralytics-8.3.27/ultralytics/cfg/models/v8/目录下的yolov8.yaml，将nc：80改成nc: 84（也就是你自己的标签数量）</p></li><li><p>最后进行模型的训练，在终端命令输入训练命令：</p></li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python train_v8.py --cfg ultralytics/cfg/models/v8/yolov8.yaml --weights yolov8n.pt --config config.yaml</span><br></pre></td></tr></table></figure><h2 id="模型预测"><a class="markdownIt-Anchor" href="#模型预测"></a> 模型预测</h2><ol><li>在ultralytics-8.3.27里找到predict.py文件，我们需要把进行一点路径更改：</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">model = YOLO(<span class="string">&#x27;runs/detect/train/weights/best.pt&#x27;</span>)  <span class="comment"># 训练好的模型位置</span></span><br><span class="line">model.predict(<span class="string">&#x27;datasets/coco128/images/train2017/&#x27;</span>, save=<span class="literal">True</span>, imgsz=<span class="number">640</span>, conf=<span class="number">0.5</span>) <span class="comment"># 你的预测数据的位置</span></span><br></pre></td></tr></table></figure><ol start="2"><li>predict.py里上面的路径也需要更改一下：</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sys.path.append(<span class="string">&#x27;/root/ultralytics-8.3.27/&#x27;</span>) <span class="comment"># Path 以Autodl为例</span></span><br></pre></td></tr></table></figure><ol start="3"><li>在终端输入命令开始预测</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python predict.py</span><br></pre></td></tr></table></figure><h2 id="收梢"><a class="markdownIt-Anchor" href="#收梢"></a> 收梢</h2><p>在云服务器上进行训练还是很ok的，又便宜又快，比本地部署好用多了，就是需要一点略微花费。</p><p><s>数据标注真费事</s></p><p>阿门，下次有机会拉姆写写ORC或者MiniCPM-V-2.6</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;项目地址：&lt;a href=&quot;https://www.codewithgpu.com/i/ultralytics/ultralytics/yolov8&quot;&gt;yolov8一键部署运行与云服务器&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;数据标注工具&quot;&gt;&lt;a class=&quot;markdownI</summary>
      
    
    
    
    <category term="learn" scheme="https://sherry14love.github.io/categories/learn/"/>
    
    
    <category term="卷" scheme="https://sherry14love.github.io/tags/%E5%8D%B7/"/>
    
  </entry>
  
  <entry>
    <title>Java--Relearn</title>
    <link href="https://sherry14love.github.io/2024/09/26/learn/JavaRelearn/"/>
    <id>https://sherry14love.github.io/2024/09/26/learn/JavaRelearn/</id>
    <published>2024-09-25T16:00:00.000Z</published>
    <updated>2024-10-17T10:17:21.572Z</updated>
    
    <content type="html"><![CDATA[<h2 id="集合框架"><a class="markdownIt-Anchor" href="#集合框架"></a> 集合框架</h2><p>Java的集合框架分为Collection、Map</p><h3 id=""><a class="markdownIt-Anchor" href="#"></a> </h3><pre><code>      Collection      /    |    \   List   Set   Queue    |      |      |</code></pre><p>ArrayList  HashSet  LinkedList<br />LinkedList TreeSet  PriorityQueue<br /><br />Deque<br />|<br />ArrayDeque</p><hr /><p>对不起，已乱码鐨勫皬鏍戝眿紝涓氬姟鍒嗘瀽宸叉垚涓轰紒涓氬喅绛栧拰鎴樼暐鍒跺畾鐨勬牳蹇冦€傛湰鏂囧皢浠嬬粛涔濈甯哥敤鐨勪笟鍔″垎鏋愭柟娉曪紝杩欎簺鏂规硶鑳藉府鍔╁垎鏋</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;集合框架&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#集合框架&quot;&gt;&lt;/a&gt; 集合框架&lt;/h2&gt;
&lt;p&gt;Java的集合框架分为Collection、Map&lt;/p&gt;
&lt;h3 id=&quot;&quot;&gt;&lt;a class=&quot;markdownIt-Ancho</summary>
      
    
    
    
    <category term="learn" scheme="https://sherry14love.github.io/categories/learn/"/>
    
    
    <category term="卷" scheme="https://sherry14love.github.io/tags/%E5%8D%B7/"/>
    
  </entry>
  
  <entry>
    <title>数据分析之业务拆解和分析</title>
    <link href="https://sherry14love.github.io/2024/09/06/learn/business/"/>
    <id>https://sherry14love.github.io/2024/09/06/learn/business/</id>
    <published>2024-09-05T16:00:00.000Z</published>
    <updated>2024-09-26T07:27:00.361Z</updated>
    
    <content type="html"><![CDATA[<p>在当今数据驱动的商业环境中，业务分析已成为企业决策和战略制定的核心。本文将介绍九种常用的业务分析方法，这些方法能帮助分析师和管理者更好地理解复杂的业务问题，并制定有效的解决方案。</p><h2 id="mece原则业务拆解的基础"><a class="markdownIt-Anchor" href="#mece原则业务拆解的基础"></a> MECE原则：业务拆解的基础</h2><p>在开始介绍具体的分析方法之前，我们需要了解MECE原则。MECE是&quot;Mutually Exclusive Collectively Exhaustive&quot;的缩写，意为&quot;相互独立，完全穷尽&quot;。这个原则要求我们在分析问题时，将问题分解为不重叠（相互独立）且无遗漏（完全穷尽）的部分。遵循MECE原则可以帮助我们更系统、全面地分析问题。</p><h2 id="九种常用业务分析方法"><a class="markdownIt-Anchor" href="#九种常用业务分析方法"></a> 九种常用业务分析方法</h2><h3 id="流程拆解法"><a class="markdownIt-Anchor" href="#流程拆解法"></a> 流程拆解法</h3><p>流程拆解法是将复杂的业务流程按时间顺序或逻辑顺序分解为一系列步骤。这种方法特别适用于优化业务流程、识别瓶颈和改进效率。</p><p><strong>应用步骤：</strong></p><ol><li>确定流程范围</li><li>详细描述每个步骤</li><li>绘制流程图</li><li>识别关键环节</li><li>分析和优化每个步骤</li></ol><p><strong>示例：</strong> 分析电子商务网站的用户购买流程：浏览商品 -&gt; 加入购物车 -&gt; 结算 -&gt; 支付 -&gt; 确认订单</p><h3 id="二分法"><a class="markdownIt-Anchor" href="#二分法"></a> 二分法</h3><p>二分法是将问题或数据集分为两个互斥的部分进行分析。这种方法有助于简化复杂问题，快速聚焦关键因素。</p><p><strong>应用示例：</strong></p><ul><li>将客户群分为新客户和老客户</li><li>将产品线分为高端产品和大众产品</li><li>将市场分为线上渠道和线下渠道</li></ul><h3 id="象限拆解法"><a class="markdownIt-Anchor" href="#象限拆解法"></a> 象限拆解法</h3><p>象限拆解法使用两个维度将数据或问题分为四个象限，有助于进行分类分析和优先级排序。</p><p><strong>应用示例：</strong><br />使用&quot;重要性&quot;和&quot;紧急性&quot;两个维度对任务进行分类：</p><ul><li>第一象限：重要且紧急</li><li>第二象限：重要但不紧急</li><li>第三象限：紧急但不重要</li><li>第四象限：既不重要也不紧急</li></ul><h3 id="杜邦分析法"><a class="markdownIt-Anchor" href="#杜邦分析法"></a> 杜邦分析法</h3><p>杜邦分析法是一种财务分析工具，通过分解净资产收益率（ROE）来评估公司的财务状况和经营效率。</p><p><strong>核心公式：</strong><br />ROE = 净利润率 × 总资产周转率 × 权益乘数</p><p>这种分析方法有助于识别影响公司盈利能力的关键因素。</p><h3 id="aarrr模型海盗指标"><a class="markdownIt-Anchor" href="#aarrr模型海盗指标"></a> AARRR模型（海盗指标）</h3><p>AARRR模型是一个用户增长框架，包括五个关键阶段：</p><ol><li>获取（Acquisition）：如何吸引用户</li><li>激活（Activation）：如何让用户体验产品价值</li><li>留存（Retention）：如何让用户持续使用</li><li>收入（Revenue）：如何从用户获得收入</li><li>推荐（Referral）：如何通过现有用户获得新用户</li></ol><p>这个模型帮助企业全面分析和优化用户生命周期。</p><h3 id="pest分析"><a class="markdownIt-Anchor" href="#pest分析"></a> PEST分析</h3><p>PEST分析用于评估宏观环境对企业的影响，包括四个方面：</p><ul><li>政治（Political）：政府政策、法规等</li><li>经济（Economic）：经济增长、通货膨胀等</li><li>社会（Social）：人口趋势、文化变迁等</li><li>技术（Technological）：技术创新、研发投入等</li></ul><p>PEST分析有助于企业识别外部环境的机遇与威胁。</p><h3 id="rfm模型"><a class="markdownIt-Anchor" href="#rfm模型"></a> RFM模型</h3><p>RFM模型是一种客户价值分析方法，基于三个维度：</p><ul><li>最近一次购买（Recency）</li><li>购买频率（Frequency）</li><li>购买金额（Monetary）</li></ul><p>通过这三个维度，企业可以对客户进行分类，制定针对性的营销策略。</p><h3 id="swot分析"><a class="markdownIt-Anchor" href="#swot分析"></a> SWOT分析</h3><p>SWOT分析是一种全面评估企业内外部环境的方法：</p><ul><li>优势（Strengths）：企业的内部优势</li><li>劣势（Weaknesses）：企业的内部不足</li><li>机会（Opportunities）：外部环境带来的机会</li><li>威胁（Threats）：外部环境带来的挑战</li></ul><p>SWOT分析有助于企业制定战略，扬长避短。</p><h3 id="5w1h分析法"><a class="markdownIt-Anchor" href="#5w1h分析法"></a> 5W1H分析法</h3><p>5W1H是一种全面分析问题的方法，通过回答六个问题来深入理解问题：</p><ul><li>What（什么）：问题是什么</li><li>Why（为什么）：为什么会发生</li><li>Who（谁）：涉及哪些人</li><li>Where（哪里）：在哪里发生</li><li>When（何时）：什么时候发生</li><li>How（如何）：如何解决</li></ul><p>这种方法有助于全面、系统地分析和解决问题。</p><h2 id="重点分析方法"><a class="markdownIt-Anchor" href="#重点分析方法"></a> 重点分析方法</h2><h3 id="工作分解结构wbs"><a class="markdownIt-Anchor" href="#工作分解结构wbs"></a> 工作分解结构（WBS）</h3><p>工作分解结构（Work Breakdown Structure，WBS）是一种项目管理工具，用于将项目分解成更小、更易管理的部分。WBS不仅是一种流程拆解方法，更是一种系统化的项目规划和控制工具。</p><p><strong>WBS的特点：</strong></p><ul><li>层级结构：从项目总体目标逐级分解到具体工作包</li><li>100%原则：下级元素必须完整描述上级元素的所有工作</li><li>可交付成果导向：每个工作包都应有明确的可交付成果</li></ul><p><strong>应用步骤：</strong></p><ol><li>确定项目范围和主要可交付成果</li><li>确定主要工作包</li><li>分解工作包到适当的详细程度</li><li>分配工作包责任</li><li>定义每个工作包的时间、资源和成本估算</li></ol><p><strong>示例：移动应用开发项目的WBS</strong></p><ol><li>移动应用开发项目<br />1.1 <strong>项目启动</strong><br />1.1.1 需求分析<br />1.1.2 项目章程<br />1.2 <strong>设计阶段</strong><br />1.2.1 UI/UX设计<br />1.2.2 技术架构设计<br />1.3 <strong>开发阶段</strong><br />1.3.1 前端开发<br />1.3.2 后端开发<br />1.3.3 数据库开发<br />1.4 <strong>测试阶段</strong><br />1.4.1 单元测试<br />1.4.2 集成测试<br />1.4.3 用户验收测试<br />1.5 <strong>部署阶段</strong><br />1.5.1 应用商店提交<br />1.5.2 服务器部署<br />1.6 <strong>项目管理</strong><br />1.6.1 进度管理<br />1.6.2 风险管理<br />1.6.3 沟通管理</li></ol><h3 id="泳道流程图"><a class="markdownIt-Anchor" href="#泳道流程图"></a> 泳道流程图</h3><p>泳道流程图是一种特殊类型的流程图，它通过将流程步骤分配到不同的&quot;泳道&quot;中来可视化复杂的业务流程。每个泳道通常代表一个参与者、部门或系统。</p><p><strong>泳道流程图的特点：</strong></p><ul><li>清晰展示不同参与者的职责</li><li>易于识别流程中的瓶颈和交接点</li><li>有助于优化跨部门或跨系统的流程</li></ul><p><strong>应用步骤：</strong></p><ol><li>确定流程涉及的所有参与者或部门</li><li>为每个参与者创建一个泳道</li><li>按时间顺序列出流程步骤</li><li>将每个步骤分配到相应的泳道</li><li>用箭头连接步骤，显示流程方向</li><li>标注决策点和条件分支</li></ol><p><strong>示例：电子商务订单处理流程</strong></p><p><img src="https://www.qiuxs.cn/sharing-tools/img/read/553aa03ff8a1708b264d22cfe2f7de41" alt="泳道图示例" /><br />客户泳道：<br />开始 -&gt; 浏览商品 -&gt; 添加到购物车 -&gt; 结算 -&gt; 支付 -&gt; 结束</p><p>系统泳道：<br />验证库存 -&gt; 生成订单 -&gt; 处理支付 -&gt; 更新库存</p><p>仓储部门泳道：<br />接收订单 -&gt; 拣货 -&gt; 包装</p><p>物流部门泳道：<br />收件 -&gt; 配送 -&gt; 送达</p><p>客服部门泳道：<br />处理查询 -&gt; 处理退换货请求</p><blockquote><p>对于流程图我们可以用PlantUML代码或者Mermaid来实现。</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;在当今数据驱动的商业环境中，业务分析已成为企业决策和战略制定的核心。本文将介绍九种常用的业务分析方法，这些方法能帮助分析师和管理者更好地理解复杂的业务问题，并制定有效的解决方案。&lt;/p&gt;
&lt;h2 id=&quot;mece原则业务拆解的基础&quot;&gt;&lt;a class=&quot;markdownIt</summary>
      
    
    
    
    <category term="learn" scheme="https://sherry14love.github.io/categories/learn/"/>
    
    
    <category term="卷" scheme="https://sherry14love.github.io/tags/%E5%8D%B7/"/>
    
    <category term="数据分析" scheme="https://sherry14love.github.io/tags/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/"/>
    
  </entry>
  
  <entry>
    <title>数据分析之MySQL食用指南</title>
    <link href="https://sherry14love.github.io/2024/07/25/learn/mysql/"/>
    <id>https://sherry14love.github.io/2024/07/25/learn/mysql/</id>
    <published>2024-07-24T16:00:00.000Z</published>
    <updated>2024-09-26T07:25:49.946Z</updated>
    
    <content type="html"><![CDATA[<p>MySQL作为一种广泛使用的关系型数据库管理系统，是每个数据分析师必备技能，下面让我们来探讨如何利用MySQL进行高效的数据分析。</p><h2 id="基础语句"><a class="markdownIt-Anchor" href="#基础语句"></a> 基础语句</h2><p>为了帮助小伙伴们清晰理解SQL查询的语法结构和运行顺序，我们应该知道下面的：</p><ul><li>语法结构：select–from–where–group by–having–order by–limit</li><li>运行顺序：from–where–group by–having–order by–limit–select</li></ul><h3 id="select-from"><a class="markdownIt-Anchor" href="#select-from"></a> SELECT &amp; FROM</h3><h4 id="基本语法"><a class="markdownIt-Anchor" href="#基本语法"></a> 基本语法</h4><p>在MySQL中，使用 <code>SELECT</code> 语句来指定要查询的字段。语法如下：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> 字段名<span class="number">1</span>, 字段名<span class="number">2</span>, ...</span><br></pre></td></tr></table></figure><p>使用 <code>FROM</code> 语句来指定数据来源的表。语法如下：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FROM</span> 表名</span><br></pre></td></tr></table></figure><p><strong>示例：</strong></p><p>假设有一个名为 <code>students</code> 的表，包含以下字段：<code>id</code>, <code>name</code>, <code>age</code>, <code>gender</code>。</p><ol><li>查询所有字段</li></ol><p>要查询 <code>students</code> 表中的所有字段，可以使用以下语句：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> id, name, age, gender</span><br><span class="line"><span class="keyword">FROM</span> students</span><br></pre></td></tr></table></figure><p>或者简化为：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> students</span><br></pre></td></tr></table></figure><ol start="2"><li>查询特定字段</li></ol><p>如果只需要查询 <code>name</code> 和 <code>age</code> 字段，可以使用以下语句：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> name, age</span><br><span class="line"><span class="keyword">FROM</span> students</span><br></pre></td></tr></table></figure><p>通过这些基础的 <code>SELECT</code> 和 <code>FROM</code> 语句，我们就可以从数据库表中检索所需的数据。</p><blockquote><p>除此之外，如果我们需要连续执行两三个简单的查询语句，只需要中间用<code>;</code>分开，执行的时候就不会报错了。</p></blockquote><h4 id="字段名的别名"><a class="markdownIt-Anchor" href="#字段名的别名"></a> 字段名的——别名</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> name <span class="keyword">AS</span> 姓名, age <span class="keyword">AS</span> 年龄</span><br><span class="line"><span class="keyword">FROM</span> students</span><br></pre></td></tr></table></figure><blockquote><p><code>AS</code>可以省略，但是<code>字段名</code>后面需要加一个空格才可以加上<code>别名</code></p></blockquote><p>使用<code>AS</code>我们就可以改变我们的字段名，很简单，并且支持中文。</p><h4 id="去重"><a class="markdownIt-Anchor" href="#去重"></a> 去重</h4><p>在MySQL中，去重操作通常指的是从表中删除重复的记录或查询时排除重复的记录。</p><p>以下是两种常见的去重操作：</p><ol><li><p><strong>查询时去重</strong>：</p><ul><li>使用<code>SELECT DISTINCT</code>语句来查询不重复的记录。</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span> column1, column2, ...</span><br><span class="line"><span class="keyword">FROM</span> table_name;</span><br></pre></td></tr></table></figure><p>这条语句将返回指定列中不重复的所有记录。</p></li><li><p><strong>删除重复记录</strong>：</p><ul><li>删除表中的重复记录稍微复杂一些，需要使用临时表或子查询来实现。以下是一个常见的步骤：<ul><li>创建一个临时表，将不重复的记录插入到临时表中。</li><li>删除原表中的所有记录。</li><li>将临时表中的记录插入回原表。</li><li>删除临时表。</li></ul></li></ul><p>示例代码如下：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 创建临时表</span></span><br><span class="line"><span class="keyword">CREATE</span> TEMPORARY <span class="keyword">TABLE</span> temp_table <span class="keyword">AS</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span> <span class="operator">*</span> <span class="keyword">FROM</span> original_table;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 删除原表中的所有记录</span></span><br><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> original_table;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 将临时表中的记录插入回原表</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> original_table <span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> temp_table;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 删除临时表</span></span><br><span class="line"><span class="keyword">DROP</span> TEMPORARY <span class="keyword">TABLE</span> temp_table;</span><br></pre></td></tr></table></figure><p>另一种方法是使用子查询和<code>DELETE</code>语句来删除重复记录：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DELETE</span> t1 <span class="keyword">FROM</span> original_table t1</span><br><span class="line"><span class="keyword">INNER</span> <span class="keyword">JOIN</span> original_table t2</span><br><span class="line"><span class="keyword">WHERE</span> t1.id <span class="operator">&gt;</span> t2.id <span class="keyword">AND</span> t1.column <span class="operator">=</span> t2.column;</span><br></pre></td></tr></table></figure><p>这条语句将删除<code>original_table</code>中所有重复的记录，保留每个重复组中的一个记录。</p></li></ol><p>哦对，去重操作可能会影响数据的完整性和表之间的关系，因此在执行这些操作之前，请确保备份数据并了解其潜在影响。</p><h4 id="select之中简单的计算"><a class="markdownIt-Anchor" href="#select之中简单的计算"></a> SELECT之中简单的计算</h4><p>在MySQL的<code>SELECT</code>语句中，我们可以进行各种简单的计算操作，比如加法、减法、乘法、除法等。这些计算可以直接在<code>SELECT</code>子句中进行，从而在查询结果中显示计算后的值：</p><table><thead><tr><th>操作类型</th><th>SQL 示例代码</th><th>描述</th></tr></thead><tbody><tr><td><strong>加  法</strong></td><td><code>SELECT column1, column2, column1 + column2 AS sum_column FROM table_name;</code></td><td>返回<code>column1</code>和<code>column2</code>的值，并在结果中显示它们的和，命名为<code>sum_column</code>。</td></tr><tr><td><strong>减  法</strong></td><td><code>SELECT column1, column2, column1 - column2 AS difference_column FROM table_name;</code></td><td>返回<code>column1</code>和<code>column2</code>的值，并在结果中显示它们的差，命名为<code>difference_column</code>。</td></tr><tr><td><strong>乘  法</strong></td><td><code>SELECT column1, column2, column1 * column2 AS product_column FROM table_name;</code></td><td>返回<code>column1</code>和<code>column2</code>的值，并在结果中显示它们的乘积，命名为<code>product_column</code>。</td></tr><tr><td><strong>除  法</strong></td><td><code>SELECT column1, column2, column1 / column2 AS quotient_column FROM table_name;</code></td><td>返回<code>column1</code>和<code>column2</code>的值，并在结果中显示它们的商，命名为<code>quotient_column</code>。注意：如果<code>column2</code>的值为0，将会导致除以零的错误。</td></tr><tr><td><strong>混合计算</strong></td><td><code>SELECT column1, column2, (column1 + column2) * 2 AS calculated_column FROM table_name;</code></td><td>返回<code>column1</code>和<code>column2</code>的值，并在结果中显示它们的和乘以2的结果，命名为<code>calculated_column</code>。</td></tr></tbody></table><h3 id="where"><a class="markdownIt-Anchor" href="#where"></a> WHERE</h3><p>在MySQL中，<code>WHERE</code>子句用于在<code>SELECT</code>、<code>UPDATE</code>、<code>DELETE</code>语句中指定条件，从而对数据进行筛选。<code>WHERE</code>子句允许我们根据一个或多个条件过滤数据，只返回满足这些条件的记录。以下是对<code>WHERE</code>子句的详细补充：</p><h4 id="基本语法-2"><a class="markdownIt-Anchor" href="#基本语法-2"></a> <strong>基本语法</strong>：</h4>   <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> column1, column2, ...</span><br><span class="line"><span class="keyword">FROM</span> table_name</span><br><span class="line"><span class="keyword">WHERE</span> <span class="keyword">condition</span>;</span><br></pre></td></tr></table></figure><p>这里的<code>condition</code>是一个逻辑表达式，用于评估每一行数据是否满足条件。</p><h4 id="常见的条件运算符"><a class="markdownIt-Anchor" href="#常见的条件运算符"></a> <strong>常见的条件运算符</strong>：</h4><p>假设我们有一个名为<code>employees</code>的表，其中存储了员工的年龄（<code>age</code>）、部门（<code>department</code>）、工资（<code>salary</code>）和电子邮件（<code>email</code>）等信息。</p><p>我们可以使用各种条件运算符来查询和筛选这个表中的数据：</p><table><thead><tr><th>运算符</th><th>描述</th><th>示例</th><th>说明</th></tr></thead><tbody><tr><td><code>=</code></td><td>等于</td><td><code>SELECT * FROM employees WHERE age = 30;</code></td><td>查询年龄等于30岁的所有员工。</td></tr><tr><td><code>&lt;&gt;</code> 或 <code>!=</code></td><td>不等于</td><td><code>SELECT * FROM employees WHERE department &lt;&gt; 'Sales';</code></td><td>查询部门不是&quot;Sales&quot;的所有员工。</td></tr><tr><td><code>&gt;</code></td><td>大于</td><td><code>SELECT * FROM employees WHERE salary &gt; 5000;</code></td><td>查询工资大于5000的所有员工。</td></tr><tr><td><code>&lt;</code></td><td>小于</td><td><code>SELECT * FROM employees WHERE age &lt; 40;</code></td><td>查询年龄小于40岁的所有员工。</td></tr><tr><td><code>&gt;=</code></td><td>大于等于</td><td><code>SELECT * FROM employees WHERE salary &gt;= 5000;</code></td><td>查询工资大于或等于5000的所有员工。</td></tr><tr><td><code>&lt;=</code></td><td>小于等于</td><td><code>SELECT * FROM employees WHERE age &lt;= 40;</code></td><td>查询年龄小于或等于40岁的所有员工。</td></tr><tr><td><code>BETWEEN ... AND ...</code></td><td>在某个范围内</td><td><code>SELECT * FROM employees WHERE salary BETWEEN 5000 AND 10000;</code></td><td>查询工资在5000到10000之间的所有员工（包括5000和10000）。</td></tr><tr><td><code>IN (...)</code></td><td>在某个集合中</td><td><code>SELECT * FROM employees WHERE department IN ('Sales', 'Marketing');</code></td><td>查询部门是&quot;Sales&quot;或&quot;Marketing&quot;的所有员工。</td></tr><tr><td><code>LIKE</code></td><td>匹配某个模式</td><td><code>SELECT * FROM employees WHERE name LIKE 'A%';</code></td><td>查询名字以&quot;A&quot;开头的所有员工（<code>%</code>表示任意字符序列）。</td></tr><tr><td><code>LIKE</code></td><td>匹配某个模式</td><td><code>SELECT * FROM employees WHERE name LIKE '_A%';</code></td><td>查询名字以&quot;A&quot;第二个字母的所有员工（第一个字符可以是任意字符（用<code>_</code>表示））</td></tr><tr><td><code>IS NULL</code></td><td>为空</td><td><code>SELECT * FROM employees WHERE email IS NULL;</code></td><td>查询没有电子邮件地址的所有员工。</td></tr><tr><td><code>IS NOT NULL</code></td><td>不为空</td><td><code>SELECT * FROM employees WHERE email IS NOT NULL;</code></td><td>查询有电子邮件地址的所有员工。</td></tr><tr><td><code>AND</code></td><td>逻辑与</td><td><code>SELECT * FROM employees WHERE age &gt; 30 AND department = 'Sales';</code></td><td>查询年龄大于30岁且部门是&quot;Sales&quot;的所有员工。</td></tr><tr><td><code>OR</code></td><td>逻辑或</td><td><code>SELECT * FROM employees WHERE age &gt; 30 OR salary &gt; 10000;</code></td><td>查询年龄大于30岁或工资大于10000的所有员工。</td></tr><tr><td><code>NOT</code></td><td>逻辑非</td><td><code>SELECT * FROM employees WHERE NOT department = 'Sales';</code></td><td>查询部门不是&quot;Sales&quot;的所有员工。</td></tr></tbody></table><h4 id="组合条件"><a class="markdownIt-Anchor" href="#组合条件"></a> <strong>组合条件</strong>：</h4><ul><li>使用<code>AND</code>和<code>OR</code>组合多个条件：<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> employees <span class="keyword">WHERE</span> age <span class="operator">&gt;</span> <span class="number">30</span> <span class="keyword">AND</span> department <span class="operator">=</span> <span class="string">&#x27;Sales&#x27;</span>;</span><br></pre></td></tr></table></figure></li><li>使用括号来明确优先级：<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> employees <span class="keyword">WHERE</span> (age <span class="operator">&gt;</span> <span class="number">30</span> <span class="keyword">AND</span> department <span class="operator">=</span> <span class="string">&#x27;Sales&#x27;</span>) <span class="keyword">OR</span> salary <span class="operator">&gt;</span> <span class="number">10000</span>;</span><br></pre></td></tr></table></figure></li></ul><h4 id="简化"><a class="markdownIt-Anchor" href="#简化"></a> 简化</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> name </span><br><span class="line"><span class="keyword">from</span> world </span><br><span class="line"><span class="keyword">where</span> name <span class="keyword">like</span> <span class="string">&#x27;%a%&#x27;</span></span><br><span class="line"><span class="keyword">and</span> name <span class="keyword">like</span> <span class="string">&#x27;%e%&#x27;</span> </span><br><span class="line"><span class="keyword">and</span> name <span class="keyword">like</span> <span class="string">&#x27;%i%&#x27;</span></span><br><span class="line"><span class="keyword">and</span> name <span class="keyword">like</span> <span class="string">&#x27;%o%&#x27;</span> </span><br><span class="line"><span class="keyword">and</span> name <span class="keyword">like</span> <span class="string">&#x27;%u%&#x27;</span> </span><br><span class="line"><span class="keyword">and</span> name <span class="keyword">not</span> <span class="keyword">like</span> <span class="string">&#x27;% %&#x27;</span></span><br></pre></td></tr></table></figure><p>对于上面的SQL语句，我们可以进行简化。</p><p>通过正则表达式（Regular Expression）来简化这个查询。MySQL支持使用<code>REGEXP</code>或<code>RLIKE</code>运算符来进行正则表达式匹配：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> name</span><br><span class="line"><span class="keyword">FROM</span> world</span><br><span class="line"><span class="keyword">WHERE</span> name REGEXP <span class="string">&#x27;[aeiou]&#x27;</span></span><br><span class="line">  <span class="keyword">AND</span> name <span class="keyword">NOT</span> <span class="keyword">LIKE</span> <span class="string">&#x27;% %&#x27;</span>;</span><br></pre></td></tr></table></figure><p>解释：</p><ul><li><code>name REGEXP '[aeiou]'</code>：这个条件检查名字中是否包含至少一个元音字母（a, e, i, o, u）。</li><li><code>name NOT LIKE '% %'</code>：这个条件确保名字中不包含空格。</li></ul><p><code>WHERE</code>子句是SQL查询中非常强大和灵活的工具，它允许我们精确地控制返回的数据集，从而满足各种数据分析和操作的需求。</p><h3 id="order-by"><a class="markdownIt-Anchor" href="#order-by"></a> ORDER BY</h3><p><code>ORDER BY</code> 是 SQL 中用于对查询结果进行排序的关键字。通过 <code>ORDER BY</code>，我们可以根据一个或多个列的值对结果集进行升序（ASC）或降序（DESC）排序。以下是 <code>ORDER BY</code> 的基本用法和一些示例：</p><h4 id="基本语法-3"><a class="markdownIt-Anchor" href="#基本语法-3"></a> 基本语法</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> column1, column2, ...</span><br><span class="line"><span class="keyword">FROM</span> table_name</span><br><span class="line"><span class="keyword">WHERE</span> <span class="keyword">condition</span></span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> column1 [<span class="keyword">ASC</span><span class="operator">|</span><span class="keyword">DESC</span>], column2 [<span class="keyword">ASC</span><span class="operator">|</span><span class="keyword">DESC</span>], ...;</span><br></pre></td></tr></table></figure><ul><li><code>column1</code>, <code>column2</code>, …：指定用于排序的列。</li><li><code>ASC</code>：表示升序排序（默认）。</li><li><code>DESC</code>：表示降序排序。</li></ul><h4 id="示例"><a class="markdownIt-Anchor" href="#示例"></a> 示例</h4><ol><li><p><strong>单列升序排序</strong>：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> name, age</span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> age;</span><br></pre></td></tr></table></figure><p>这个查询将返回所有员工的名字和年龄，并按年龄升序排序。</p></li><li><p><strong>单列降序排序</strong>：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> name, age</span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> age <span class="keyword">DESC</span>;</span><br></pre></td></tr></table></figure><p>这个查询将返回所有员工的名字和年龄，并按年龄降序排序。</p></li><li><p><strong>多列排序</strong>：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> name, department, salary</span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> department, salary <span class="keyword">DESC</span>;</span><br></pre></td></tr></table></figure><p>这个查询将首先按部门升序排序，然后在每个部门内按工资降序排序。</p></li><li><p><strong>使用列别名排序</strong>：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> name, age <span class="keyword">AS</span> employee_age</span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> employee_age;</span><br></pre></td></tr></table></figure><p>这个查询将返回所有员工的名字和年龄（使用别名 <code>employee_age</code>），并按年龄升序排序。</p></li><li><p><strong>使用列位置排序</strong>：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> name, age</span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> <span class="number">2</span>;</span><br></pre></td></tr></table></figure><p>这个查询将返回所有员工的名字和年龄，并按第二列（即 <code>age</code>）升序排序。</p></li><li><p><strong>使用IN</strong>：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> name, age, address</span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> address <span class="keyword">IN</span> (<span class="string">&#x27;上海&#x27;</span>, <span class="string">&#x27;北京&#x27;</span>), name, age;</span><br></pre></td></tr></table></figure></li></ol><p>这个查询首先是根据<code>address</code>列是否为’上海’或’北京’进行排序。</p><p>这里的<code>address IN ('上海', '北京')</code>会返回一个布尔值（TRUE或FALSE），TRUE会被视为1，FALSE会被视为0。</p><p>因为默认是升序排序，所以地址为’上海’或’北京’的记录会被排在后面。</p><h4 id="注意事项"><a class="markdownIt-Anchor" href="#注意事项"></a> 注意事项</h4><ul><li><code>ORDER BY</code> 通常放在 <code>SELECT</code> 语句的最后。</li><li>如果不指定排序顺序（即不使用 <code>ASC</code> 或 <code>DESC</code>），默认是升序排序。</li><li>多列排序时，先按第一个列排序，然后在第一个列的每个值内按第二个列排序，依此类推。</li></ul><h3 id="limit"><a class="markdownIt-Anchor" href="#limit"></a> LIMIT</h3><p><code>LIMIT</code>是SQL中用于限制查询结果返回行数的子句。它通常用于以下几种情况：</p><ol><li><strong>限制返回的行数</strong>：当你只需要查询结果的前几行时，可以使用<code>LIMIT</code>。</li><li><strong>分页查询</strong>：在实现分页功能时，<code>LIMIT</code>和<code>OFFSET</code>结合使用可以指定从哪一行开始返回多少行数据。</li></ol><h4 id="基本语法-4"><a class="markdownIt-Anchor" href="#基本语法-4"></a> 基本语法</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> column1, column2, ...</span><br><span class="line"><span class="keyword">FROM</span> table_name</span><br><span class="line">LIMIT number;</span><br></pre></td></tr></table></figure><p><strong>示例:</strong></p><p>假设我们有一个<code>employees</code>表，我们只想获取前5名员工的信息：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> name, age, address</span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line">LIMIT <span class="number">5</span>;</span><br></pre></td></tr></table></figure><h4 id="结合offset使用"><a class="markdownIt-Anchor" href="#结合offset使用"></a> 结合<code>OFFSET</code>使用</h4><p><code>OFFSET</code>用于指定从哪一行开始返回数据。通常用于分页查询。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> column1, column2, ...</span><br><span class="line"><span class="keyword">FROM</span> table_name</span><br><span class="line">LIMIT number <span class="keyword">OFFSET</span> <span class="keyword">offset</span>;</span><br></pre></td></tr></table></figure><p>或者更常见的写法是：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> column1, column2, ...</span><br><span class="line"><span class="keyword">FROM</span> table_name</span><br><span class="line">LIMIT <span class="keyword">offset</span>, number;</span><br></pre></td></tr></table></figure><p><strong>示例:</strong></p><p>假设我们有一个<code>employees</code>表，我们想获取第7到第10名员工的信息：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> name, age, address</span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line">LIMIT <span class="number">4</span> <span class="keyword">OFFSET</span> <span class="number">6</span>;</span><br></pre></td></tr></table></figure><p>或者：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> name, age, address</span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line">LIMIT <span class="number">6</span>, <span class="number">4</span>;</span><br></pre></td></tr></table></figure><p>从6+1开始，然后获取4个数据的意思（即获取第7到第10名员工的信息）</p><h4 id="注意事项-2"><a class="markdownIt-Anchor" href="#注意事项-2"></a> 注意事项</h4><ol><li><strong>性能考虑</strong>：使用<code>LIMIT</code>可以提高查询性能，尤其是在处理大数据集时。</li><li><strong>排序</strong>：在使用<code>LIMIT</code>时，通常需要结合<code>ORDER BY</code>子句来确保结果的顺序是确定的。</li></ol><p><strong>示例:</strong></p><p>假设我们想获取年龄最大的前5名员工的信息：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> name, age, address</span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> age <span class="keyword">DESC</span></span><br><span class="line">LIMIT <span class="number">5</span>;</span><br></pre></td></tr></table></figure><h3 id="聚合函数-group-by"><a class="markdownIt-Anchor" href="#聚合函数-group-by"></a> 聚合函数 &amp; group by</h3><p>聚合函数在SQL中用于对一组值进行计算，并返回单个值。它们通常与<code>GROUP BY</code>子句一起使用，以便对数据进行分组并计算每个组的聚合值。下面是一些常用的聚合函数及其使用示例：</p><h4 id="常用的聚合函数"><a class="markdownIt-Anchor" href="#常用的聚合函数"></a> 常用的聚合函数</h4><ol><li><strong>COUNT</strong>：计算行数。</li><li><strong>SUM</strong>：计算总和。</li><li><strong>AVG</strong>：计算平均值。</li><li><strong>MAX</strong>：找出最大值。</li><li><strong>MIN</strong>：找出最小值。</li></ol><p><strong>示例：</strong></p><p>假设我们有一个名为<code>sales</code>的表，包含以下列：<code>product_id</code>、<code>sale_date</code>、<code>quantity</code>和<code>revenue</code>。</p><ol><li>COUNT</li></ol><p>计算总行数：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="built_in">COUNT</span>(<span class="operator">*</span>) <span class="keyword">AS</span> total_rows</span><br><span class="line"><span class="keyword">FROM</span> sales;</span><br></pre></td></tr></table></figure><p>计算特定产品的销售记录数：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> product_id, <span class="built_in">COUNT</span>(<span class="operator">*</span>) <span class="keyword">AS</span> sales_count</span><br><span class="line"><span class="keyword">FROM</span> sales</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> product_id;</span><br></pre></td></tr></table></figure><ol start="2"><li>SUM</li></ol><p>计算总销售额：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="built_in">SUM</span>(revenue) <span class="keyword">AS</span> total_revenue</span><br><span class="line"><span class="keyword">FROM</span> sales;</span><br></pre></td></tr></table></figure><p>计算每个产品的总销售额：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> product_id, <span class="built_in">SUM</span>(revenue) <span class="keyword">AS</span> total_revenue</span><br><span class="line"><span class="keyword">FROM</span> sales</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> product_id;</span><br></pre></td></tr></table></figure><ol start="3"><li>AVG</li></ol><p>计算平均销售额：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="built_in">AVG</span>(revenue) <span class="keyword">AS</span> average_revenue</span><br><span class="line"><span class="keyword">FROM</span> sales;</span><br></pre></td></tr></table></figure><p>计算每个产品的平均销售额：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> product_id, <span class="built_in">AVG</span>(revenue) <span class="keyword">AS</span> average_revenue</span><br><span class="line"><span class="keyword">FROM</span> sales</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> product_id;</span><br></pre></td></tr></table></figure><ol start="4"><li>MAX</li></ol><p>找出最大销售额：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="built_in">MAX</span>(revenue) <span class="keyword">AS</span> max_revenue</span><br><span class="line"><span class="keyword">FROM</span> sales;</span><br></pre></td></tr></table></figure><p>找出每个产品的最大销售额：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> product_id, <span class="built_in">MAX</span>(revenue) <span class="keyword">AS</span> max_revenue</span><br><span class="line"><span class="keyword">FROM</span> sales</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> product_id;</span><br></pre></td></tr></table></figure><ol start="5"><li>MIN</li></ol><p>找出最小销售额：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="built_in">MIN</span>(revenue) <span class="keyword">AS</span> min_revenue</span><br><span class="line"><span class="keyword">FROM</span> sales;</span><br></pre></td></tr></table></figure><p>找出每个产品的最小销售额：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> product_id, <span class="built_in">MIN</span>(revenue) <span class="keyword">AS</span> min_revenue</span><br><span class="line"><span class="keyword">FROM</span> sales</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> product_id;</span><br></pre></td></tr></table></figure><h4 id="结合group-by和having"><a class="markdownIt-Anchor" href="#结合group-by和having"></a> 结合<code>GROUP BY</code>和<code>HAVING</code></h4><p><code>HAVING</code>子句用于对分组后的结果进行筛选。例如，找出销售额总和超过1000的产品：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> product_id, <span class="built_in">SUM</span>(revenue) <span class="keyword">AS</span> total_revenue</span><br><span class="line"><span class="keyword">FROM</span> sales</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> product_id</span><br><span class="line"><span class="keyword">HAVING</span> <span class="built_in">SUM</span>(revenue) <span class="operator">&gt;</span> <span class="number">1000</span>;</span><br></pre></td></tr></table></figure><h4 id="聚合函数注意事项"><a class="markdownIt-Anchor" href="#聚合函数注意事项"></a> 聚合函数注意事项</h4><ol><li><strong>NULL值</strong>：聚合函数通常会忽略<code>NULL</code>值。例如，<code>COUNT(*)</code>会计算所有行，而<code>COUNT(column_name)</code>会忽略该列中的<code>NULL</code>值。</li><li><strong>数据类型</strong>：确保聚合函数应用于正确的数据类型。例如，<code>SUM</code>和<code>AVG</code>通常用于数值类型。</li></ol><h4 id="group-by基本语法"><a class="markdownIt-Anchor" href="#group-by基本语法"></a> <code>GROUP BY</code>基本语法</h4><p><code>GROUP BY</code>子句在SQL中用于将行分组，通常与聚合函数（如<code>COUNT</code>、<code>SUM</code>、<code>AVG</code>、<code>MAX</code>、<code>MIN</code>等）一起使用，以便对每个组进行计算。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> column1, column2, aggregate_function(column3)</span><br><span class="line"><span class="keyword">FROM</span> table_name</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> column1, column2;</span><br></pre></td></tr></table></figure><p><strong>示例：</strong></p><p>假设我们有一个名为<code>orders</code>的表，包含以下列：<code>customer_id</code>、<code>order_date</code>、<code>product_id</code>和<code>quantity</code>。</p><ol><li>按单个列分组</li></ol><p>计算每个客户的订单总数：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> customer_id, <span class="built_in">COUNT</span>(<span class="operator">*</span>) <span class="keyword">AS</span> order_count</span><br><span class="line"><span class="keyword">FROM</span> orders</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> customer_id;</span><br></pre></td></tr></table></figure><ol start="2"><li>按多个列分组</li></ol><p>计算每个客户和每个产品的订单总数：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> customer_id, product_id, <span class="built_in">COUNT</span>(<span class="operator">*</span>) <span class="keyword">AS</span> order_count</span><br><span class="line"><span class="keyword">FROM</span> orders</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> customer_id, product_id;</span><br></pre></td></tr></table></figure><ol start="3"><li>结合聚合函数</li></ol><p>计算每个客户的订单总数量：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> customer_id, <span class="built_in">SUM</span>(quantity) <span class="keyword">AS</span> total_quantity</span><br><span class="line"><span class="keyword">FROM</span> orders</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> customer_id;</span><br></pre></td></tr></table></figure><ol start="4"><li>结合<code>HAVING</code>子句</li></ol><p>筛选出订单总数超过10的客户：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> customer_id, <span class="built_in">COUNT</span>(<span class="operator">*</span>) <span class="keyword">AS</span> order_count</span><br><span class="line"><span class="keyword">FROM</span> orders</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> customer_id</span><br><span class="line"><span class="keyword">HAVING</span> <span class="built_in">COUNT</span>(<span class="operator">*</span>) <span class="operator">&gt;</span> <span class="number">10</span>;</span><br></pre></td></tr></table></figure><h4 id="group-by注意事项"><a class="markdownIt-Anchor" href="#group-by注意事项"></a> <code>GROUP BY</code>注意事项</h4><ol><li><strong>选择列</strong>：在<code>SELECT</code>子句中，除了聚合函数外，所有列都必须出现在<code>GROUP BY</code>子句中。</li><li><strong>NULL值</strong>：<code>GROUP BY</code>会将所有<code>NULL</code>值视为相同的组。</li><li><strong>性能考虑</strong>：<code>GROUP BY</code>操作可能会消耗较多资源，尤其是在处理大数据集时。可以考虑使用索引优化性能。</li></ol><p><strong>示例：结合多个聚合函数</strong></p><p>计算每个客户的订单总数、总数量和平均数量：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> customer_id, </span><br><span class="line">       <span class="built_in">COUNT</span>(<span class="operator">*</span>) <span class="keyword">AS</span> order_count, </span><br><span class="line">       <span class="built_in">SUM</span>(quantity) <span class="keyword">AS</span> total_quantity, </span><br><span class="line">       <span class="built_in">AVG</span>(quantity) <span class="keyword">AS</span> average_quantity</span><br><span class="line"><span class="keyword">FROM</span> orders</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> customer_id;</span><br></pre></td></tr></table></figure><h3 id="having"><a class="markdownIt-Anchor" href="#having"></a> HAVING</h3><p>在SQL中，<code>HAVING</code>子句用于对聚合函数的结果进行筛选。它通常与<code>GROUP BY</code>子句一起使用，以便在分组后对组进行条件过滤：</p><h4 id="语法"><a class="markdownIt-Anchor" href="#语法"></a> 语法</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> 列<span class="number">1</span>, 列<span class="number">2</span>, 聚合函数(列<span class="number">3</span>)</span><br><span class="line"><span class="keyword">FROM</span> 表名</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> 列<span class="number">1</span>, 列<span class="number">2</span></span><br><span class="line"><span class="keyword">HAVING</span> 聚合函数(列<span class="number">3</span>) 条件;</span><br></pre></td></tr></table></figure><p><strong>示例:</strong><br />假设我们有一个名为<code>sales</code>的表，其中包含以下列：<code>id</code>, <code>product</code>, <code>quantity</code>, <code>price</code>。我们想要找出每个产品的总销售额，并且只显示总销售额大于1000的产品。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> product, <span class="built_in">SUM</span>(quantity <span class="operator">*</span> price) <span class="keyword">AS</span> total_sales</span><br><span class="line"><span class="keyword">FROM</span> sales</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> product</span><br><span class="line"><span class="keyword">HAVING</span> <span class="built_in">SUM</span>(quantity <span class="operator">*</span> price) <span class="operator">&gt;</span> <span class="number">1000</span>;</span><br></pre></td></tr></table></figure><p>在这个示例中：</p><ol><li><code>SELECT product, SUM(quantity * price) AS total_sales</code>：选择产品名称和总销售额。</li><li><code>FROM sales</code>：从<code>sales</code>表中获取数据。</li><li><code>GROUP BY product</code>：按产品名称分组。</li><li><code>HAVING SUM(quantity * price) &gt; 1000</code>：筛选出总销售额大于1000的产品。</li></ol><h4 id="注意事项-3"><a class="markdownIt-Anchor" href="#注意事项-3"></a> 注意事项</h4><ul><li><code>HAVING</code>子句只能用于包含聚合函数的查询。</li><li><code>HAVING</code>子句在<code>GROUP BY</code>之后执行，因此它用于对分组后的结果进行筛选。</li><li>如果不需要对分组后的结果进行筛选，可以直接使用<code>WHERE</code>子句对原始数据进行筛选。</li></ul><blockquote><p><code>where</code>是对原始数据进行筛选(数据不改变)，而<code>having</code>是针对聚合函数的筛选(数据改变)</p></blockquote><h3 id="常见函数"><a class="markdownIt-Anchor" href="#常见函数"></a> 常见函数</h3><h4 id="数学函数"><a class="markdownIt-Anchor" href="#数学函数"></a> 数学函数</h4><ol><li>round(x,y)——四舍五入函数：</li></ol><ul><li>round函数对x值进行四舍五入，精确到小数点后y位</li><li>y为负值时，保留小数点左边相应的位数为0，不进行四舍五入</li></ul><p>下面是示例：</p><table><thead><tr><th>表达式</th><th>结果</th><th>说明</th></tr></thead><tbody><tr><td><code>ROUND(3.15, 1)</code></td><td>3.2</td><td>对小数部分的第一位进行四舍五入，结果是3.2</td></tr><tr><td><code>ROUND(14.15, -1)</code></td><td>10</td><td>对整数部分的十位进行四舍五入，结果是10</td></tr><tr><td><code>ROUND(152.15, 0)</code></td><td>152</td><td>对小数部分的第一位进行四舍五入，结果是152</td></tr><tr><td><code>ROUND(155.15, -1)</code></td><td>160</td><td>对整数部分的十位进行四舍五入，结果是160</td></tr><tr><td><code>ROUND(152.15, -2)</code></td><td>200</td><td>对整数部分的百位进行四舍五入，结果是200</td></tr><tr><td><code>ROUND(152.15, -3)</code></td><td>0</td><td>对整数部分的千位进行四舍五入，结果是0</td></tr></tbody></table><h4 id="字符串函数"><a class="markdownIt-Anchor" href="#字符串函数"></a> 字符串函数</h4><ol><li>concat(s1,s2,…)——连接字符串函数：</li></ol><ul><li>concat函数返回连接的参数s1,s2等产生的字符串</li><li>任以参数为null时，返回null<ul><li>示例1：<code>concat('My',' ','SQL')</code></li><li>结果：<code>My SQL</code>(中间有空格哦)</li><li>示例2：<code>concat('My',null,'SQL')</code></li><li>结果：<code>null</code>(只要有一个为null结果就返回null)</li></ul></li></ul><ol start="2"><li>replace(s,s1,s2)——替换函数：</li></ol><ul><li>replace函数使用字符串s2替代s中<strong>所有</strong>的s1<ul><li>示例：<code>replace('MySQLMySQL','SQL','sql')</code></li><li>结果：<code>MysqlMysql</code></li></ul></li></ul><ol start="3"><li>left(s,n)、right(s,n)&amp;substring(s,n,len)——截取字符串一部分的函数：</li></ol><ul><li>left函数返回字符串s最左边n个字符<ul><li>示例：<code>left(&quot;Hello, World!&quot;, 5)</code></li><li>结果：<code>&quot;Hello&quot;</code></li></ul></li><li>right函数返回字符串s最右边n个字符<ul><li>示例：<code>right(&quot;Hello, World!&quot;, 6)</code></li><li>结果：<code>&quot;World!&quot;</code></li></ul></li><li>substring函数返回字符串s从第n个字符起取长度为len的子字符串，n可以做为<strong>负值</strong>，则从<strong>倒数</strong>第n个字符起取长度为len的子字符串，没有len值则从第n个字符取到最后一位。<ul><li>示例1：<code>substring(&quot;Hello, World!&quot;, 7, 5)</code></li><li>结果：<code>&quot;World&quot;</code></li><li>示例2：<code>substring(&quot;Hello, World!&quot;, -6, 5)</code></li><li>结果：<code>&quot;World&quot;</code></li><li>示例3：<code>substring(&quot;Hello, World!&quot;, 7)</code></li><li>结果：<code>&quot;World!&quot;</code></li></ul></li></ul><ol start="4"><li>length()——统计字符串长度的函数：</li></ol><ul><li>用于返回字符串的长度（即字符串中字符的数量）<ul><li>示例：<code>select ... where length(content) &gt; 15</code></li><li>结果：返回content列字符串数量大于15的列</li></ul></li><li><strong>MySQL</strong>和<strong>SQLite</strong>使用<code>length</code>函数。<br /><strong>PostgreSQL</strong>使用<code>length</code>函数。<br /><strong>SQL Server</strong>使用<code>len</code>函数。<br /><strong>Oracle</strong>使用<code>length</code>函数。</li></ul><h4 id="数据类型转换函数"><a class="markdownIt-Anchor" href="#数据类型转换函数"></a> 数据类型转换函数</h4><ol><li>cast(x as type)——转换数据类型的函数</li></ol><ul><li>cast函数将一个类型的x值转换为另一类型的值</li><li>type参数可以填写char(n)、date、time、datetime、decimal等转换为对应的数值类型</li></ul><ol><li><strong>将整数转换为字符串</strong><br />- 示例：<code>cast(123 as char(5))</code><br />- 结果：<code>&quot;  123&quot;</code>（注意：这里假设<code>char(5)</code>会在左侧填充空格以达到5个字符的长度）</li><li><strong>将字符串转换为日期</strong><br />- 示例：<code>cast(&quot;2023-04-05&quot; as date)</code><br />- 结果：<code>2023-04-05</code>（日期类型）</li><li><strong>将字符串转换为时间</strong><br />- 示例：<code>cast(&quot;14:23:55&quot; as time)</code><br />- 结果：<code>14:23:55</code>（时间类型）</li><li><strong>将字符串转换为日期时间</strong><br />- 示例：<code>cast(&quot;2023-04-05 14:23:55&quot; as datetime)</code><br />- 结果：<code>2023-04-05 14:23:55</code>（日期时间类型）</li><li><strong>将浮点数转换为十进制数</strong><br />- 示例：<code>cast(123.456 as decimal(10, 2))</code><br />- 结果：<code>123.46</code>（十进制数类型，保留两位小数）</li></ol><h4 id="日期时间函数"><a class="markdownIt-Anchor" href="#日期时间函数"></a> 日期时间函数</h4><ol><li><strong>获取年月日函数</strong><ul><li><code>year(date)</code><ul><li>示例：<code>year('2023-04-05')</code></li><li>结果：<code>2023</code></li></ul></li><li><code>month(date)</code><ul><li>示例：<code>month('2023-04-05')</code></li><li>结果：<code>4</code></li></ul></li><li><code>day(date)</code><ul><li>示例：<code>day('2023-04-05')</code></li><li>结果：<code>5</code></li></ul></li></ul></li><li><strong>对指定起始时间进行加减操作</strong><ul><li><code>date_add(date, interval expr type)</code><ul><li>示例：<code>date_add('2023-04-05', interval 10 day)</code></li><li>结果：<code>2023-04-15</code></li></ul></li><li><code>date_sub(date, interval expr type)</code><ul><li>示例：<code>date_sub('2023-04-05', interval 5 day)</code></li><li>结果：<code>2023-03-31</code></li></ul></li></ul></li><li><strong>计算两个日期之间间隔的天数</strong><ul><li><code>datediff(date1, date2)</code><ul><li>示例：<code>datediff('2023-04-10', '2023-04-05')</code></li><li>结果：<code>5</code></li></ul></li></ul></li><li><strong>将日期和时间格式化</strong><ul><li><code>date_format(date, format)</code><ul><li>示例：<code>date_format('2023-04-05 14:23:55', '%Y-%m-%d %H:%i:%s')</code></li><li>结果：<code>2023-04-05 14:23:55</code></li><li>示例：<code>date_format('2023-04-05 14:23:55', '%d/%m/%Y')</code></li><li>结果：<code>05/04/2023</code></li></ul></li></ul></li><li>格式化符号说明：</li></ol><table><thead><tr><th>格式化符号</th><th>说明</th><th>格式化符号</th><th>说明</th></tr></thead><tbody><tr><td>%Y</td><td>4位数的年份（例如：2023）</td><td>%y</td><td>2位数的年份（例如：23）</td></tr><tr><td>%m</td><td>2位数的月份（01到12）</td><td>%c</td><td>月份的数字表示（1到12）</td></tr><tr><td>%d</td><td>2位数的日期（01到31）</td><td>%e</td><td>日期的数字表示（1到31）</td></tr><tr><td>%H</td><td>2位数的小时（00到23）</td><td>%k</td><td>小时（0到23）</td></tr><tr><td>%h</td><td>2位数的小时（01到12）</td><td>%I</td><td>2位数的小时（01到12）</td></tr><tr><td>%l</td><td>小时（1到12）</td><td></td><td></td></tr><tr><td>%i</td><td>2位数的分钟（00到59）</td><td></td><td></td></tr><tr><td>%S</td><td>2位数的秒（00到59）</td><td>%s</td><td>秒（从1970-01-01 00:00:00 UTC开始的秒数）</td></tr><tr><td>%f</td><td>微秒（000000到999999）</td><td></td><td></td></tr><tr><td>%p</td><td>AM或PM</td><td></td><td></td></tr><tr><td>%r</td><td>时间，12小时制（hh:mm:ss AM/PM）</td><td>%T</td><td>时间，24小时制（hh:mm:ss）</td></tr><tr><td>%W</td><td>星期几的全名（例如：Sunday）</td><td>%a</td><td>星期的缩写名（例如：Sun）</td></tr><tr><td>%w</td><td>星期几的数字表示（0=Sunday, 6=Saturday）</td><td></td><td></td></tr><tr><td>%j</td><td>一年中的第几天（001到366）</td><td></td><td></td></tr><tr><td>%U</td><td>一年中的第几周（00到53），星期天是一周的第一天</td><td>%u</td><td>一年中的第几周（00到53），星期一是一周的第一天</td></tr><tr><td>%V</td><td>一年中的第几周（01到53），星期天是一周的第一天，用于ISO 8601</td><td>%v</td><td>一年中的第几周（01到53），星期一是一周的第一天，用于ISO 8601</td></tr></tbody></table><h4 id="条件判断函数"><a class="markdownIt-Anchor" href="#条件判断函数"></a> 条件判断函数</h4><ol><li>if(expr,v1,v2)</li></ol><ul><li>如果表达式expr是true返回v1，否则返回v2<ul><li>示例：<code>if(5 &gt; 3, 'Yes', 'No')</code></li><li>结果：<code>'Yes'</code></li><li>示例：<code>if(length('hello') &gt; 10, 'Long', 'Short')</code></li><li>结果：<code>'Short'</code></li></ul></li></ul><ol start="2"><li>case when</li></ol><ul><li>case expr when v1 then r1 [when v2 then r2]…[else rn] end<ul><li>例如：<code>case 2 when 1 then 'one' when 2 then 'two' else 'more' end</code></li><li>结果：<code>two</code></li></ul></li><li>case when v1 then r1 [when v2 then r2]…[else rn] end<ul><li>例如：<code>case when 1&lt;0 then 'T' else 'F' end </code></li><li>结果：<code>F</code></li></ul></li></ul><ol start="3"><li>详细说明<code>case when</code><br /><code>case when</code> 语句用于多条件判断，可以根据不同的条件返回不同的结果。它有两种常见的形式,第一种形式是基于表达式的判断，第二种形式是基于条件的判断。</li></ol><h5 id="形式一基于表达式的-case-when"><a class="markdownIt-Anchor" href="#形式一基于表达式的-case-when"></a> 形式一：基于表达式的 <code>case when</code></h5><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CASE</span> expr </span><br><span class="line">  <span class="keyword">WHEN</span> v1 <span class="keyword">THEN</span> r1 </span><br><span class="line">  [<span class="keyword">WHEN</span> v2 <span class="keyword">THEN</span> r2]</span><br><span class="line">  ...</span><br><span class="line">  [<span class="keyword">ELSE</span> rn] </span><br><span class="line"><span class="keyword">END</span></span><br></pre></td></tr></table></figure><ul><li><strong>示例</strong>：<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> </span><br><span class="line">  <span class="keyword">CASE</span> <span class="number">2</span> </span><br><span class="line">    <span class="keyword">WHEN</span> <span class="number">1</span> <span class="keyword">THEN</span> <span class="string">&#x27;one&#x27;</span> </span><br><span class="line">    <span class="keyword">WHEN</span> <span class="number">2</span> <span class="keyword">THEN</span> <span class="string">&#x27;two&#x27;</span> </span><br><span class="line">    <span class="keyword">ELSE</span> <span class="string">&#x27;more&#x27;</span> </span><br><span class="line">  <span class="keyword">END</span> <span class="keyword">AS</span> <span class="keyword">result</span>;</span><br></pre></td></tr></table></figure></li><li><strong>结果</strong>：<code>two</code></li></ul><h5 id="形式二基于条件的-case-when"><a class="markdownIt-Anchor" href="#形式二基于条件的-case-when"></a> 形式二：基于条件的 <code>case when</code></h5><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CASE</span> </span><br><span class="line">  <span class="keyword">WHEN</span> v1 <span class="keyword">THEN</span> r1 </span><br><span class="line">  [<span class="keyword">WHEN</span> v2 <span class="keyword">THEN</span> r2]</span><br><span class="line">  ...</span><br><span class="line">  [<span class="keyword">ELSE</span> rn] </span><br><span class="line"><span class="keyword">END</span></span><br></pre></td></tr></table></figure><ul><li><strong>示例</strong>：<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> </span><br><span class="line">  <span class="keyword">CASE</span> </span><br><span class="line">    <span class="keyword">WHEN</span> <span class="number">1</span> <span class="operator">&lt;</span> <span class="number">0</span> <span class="keyword">THEN</span> <span class="string">&#x27;T&#x27;</span> </span><br><span class="line">    <span class="keyword">ELSE</span> <span class="string">&#x27;F&#x27;</span> </span><br><span class="line">  <span class="keyword">END</span> <span class="keyword">AS</span> <span class="keyword">result</span>;</span><br></pre></td></tr></table></figure></li><li><strong>结果</strong>：<code>F</code><br /><code>case when</code>语句在处理复杂逻辑和多分支场景时非常有用：</li></ul><h2 id="高级语句"><a class="markdownIt-Anchor" href="#高级语句"></a> 高级语句</h2><p>SQL高级语句可以用于数据处理、分析和转换等，是数据岗工作所必备的技能。</p><h3 id="窗口函数"><a class="markdownIt-Anchor" href="#窗口函数"></a> 窗口函数</h3><p>窗口函数是SQL中用于对数据进行分组、排序和计算的高级功能。它们可以在不改变数据行数的情况下，对数据进行复杂的分析和处理。</p><h4 id="标准语法"><a class="markdownIt-Anchor" href="#标准语法"></a> 标准语法</h4><p>窗口函数的标准语法如下：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator">&lt;</span>窗口函数<span class="operator">&gt;</span> <span class="keyword">OVER</span> (</span><br><span class="line">    [<span class="keyword">PARTITION</span> <span class="keyword">BY</span> <span class="operator">&lt;</span>分区列<span class="operator">&gt;</span>]</span><br><span class="line">    [<span class="keyword">ORDER</span> <span class="keyword">BY</span> <span class="operator">&lt;</span>排序列<span class="operator">&gt;</span>]</span><br><span class="line">    [<span class="operator">&lt;</span>窗口框架<span class="operator">&gt;</span>]</span><br><span class="line">)</span><br></pre></td></tr></table></figure><ul><li><code>窗口函数</code>：可以是聚合函数（如 <code>SUM</code>、<code>AVG</code>）或者是其他的窗口函数（如 <code>ROW_NUMBER</code>）。</li><li><code>PARTITION BY</code>：可选，指定分区列。</li><li><code>ORDER BY</code>：可选，指定排序列。</li><li><code>窗口框架</code>：可选，定义窗口的范围，如 <code>ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW</code>。</li></ul><h4 id="滑动窗口rowsrange用法"><a class="markdownIt-Anchor" href="#滑动窗口rowsrange用法"></a> 滑动窗口：rows&amp;range用法</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator">&lt;</span><span class="keyword">ROWS</span> <span class="keyword">or</span> <span class="keyword">RANGE</span> clause<span class="operator">&gt;</span> <span class="keyword">BETWEEN</span> <span class="operator">&lt;</span><span class="keyword">Start</span> expr<span class="operator">&gt;</span> <span class="keyword">AND</span> <span class="operator">&lt;</span><span class="keyword">End</span> expr<span class="operator">&gt;</span></span><br></pre></td></tr></table></figure><p>ROWS: 表示按照行的范围进行定义框架，根据order by子句排序后，取的前N行及后N行的数据计算（与当前行的值无关，只与排序后的行号相关）。</p><p>常用：rows n perceding表示从当前行到前n行（一共n+1行）</p><p>RANGE：表示按照值的范围进行定义框架，根据order by子句排序后，指定当前行对应值的范围取值，行数不固定，只要行值在范围内，对应行都包含在内。适用于对日期、时间、数值排序分组</p><table><thead><tr><th>边界可取值 (Start expr &amp; End expr)</th><th>说明</th></tr></thead><tbody><tr><td><code>CURRENT ROW</code></td><td>当前行</td></tr><tr><td><code>N PRECEDING</code></td><td>前 n 行，n 为数字，比如 <code>2 PRECEDING</code> 表示前2行</td></tr><tr><td><code>UNBOUNDED PRECEDING</code></td><td>开头</td></tr><tr><td><code>N FOLLOWING</code></td><td>后 N 行，n 为数字，比如 <code>2 FOLLOWING</code> 表示后2行</td></tr><tr><td><code>UNBOUNDED FOLLOWING</code></td><td>结尾</td></tr></tbody></table><table><thead><tr><th><code>RANGE</code> 取特定日期区间</th><th>说明</th></tr></thead><tbody><tr><td><code>RANGE INTERVAL '7-1' DAY PRECEDING</code></td><td>最近7天的值</td></tr><tr><td><code>RANGE BETWEEN INTERVAL '1' DAY PRECEDING AND INTERVAL '1' DAY FOLLOWING</code></td><td>前后一天和当天的值</td></tr></tbody></table><p><strong>示例1：</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">    id,</span><br><span class="line">    name,</span><br><span class="line">    salary,</span><br><span class="line">    departmentld,</span><br><span class="line">    <span class="built_in">sum</span>(salary)<span class="keyword">over</span>(<span class="keyword">order</span> <span class="keyword">by</span> id) <span class="keyword">as</span> <span class="string">&#x27;累计工资&#x27;</span>,</span><br><span class="line">    <span class="built_in">sum</span>(salary)<span class="keyword">over</span>(<span class="keyword">order</span> <span class="keyword">by</span> id <span class="keyword">rows</span> <span class="number">1</span> preceding) <span class="keyword">as</span> <span class="string">&#x27;本行加前一行&#x27;</span>,</span><br><span class="line">    <span class="built_in">sum</span>(salary)<span class="keyword">over</span>(<span class="keyword">order</span> <span class="keyword">by</span> id <span class="keyword">rows</span> <span class="number">2</span> preceding) <span class="keyword">as</span> <span class="string">&#x27;本行加前两行&#x27;</span>,</span><br><span class="line">    <span class="built_in">sum</span>(salary)<span class="keyword">over</span>(<span class="keyword">order</span> <span class="keyword">by</span> id <span class="keyword">rows</span> <span class="keyword">between</span> <span class="number">2</span> preceding <span class="keyword">and</span> <span class="number">1</span> following ) <span class="keyword">as</span> <span class="string">&#x27;前两行加到后一行&#x27;</span>,</span><br><span class="line">    <span class="built_in">sum</span>(salary)<span class="keyword">over</span>(<span class="keyword">order</span> <span class="keyword">by</span> id <span class="keyword">rows</span> <span class="keyword">between</span> <span class="keyword">current</span> <span class="type">row</span> <span class="keyword">and</span> <span class="number">1</span> unbounded following ) <span class="keyword">as</span> <span class="string">&#x27;当前行加到后一行&#x27;</span></span><br><span class="line"><span class="keyword">FROM</span> employees;</span><br></pre></td></tr></table></figure><p>这段 SQL 查询使用了窗口函数来计算不同范围内的工资累计值。如下图：</p><p><img src="https://www.qiuxs.cn/sharing-tools/img/read/3aae9b54b94e6c6d61ea1cab1887271d" alt="1" /></p><p>下面来让我们逐行解释每个窗口函数的含义：</p><ol><li><strong>累计工资</strong>： <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sum</span>(salary) <span class="keyword">over</span> (<span class="keyword">order</span> <span class="keyword">by</span> id) <span class="keyword">as</span> <span class="string">&#x27;累计工资&#x27;</span></span><br></pre></td></tr></table></figure>这个窗口函数计算从第一行到当前行的工资累计值。由于没有指定 <code>ROWS</code> 或 <code>RANGE</code> 子句，默认是 <code>RANGE BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW</code>，即从分区的第一行到当前行的累计值。</li><li><strong>本行加前一行</strong>： <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sum</span>(salary) <span class="keyword">over</span> (<span class="keyword">order</span> <span class="keyword">by</span> id <span class="keyword">rows</span> <span class="number">1</span> preceding) <span class="keyword">as</span> <span class="string">&#x27;本行加前一行&#x27;</span></span><br></pre></td></tr></table></figure>这个窗口函数计算当前行和前一行的工资总和。<code>ROWS 1 PRECEDING</code> 表示窗口从当前行的前一行开始，到当前行结束。</li><li><strong>本行加前两行</strong>： <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sum</span>(salary) <span class="keyword">over</span> (<span class="keyword">order</span> <span class="keyword">by</span> id <span class="keyword">rows</span> <span class="number">2</span> preceding) <span class="keyword">as</span> <span class="string">&#x27;本行加前两行&#x27;</span></span><br></pre></td></tr></table></figure>这个窗口函数计算当前行和前两行的工资总和。<code>ROWS 2 PRECEDING</code> 表示窗口从当前行的前两行开始，到当前行结束。</li><li><strong>前两行加到后一行</strong>： <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sum</span>(salary) <span class="keyword">over</span> (<span class="keyword">order</span> <span class="keyword">by</span> id <span class="keyword">rows</span> <span class="keyword">between</span> <span class="number">2</span> preceding <span class="keyword">and</span> <span class="number">1</span> following) <span class="keyword">as</span> <span class="string">&#x27;前两行加到后一行&#x27;</span></span><br></pre></td></tr></table></figure>这个窗口函数计算从当前行的前两行到当前行的后一行的工资总和。<code>ROWS BETWEEN 2 PRECEDING AND 1 FOLLOWING</code> 表示窗口从当前行的前两行开始，到当前行的后一行结束。</li><li><strong>当前行加到后一行</strong>： <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sum</span>(salary) <span class="keyword">over</span> (<span class="keyword">order</span> <span class="keyword">by</span> id <span class="keyword">rows</span> <span class="keyword">between</span> <span class="keyword">current</span> <span class="type">row</span> <span class="keyword">and</span> <span class="number">1</span> unbounded following) <span class="keyword">as</span> <span class="string">&#x27;当前行加到后一行&#x27;</span></span><br></pre></td></tr></table></figure>这个窗口函数计算从当前行到分区的最后一行的工资总和。<code>ROWS BETWEEN CURRENT ROW AND UNBOUNDED FOLLOWING</code> 表示窗口从当前行开始，到分区的最后一行结束。</li></ol><p><strong>示例2：</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">    id,</span><br><span class="line">    name,</span><br><span class="line">    salary,</span><br><span class="line">    departmentld,</span><br><span class="line">    <span class="built_in">count</span>(<span class="operator">*</span>)<span class="keyword">over</span>(<span class="keyword">order</span> <span class="keyword">by</span> salary <span class="keyword">range</span> <span class="keyword">between</span> <span class="number">10000</span> preceding <span class="keyword">and</span> <span class="number">10000</span> following) <span class="keyword">as</span> <span class="string">&#x27;员工人数（薪资在±10000）&#x27;</span>,</span><br><span class="line">    <span class="built_in">count</span>(<span class="operator">*</span>)<span class="keyword">over</span>(<span class="keyword">order</span> <span class="keyword">by</span> salary <span class="keyword">range</span> <span class="keyword">between</span> <span class="number">5000</span> preceding <span class="keyword">and</span> <span class="number">5000</span> following) <span class="keyword">as</span> <span class="string">&#x27;员工人数（薪资在±5000）&#x27;</span></span><br><span class="line"><span class="keyword">FROM</span> employees;</span><br></pre></td></tr></table></figure><p>这段 SQL 查询使用了窗口函数来计算在特定薪资范围内的员工人数。具体来说，它使用了 <code>RANGE</code> 子句来定义窗口，该窗口基于薪资的值范围。如下图：</p><p><img src="https://www.qiuxs.cn/sharing-tools/img/read/d2420c572cc95fa9bb7eb24963b10385" alt="2" /><br />让我们逐行解释每个窗口函数的含义：</p><ol><li><p><strong>员工人数（薪资在±10000）</strong>：</p> <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">count</span>(<span class="operator">*</span>) <span class="keyword">over</span> (<span class="keyword">order</span> <span class="keyword">by</span> salary <span class="keyword">range</span> <span class="keyword">between</span> <span class="number">10000</span> preceding <span class="keyword">and</span> <span class="number">10000</span> following) <span class="keyword">as</span> <span class="string">&#x27;员工人数（薪资在±10000）&#x27;</span></span><br></pre></td></tr></table></figure><p>这个窗口函数计算薪资在当前行薪资的±10000范围内的员工人数。例如，如果当前员工的薪资是 15000 元，那么薪资在5000元到25000元之间的所有员工都会被统计在内。</p><p><code>RANGE BETWEEN 10000 PRECEDING AND 10000 FOLLOWING</code> 表示窗口从当前行薪资的前 10000 开始，到当前行薪资的后 10000 结束。</p></li><li><p><strong>员工人数（薪资在±5000）</strong>：</p> <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">count</span>(<span class="operator">*</span>) <span class="keyword">over</span> (<span class="keyword">order</span> <span class="keyword">by</span> salary <span class="keyword">range</span> <span class="keyword">between</span> <span class="number">5000</span> preceding <span class="keyword">and</span> <span class="number">5000</span> following) <span class="keyword">as</span> <span class="string">&#x27;员工人数（薪资在±5000）&#x27;</span></span><br></pre></td></tr></table></figure><p>这个窗口函数计算薪资在当前行薪资的±5000范围内的员工人数。例如，如果当前员工的薪资是 15000 元，那么薪资在10000元到20000元之间的所有员工都会被统计在内。</p><p><code>RANGE BETWEEN 5000 PRECEDING AND 5000 FOLLOWING</code> 表示窗口从当前行薪资的前 5000 开始，到当前行薪资的后 5000 结束。</p></li></ol><h4 id="排序窗口函数"><a class="markdownIt-Anchor" href="#排序窗口函数"></a> 排序窗口函数</h4><p>排序窗口函数用于为结果集中的每一行分配一个唯一的序号或排名。常见的排序窗口函数包括：</p><ul><li><code>ROW_NUMBER()</code>：为每一行分配一个唯一的序号。</li><li><code>RANK()</code>：为每一行分配一个排名，排名相同的行会有相同的序号，后续的排名会跳过。</li><li><code>DENSE_RANK()</code>：与 <code>RANK()</code> 类似，但后续的排名不会跳过。</li><li><code>NTILE(n)</code>：将结果集分成 <code>n</code> 个桶，并为每一行分配一个桶号。</li><li><code>PERCENT_RANK()</code>：计算每一行的百分比排名，结果在0到1之间。</li><li><code>CUME_DIST()</code>：计算每一行的累积分布，结果在0到1之间。</li></ul><ol><li>窗口函数只能写在<code>select</code>字句中</li><li>窗口函数中的<code>partition by</code>子句可以指定数据的分区，和<code>group by</code>要去重分组不同的是，<code>partition by</code><strong>只分区不去重</strong></li><li>窗口函数中没有<code>partition by</code>子句时，即不对数据分区，直接整个表为一个区</li><li>排序窗口函数中<code>order by</code>子句是<strong>必选项</strong>，窗口函数中<code>order by</code>子句在<strong>分区内</strong>，依据指定字段和排序方法对数据行排序</li><li><code>rank()、dense_rank0、row_number()</code>指定排序赋值方法，对比三个排序窗口函数的异同：<ul><li>rank():跳跃式排序–比如数值为99，99，90，89，那么通过这个函数得到的排名为1，1，3，4</li><li>dense_rank():并列连续型排序–比如数值为99，99，90，89，那么通过这个函数得到的排名为1，1，2，3</li><li>row_number():连续型排序–比如数值为99，99，90，89，那么通过这个函数得到的排名为1，2，3，4</li><li>根据对排序值的需求选择相应的排序窗口函数，由于值的不同特性(比如数值不重复)，这三个函数可以通用<br /><strong>示例</strong>：</li></ul></li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">    department,</span><br><span class="line">    employee_name,</span><br><span class="line">    salary,</span><br><span class="line">    <span class="built_in">ROW_NUMBER</span>() <span class="keyword">OVER</span> (<span class="keyword">PARTITION</span> <span class="keyword">BY</span> department <span class="keyword">ORDER</span> <span class="keyword">BY</span> salary <span class="keyword">DESC</span>) <span class="keyword">AS</span> row_num,</span><br><span class="line">    <span class="built_in">RANK</span>() <span class="keyword">OVER</span> (<span class="keyword">PARTITION</span> <span class="keyword">BY</span> department <span class="keyword">ORDER</span> <span class="keyword">BY</span> salary <span class="keyword">DESC</span>) <span class="keyword">AS</span> rank,</span><br><span class="line">    <span class="built_in">DENSE_RANK</span>() <span class="keyword">OVER</span> (<span class="keyword">PARTITION</span> <span class="keyword">BY</span> department <span class="keyword">ORDER</span> <span class="keyword">BY</span> salary <span class="keyword">DESC</span>) <span class="keyword">AS</span> dense_rank</span><br><span class="line"><span class="keyword">FROM</span> employees;</span><br></pre></td></tr></table></figure><p>在这个示例中，我们对每个部门的员工按工资从高到低进行排序，并为每个员工分配行号、排名和密集排名。</p><h4 id="偏移分析函数"><a class="markdownIt-Anchor" href="#偏移分析函数"></a> 偏移分析函数</h4><p>偏移分析函数用于访问窗口内其他行的数据，常见的偏移分析函数包括：</p><ul><li><code>LAG(expression, offset, default)</code>：用于访问当前行之前的第 <code>offset</code> 行的数据，如果没有找到则返回 <code>default</code>。</li><li><code>LEAD(expression, offset, default)</code>：用于访问当前行之后的第 <code>offset</code> 行的数据，如果没有找到则返回 <code>default</code>。</li></ul><p><strong>示例</strong>：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">    employee_name,</span><br><span class="line">    department,</span><br><span class="line">    salary,</span><br><span class="line">    <span class="built_in">LAG</span>(salary, <span class="number">1</span>, <span class="number">0</span>) <span class="keyword">OVER</span> (<span class="keyword">PARTITION</span> <span class="keyword">BY</span> department <span class="keyword">ORDER</span> <span class="keyword">BY</span> salary) <span class="keyword">AS</span> previous_salary,</span><br><span class="line">    <span class="built_in">LEAD</span>(salary, <span class="number">1</span>, <span class="number">0</span>) <span class="keyword">OVER</span> (<span class="keyword">PARTITION</span> <span class="keyword">BY</span> department <span class="keyword">ORDER</span> <span class="keyword">BY</span> salary) <span class="keyword">AS</span> next_salary</span><br><span class="line"><span class="keyword">FROM</span> employees;</span><br></pre></td></tr></table></figure><p>在这个示例中，我们使用 <code>LAG</code> 函数获取当前行的上一行的工资，使用 <code>LEAD</code> 函数获取当前行的下一行的工资。如果没有找到对应的行，则返回默认值 <code>0</code>。这样可以方便地进行比较分析。</p><h3 id="表连接"><a class="markdownIt-Anchor" href="#表连接"></a> 表连接</h3><p>表连接是关系型数据库中用于合并两个或多个表的数据的一种操作。表连接基于这些表之间的相关列进行操作。</p><h4 id="内连接inner-join"><a class="markdownIt-Anchor" href="#内连接inner-join"></a> <strong>内连接（INNER JOIN）</strong>：</h4><p>内连接返回两个表中满足连接条件的记录。只有当连接条件为真时，记录才会被包含在结果集中。</p>   <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> column1, column2, ...</span><br><span class="line"><span class="keyword">FROM</span> table1</span><br><span class="line"><span class="keyword">INNER</span> <span class="keyword">JOIN</span> table2</span><br><span class="line"><span class="keyword">ON</span> table1.common_field <span class="operator">=</span> table2.common_field;</span><br></pre></td></tr></table></figure><p>解释：</p><ul><li><code>SELECT column1, column2, ...</code>：选择需要查询的列。</li><li><code>FROM table1</code>：指定主表。</li><li><code>INNER JOIN table2</code>：指定要连接的表。</li><li><code>ON table1.common_field = table2.common_field</code>：指定连接条件，即两个表中用于匹配的列。</li></ul><h4 id="左连接left-join-或-left-outer-join"><a class="markdownIt-Anchor" href="#左连接left-join-或-left-outer-join"></a> <strong>左连接（LEFT JOIN 或 LEFT OUTER JOIN）</strong>：</h4><p>左连接返回左表中的所有记录，以及右表中满足连接条件的记录。如果右表中没有匹配的记录，则结果集中对应的部分为 NULL。</p>   <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> column1, column2, ...</span><br><span class="line"><span class="keyword">FROM</span> table1</span><br><span class="line"><span class="keyword">LEFT</span> <span class="keyword">JOIN</span> table2</span><br><span class="line"><span class="keyword">ON</span> table1.common_field <span class="operator">=</span> table2.common_field;</span><br></pre></td></tr></table></figure><p>解释：</p><ul><li><code>SELECT column1, column2, ...</code>：选择需要查询的列。</li><li><code>FROM table1</code>：指定主表。</li><li><code>LEFT JOIN table2</code>：指定要连接的表。</li><li><code>ON table1.common_field = table2.common_field</code>：指定连接条件。</li></ul><h4 id="右连接right-join-或-right-outer-join"><a class="markdownIt-Anchor" href="#右连接right-join-或-right-outer-join"></a> <strong>右连接（RIGHT JOIN 或 RIGHT OUTER JOIN）</strong>：</h4><p>右连接返回右表中的所有记录，以及左表中满足连接条件的记录。如果左表中没有匹配的记录，则结果集中对应的部分为 NULL。</p>   <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> column1, column2, ...</span><br><span class="line"><span class="keyword">FROM</span> table1</span><br><span class="line"><span class="keyword">RIGHT</span> <span class="keyword">JOIN</span> table2</span><br><span class="line"><span class="keyword">ON</span> table1.common_field <span class="operator">=</span> table2.common_field;</span><br></pre></td></tr></table></figure><p>解释：</p><ul><li><code>SELECT column1, column2, ...</code>：选择需要查询的列。</li><li><code>FROM table1</code>：指定主表。</li><li><code>RIGHT JOIN table2</code>：指定要连接的表。</li><li><code>ON table1.common_field = table2.common_field</code>：指定连接条件。</li></ul><h4 id="全外连接full-outer-join-或-full-join"><a class="markdownIt-Anchor" href="#全外连接full-outer-join-或-full-join"></a> <strong>全外连接（FULL OUTER JOIN 或 FULL JOIN）</strong>：</h4><p>全外连接返回两个表中的所有记录，当没有匹配的记录时，结果集中对应的部分为 NULL。MySQL本身不支持FULL OUTER JOIN，但可以通过UNION操作实现类似效果。</p>   <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> column1, column2, ...</span><br><span class="line"><span class="keyword">FROM</span> table1</span><br><span class="line"><span class="keyword">LEFT</span> <span class="keyword">JOIN</span> table2</span><br><span class="line"><span class="keyword">ON</span> table1.common_field <span class="operator">=</span> table2.common_field</span><br><span class="line"><span class="keyword">UNION</span></span><br><span class="line"><span class="keyword">SELECT</span> column1, column2, ...</span><br><span class="line"><span class="keyword">FROM</span> table1</span><br><span class="line"><span class="keyword">RIGHT</span> <span class="keyword">JOIN</span> table2</span><br><span class="line"><span class="keyword">ON</span> table1.common_field <span class="operator">=</span> table2.common_field;</span><br></pre></td></tr></table></figure><p>解释：</p><ul><li><code>SELECT column1, column2, ...</code>：选择需要查询的列。</li><li><code>FROM table1</code>：指定主表。</li><li><code>LEFT JOIN table2</code>：指定要连接的表。</li><li><code>ON table1.common_field = table2.common_field</code>：指定连接条件。</li><li><code>UNION</code>：合并两个查询结果。</li></ul><h4 id="交叉连接cross-join"><a class="markdownIt-Anchor" href="#交叉连接cross-join"></a> <strong>交叉连接（CROSS JOIN）</strong>：</h4><p>交叉连接返回两个表的笛卡尔积，即第一个表的每一行与第二个表的每一行组合。</p>   <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> column1, column2, ...</span><br><span class="line"><span class="keyword">FROM</span> table1</span><br><span class="line"><span class="keyword">CROSS</span> <span class="keyword">JOIN</span> table2;</span><br></pre></td></tr></table></figure><p>解释：</p><ul><li><code>SELECT column1, column2, ...</code>：选择需要查询的列。</li><li><code>FROM table1</code>：指定主表。</li><li><code>CROSS JOIN table2</code>：指定要连接的表。</li></ul><h3 id="子查询"><a class="markdownIt-Anchor" href="#子查询"></a> 子查询</h3><p>子查询是嵌套在另一个查询中的查询，是优先于主查询的，它可以出现在SQL语句的多个部分，如SELECT、FROM、WHERE、HAVING等子句中。子查询可以返回单个值、一列值或一个表。</p><h4 id="标量子查询scalar-subquery"><a class="markdownIt-Anchor" href="#标量子查询scalar-subquery"></a> <strong>标量子查询（Scalar Subquery）</strong>：</h4><p>标量子查询返回单个值，通常用在SELECT子句或WHERE子句中。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> column1, column2, (<span class="keyword">SELECT</span> scalar_column <span class="keyword">FROM</span> table2 <span class="keyword">WHERE</span> <span class="keyword">condition</span>) <span class="keyword">AS</span> alias</span><br><span class="line"><span class="keyword">FROM</span> table1</span><br><span class="line"><span class="keyword">WHERE</span> <span class="keyword">condition</span>;</span><br></pre></td></tr></table></figure><p>解释：</p><ul><li><code>SELECT column1, column2, ...</code>：选择需要查询的列。</li><li><code>(SELECT scalar_column FROM table2 WHERE condition)</code>：标量子查询，返回单个值。</li><li><code>AS alias</code>：为子查询结果指定别名。</li><li><code>FROM table1</code>：指定主表。</li><li><code>WHERE condition</code>：指定查询条件。</li></ul><h4 id="列子查询column-subquery"><a class="markdownIt-Anchor" href="#列子查询column-subquery"></a> <strong>列子查询（Column Subquery）</strong>：</h4><p>列子查询返回一列值，通常用在WHERE子句中，与IN、ANY、ALL等操作符一起使用。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> column1, column2</span><br><span class="line"><span class="keyword">FROM</span> table1</span><br><span class="line"><span class="keyword">WHERE</span> column1 <span class="keyword">IN</span> (<span class="keyword">SELECT</span> column1 <span class="keyword">FROM</span> table2 <span class="keyword">WHERE</span> <span class="keyword">condition</span>);</span><br></pre></td></tr></table></figure><p>解释：</p><ul><li><code>SELECT column1, column2</code>：选择需要查询的列。</li><li><code>FROM table1</code>：指定主表。</li><li><code>WHERE column1 IN (SELECT column1 FROM table2 WHERE condition)</code>：列子查询，返回一列值。</li></ul><h4 id="行子查询row-subquery"><a class="markdownIt-Anchor" href="#行子查询row-subquery"></a> <strong>行子查询（Row Subquery）</strong>：</h4><p>行子查询返回一行值，通常用在WHERE子句中，与比较操作符一起使用。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> column1, column2</span><br><span class="line"><span class="keyword">FROM</span> table1</span><br><span class="line"><span class="keyword">WHERE</span> (column1, column2) <span class="operator">=</span> (<span class="keyword">SELECT</span> column1, column2 <span class="keyword">FROM</span> table2 <span class="keyword">WHERE</span> <span class="keyword">condition</span>);</span><br></pre></td></tr></table></figure><p>解释：</p><ul><li><code>SELECT column1, column2</code>：选择需要查询的列。</li><li><code>FROM table1</code>：指定主表。</li><li><code>WHERE (column1, column2) = (SELECT column1, column2 FROM table2 WHERE condition)</code>：行子查询，返回一行值。</li></ul><h4 id="表子查询table-subquery"><a class="markdownIt-Anchor" href="#表子查询table-subquery"></a> <strong>表子查询（Table Subquery）</strong>：</h4><p>表子查询返回一个表，通常用在FROM子句中，作为临时表使用。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> a.column1, a.column2</span><br><span class="line"><span class="keyword">FROM</span> (<span class="keyword">SELECT</span> column1, column2 <span class="keyword">FROM</span> table2 <span class="keyword">WHERE</span> <span class="keyword">condition</span>) <span class="keyword">AS</span> a</span><br><span class="line"><span class="keyword">JOIN</span> table1 <span class="keyword">ON</span> a.common_field <span class="operator">=</span> table1.common_field;</span><br></pre></td></tr></table></figure><p>解释：</p><ul><li><code>SELECT a.column1, a.column2</code>：选择需要查询的列。</li><li><code>FROM (SELECT column1, column2 FROM table2 WHERE condition) AS a</code>：表子查询，返回一个表。</li><li><code>JOIN table1 ON a.common_field = table1.common_field</code>：与主表进行连接。</li></ul><h4 id="相关子查询correlated-subquery"><a class="markdownIt-Anchor" href="#相关子查询correlated-subquery"></a> <strong>相关子查询（Correlated Subquery）</strong>：</h4><p>相关子查询依赖于外部查询的值，它会对每个外部查询的行进行一次评估。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> column1, column2</span><br><span class="line"><span class="keyword">FROM</span> table1 a</span><br><span class="line"><span class="keyword">WHERE</span> column1 <span class="operator">=</span> (<span class="keyword">SELECT</span> <span class="built_in">MAX</span>(column1) <span class="keyword">FROM</span> table2 <span class="keyword">WHERE</span> table2.common_field <span class="operator">=</span> a.common_field);</span><br></pre></td></tr></table></figure><p>解释：</p><ul><li><code>SELECT column1, column2</code>：选择需要查询的列。</li><li><code>FROM table1 a</code>：指定主表，并为其指定别名。</li><li><code>WHERE column1 = (SELECT MAX(column1) FROM table2 WHERE table2.common_field = a.common_field)</code>：相关子查询，依赖于外部查询的值。</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;MySQL作为一种广泛使用的关系型数据库管理系统，是每个数据分析师必备技能，下面让我们来探讨如何利用MySQL进行高效的数据分析。&lt;/p&gt;
&lt;h2 id=&quot;基础语句&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#基础语句&quot;&gt;&lt;/a&gt; 基础语句&lt;/</summary>
      
    
    
    
    <category term="learn" scheme="https://sherry14love.github.io/categories/learn/"/>
    
    
    <category term="卷" scheme="https://sherry14love.github.io/tags/%E5%8D%B7/"/>
    
    <category term="数据分析" scheme="https://sherry14love.github.io/tags/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/"/>
    
  </entry>
  
  <entry>
    <title>随机森林如何调参</title>
    <link href="https://sherry14love.github.io/2024/07/15/learn/data6/"/>
    <id>https://sherry14love.github.io/2024/07/15/learn/data6/</id>
    <published>2024-07-14T16:00:00.000Z</published>
    <updated>2024-09-26T07:27:21.189Z</updated>
    
    <content type="html"><![CDATA[<p>随机森林是一种强大的集成学习方法，通过构建多个决策树并取它们的平均值来进行预测。为了获得最佳性能，需要对随机森林模型进行调参。以下是一些常见的参数和调参方法：</p><h3 id="常见参数"><a class="markdownIt-Anchor" href="#常见参数"></a> 常见参数</h3><ol><li><strong>n_estimators</strong>: 决策树的数量。通常，增加树的数量可以提高模型的性能，但也会增加计算成本。</li><li><strong>max_depth</strong>: 每棵树的最大深度。限制树的深度可以防止过拟合。</li><li><strong>min_samples_split</strong>: 内部节点再划分所需最小样本数。增加这个值可以防止过拟合。</li><li><strong>min_samples_leaf</strong>: 叶子节点最少样本数。增加这个值可以防止过拟合。</li><li><strong>max_features</strong>: 寻找最佳分割时要考虑的特征数量。通常，默认值（“auto&quot;或&quot;sqrt”）效果较好。</li><li><strong>bootstrap</strong>: 是否进行自助采样。通常设置为True。</li></ol><h3 id="调参方法"><a class="markdownIt-Anchor" href="#调参方法"></a> 调参方法</h3><h4 id="1-网格搜索grid-search"><a class="markdownIt-Anchor" href="#1-网格搜索grid-search"></a> 1. 网格搜索（Grid Search）</h4><p>网格搜索是一种穷举搜索方法，通过遍历给定的参数组合来找到最佳参数。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.model_selection <span class="keyword">import</span> GridSearchCV</span><br><span class="line"><span class="keyword">from</span> sklearn.ensemble <span class="keyword">import</span> RandomForestRegressor</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义参数网格</span></span><br><span class="line">param_grid = &#123;</span><br><span class="line">    <span class="string">&#x27;n_estimators&#x27;</span>: [<span class="number">50</span>, <span class="number">100</span>, <span class="number">200</span>],</span><br><span class="line">    <span class="string">&#x27;max_depth&#x27;</span>: [<span class="literal">None</span>, <span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>],</span><br><span class="line">    <span class="string">&#x27;min_samples_split&#x27;</span>: [<span class="number">2</span>, <span class="number">5</span>, <span class="number">10</span>],</span><br><span class="line">    <span class="string">&#x27;min_samples_leaf&#x27;</span>: [<span class="number">1</span>, <span class="number">2</span>, <span class="number">4</span>],</span><br><span class="line">    <span class="string">&#x27;max_features&#x27;</span>: [<span class="string">&#x27;auto&#x27;</span>, <span class="string">&#x27;sqrt&#x27;</span>]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建随机森林模型</span></span><br><span class="line">rf_model = RandomForestRegressor(random_state=<span class="number">42</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建GridSearchCV对象</span></span><br><span class="line">grid_search = GridSearchCV(estimator=rf_model, param_grid=param_grid, </span><br><span class="line">                           cv=<span class="number">3</span>, n_jobs=-<span class="number">1</span>, verbose=<span class="number">2</span>, scoring=<span class="string">&#x27;neg_mean_squared_error&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 训练模型</span></span><br><span class="line">grid_search.fit(X_train, y_train)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取最佳参数</span></span><br><span class="line">best_params = grid_search.best_params_</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;Best Parameters: <span class="subst">&#123;best_params&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure><h4 id="2-随机搜索randomized-search"><a class="markdownIt-Anchor" href="#2-随机搜索randomized-search"></a> 2. 随机搜索（Randomized Search）</h4><p>随机搜索是一种在参数空间中随机采样的方法，适用于参数空间较大的情况。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.model_selection <span class="keyword">import</span> RandomizedSearchCV</span><br><span class="line"><span class="keyword">from</span> scipy.stats <span class="keyword">import</span> randint <span class="keyword">as</span> sp_randint</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义参数分布</span></span><br><span class="line">param_dist = &#123;</span><br><span class="line">    <span class="string">&#x27;n_estimators&#x27;</span>: sp_randint(<span class="number">50</span>, <span class="number">200</span>),</span><br><span class="line">    <span class="string">&#x27;max_depth&#x27;</span>: [<span class="literal">None</span>, <span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>],</span><br><span class="line">    <span class="string">&#x27;min_samples_split&#x27;</span>: sp_randint(<span class="number">2</span>, <span class="number">11</span>),</span><br><span class="line">    <span class="string">&#x27;min_samples_leaf&#x27;</span>: sp_randint(<span class="number">1</span>, <span class="number">5</span>),</span><br><span class="line">    <span class="string">&#x27;max_features&#x27;</span>: [<span class="string">&#x27;auto&#x27;</span>, <span class="string">&#x27;sqrt&#x27;</span>]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建随机森林模型</span></span><br><span class="line">rf_model = RandomForestRegressor(random_state=<span class="number">42</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建RandomizedSearchCV对象</span></span><br><span class="line">random_search = RandomizedSearchCV(estimator=rf_model, param_distributions=param_dist, </span><br><span class="line">                                   n_iter=<span class="number">100</span>, cv=<span class="number">3</span>, n_jobs=-<span class="number">1</span>, verbose=<span class="number">2</span>, scoring=<span class="string">&#x27;neg_mean_squared_error&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 训练模型</span></span><br><span class="line">random_search.fit(X_train, y_train)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取最佳参数</span></span><br><span class="line">best_params = random_search.best_params_</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;Best Parameters: <span class="subst">&#123;best_params&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure><h4 id="3-基于贝叶斯优化的调参"><a class="markdownIt-Anchor" href="#3-基于贝叶斯优化的调参"></a> 3. 基于贝叶斯优化的调参</h4><p>贝叶斯优化是一种更高效的调参方法，通过构建概率模型来选择最有可能改善性能的参数。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> skopt <span class="keyword">import</span> BayesSearchCV</span><br><span class="line"><span class="keyword">from</span> skopt.space <span class="keyword">import</span> Integer, Categorical</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义参数空间</span></span><br><span class="line">param_space = &#123;</span><br><span class="line">    <span class="string">&#x27;n_estimators&#x27;</span>: Integer(<span class="number">50</span>, <span class="number">200</span>),</span><br><span class="line">    <span class="string">&#x27;max_depth&#x27;</span>: Categorical([<span class="literal">None</span>, <span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>]),</span><br><span class="line">    <span class="string">&#x27;min_samples_split&#x27;</span>: Integer(<span class="number">2</span>, <span class="number">11</span>),</span><br><span class="line">    <span class="string">&#x27;min_samples_leaf&#x27;</span>: Integer(<span class="number">1</span>, <span class="number">5</span>),</span><br><span class="line">    <span class="string">&#x27;max_features&#x27;</span>: Categorical([<span class="string">&#x27;auto&#x27;</span>, <span class="string">&#x27;sqrt&#x27;</span>])</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建随机森林模型</span></span><br><span class="line">rf_model = RandomForestRegressor(random_state=<span class="number">42</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建BayesSearchCV对象</span></span><br><span class="line">bayes_search = BayesSearchCV(estimator=rf_model, search_spaces=param_space, </span><br><span class="line">                             n_iter=<span class="number">50</span>, cv=<span class="number">3</span>, n_jobs=-<span class="number">1</span>, verbose=<span class="number">2</span>, scoring=<span class="string">&#x27;neg_mean_squared_error&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 训练模型</span></span><br><span class="line">bayes_search.fit(X_train, y_train)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取最佳参数</span></span><br><span class="line">best_params = bayes_search.best_params_</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;Best Parameters: <span class="subst">&#123;best_params&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;随机森林是一种强大的集成学习方法，通过构建多个决策树并取它们的平均值来进行预测。为了获得最佳性能，需要对随机森林模型进行调参。以下是一些常见的参数和调参方法：&lt;/p&gt;
&lt;h3 id=&quot;常见参数&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#常见参</summary>
      
    
    
    
    <category term="learn" scheme="https://sherry14love.github.io/categories/learn/"/>
    
    
    <category term="卷" scheme="https://sherry14love.github.io/tags/%E5%8D%B7/"/>
    
    <category term="数据分析" scheme="https://sherry14love.github.io/tags/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/"/>
    
  </entry>
  
  <entry>
    <title>数据分析之Tableau食用指南</title>
    <link href="https://sherry14love.github.io/2024/07/12/learn/tableau/"/>
    <id>https://sherry14love.github.io/2024/07/12/learn/tableau/</id>
    <published>2024-07-11T16:00:00.000Z</published>
    <updated>2024-09-26T07:27:39.719Z</updated>
    
    <content type="html"><![CDATA[<p><strong>Tableau：最易上手且功能强大的可视化操作BI工具</strong></p><p>Tableau是一款广受欢迎的商业智能（BI）工具，以其直观的用户界面和强大的数据可视化功能而闻名。无论是数据分析师、业务用户还是IT专业人员，都能快速上手并利用Tableau进行高效的数据分析和可视化展示。</p><p>相对于<strong>Excel</strong>，Tableau可以处理以亿为级别的数据，展现出其卓越的数据处理能力。而Excel在处理几十万条数据的时候，往往会出现卡顿现象，限制了其在大型数据集上的应用。</p><p>相较于<strong>MySQL</strong>，Tableau不仅提供了强大的数据连接和处理功能，还以其可视化操作和丰富的图表选项著称。用户可以通过Tableau直观地展示数据，进行深入的数据探索和分析，而MySQL虽然在业务取数方面表现出色，但在可视化能力上相对有限，无法全面满足复杂的数据展示需求。</p><p>相较于<strong>Python</strong>，Tableau的上手难度显著降低，用户无需深厚的编程基础，即可通过简单的操作实现复杂的数据分析和可视化。这种即学即用的特性，使得Tableau成为非专业人士进行数据分析的理想选择，而Python则需要用户投入较大的精力进行学习和实践。</p><p>相较于其他<strong>BI工具</strong>，Tableau在多个方面展现出其独特的优势：</p><ul><li><strong>更直观的用户界面</strong>：Tableau的拖放式操作界面和直观的图表生成方式，使得数据分析变得更加简单和直观。</li><li><strong>更灵活的数据连接</strong>：Tableau支持多种数据源的连接和混合分析，能够无缝集成各类数据，提供全面的数据洞察。</li><li><strong>更强大的交互功能</strong>：Tableau的仪表板支持丰富的交互功能，用户可以通过点击、筛选等操作深入探索数据，提升分析的深度和广度。</li><li><strong>更丰富的社区支持</strong>：Tableau拥有庞大的用户社区和丰富的在线资源，用户可以轻松获取帮助和学习资料，加速问题的解决和技能的提升。</li></ul><h2 id="数据连接"><a class="markdownIt-Anchor" href="#数据连接"></a> 数据连接</h2><p>Tableau支持与多种数据源的连接，包括本地文件、数据库、云服务等。以下是一些常见的数据连接方式：</p><ul><li><strong>本地文件</strong>：Tableau可以直接打开多种类型的本地文件，包括：<ul><li><strong>CSV文件</strong>：通常使用文本编辑器打开。</li><li><strong>Excel文件（xlsx）</strong>：使用Microsoft Excel打开。</li><li><strong>JSON文件</strong>：用于存储结构化数据的轻量级格式。</li><li><strong>Microsoft Access文件（mdb, accdb）</strong>：用于存储关系型数据的桌面数据库文件。</li><li><strong>PDF文件</strong>：虽然PDF主要用于文档展示，但Tableau可以通过插件或外部工具提取其中的数据。</li><li><strong>空间文件（如Shapefile, GeoJSON）</strong>：用于地理空间数据的存储和分析。</li><li><strong>统计文件（如SPSS, SAS）</strong>：用于存储统计分析数据的文件格式。</li></ul></li><li><strong>数据库</strong>：Tableau支持与多种数据库的连接，如MySQL、Oracle、SQL Server等。用户只需提供数据库的连接信息，即可将数据库中的数据导入Tableau进行分析。</li><li><strong>云服务</strong>：Tableau还支持与各种云服务的连接，如Amazon Redshift、Google BigQuery等。通过与云服务的集成，用户可以轻松访问和分析存储在云端的大量数据。</li></ul><hr /><p>在Tableau的数据连接世界中，实时连接与数据提取是两种核心的数据接入方式，它们各自拥有独特的优势和适用场景，共同构成了Tableau强大的数据处理能力。</p><h3 id="实时连接"><a class="markdownIt-Anchor" href="#实时连接"></a> 实时连接</h3><p>实时连接是Tableau的一项关键功能，它允许用户直接连接到数据源，实时获取和分析数据。这种方式的优势在于：</p><ul><li><strong>即时性</strong>：用户可以实时查看和分析最新的数据，无需等待数据提取和加载的过程，确保了分析结果的时效性和准确性。</li><li><strong>动态性</strong>：实时连接支持数据的动态更新和变化，用户可以在Tableau中观察到数据随时间的变化趋势，适用于需要频繁更新数据的场景。</li><li><strong>灵活性</strong>：用户可以根据需要灵活地调整查询条件和分析维度，实时获取所需的数据洞察，提高了数据分析的灵活性和响应速度。</li></ul><p>然而，实时连接也存在一定的局限性，例如在处理大规模数据集时可能会遇到性能瓶颈，以及对数据源的稳定性和响应速度有一定要求。</p><h3 id="数据提取"><a class="markdownIt-Anchor" href="#数据提取"></a> 数据提取</h3><p>数据提取是Tableau的另一种数据连接方式，它通过将数据从源系统提取到Tableau的本地存储中，实现数据的离线分析和处理。这种方式的优势在于：</p><ul><li><strong>性能优化</strong>：数据提取可以将大规模数据集加载到Tableau的本地存储中，通过优化数据结构和索引，提高数据查询和分析的性能，适用于处理复杂和大规模的数据集。</li><li><strong>稳定性</strong>：数据提取不受源系统性能和稳定性的影响，用户可以在Tableau中稳定地进行数据分析和可视化，确保了分析过程的连续性和可靠性。</li><li><strong>灵活性</strong>：用户可以根据需要定期更新数据提取，保持数据的最新状态，同时也可以对提取的数据进行预处理和清洗，提高数据分析的质量和效率。</li></ul><p>数据提取的局限性在于它需要定期更新以保持数据的最新状态，以及在处理实时数据变化时可能存在一定的延迟。</p><h3 id="适用场景"><a class="markdownIt-Anchor" href="#适用场景"></a> 适用场景</h3><ul><li><strong>实时连接</strong>：适用于需要实时查看和分析最新数据的场景，如实时监控、实时报表、实时决策支持等。</li><li><strong>数据提取</strong>：适用于需要处理大规模数据集、进行复杂数据分析和可视化的场景，如历史数据分析、趋势预测、数据挖掘等。</li></ul><p>通过灵活运用实时连接和数据提取两种方式，Tableau为用户提供了全面的数据接入和分析能力，无论是实时数据监控还是深度数据挖掘，Tableau都能提供强大的支持。</p><h2 id="数据保存"><a class="markdownIt-Anchor" href="#数据保存"></a> 数据保存</h2><p>数据保存确保了用户的工作成果得以安全存储，便于后续的访问、分享和进一步分析。Tableau提供了多种数据保存方式，以满足不同用户的需求和场景。</p><h3 id="工作簿保存"><a class="markdownIt-Anchor" href="#工作簿保存"></a> 工作簿保存</h3><p>Tableau工作簿是用户进行数据分析和可视化的主要成果，包含了所有的数据连接、图表、仪表板和分析逻辑。Tableau支持将工作簿保存为<code>.twb</code>或<code>.twbx</code>格式：</p><ul><li><strong>.twb格式</strong>：这种格式保存了工作簿的结构和设置，但不包含数据提取。用户在打开<code>.twb</code>文件时需要重新连接到原始数据源。</li><li><strong>.twbx格式</strong>：这种格式是Tableau打包工作簿，包含了工作簿的所有内容，包括数据提取。用户在打开<code>.twbx</code>文件时无需重新连接数据源，可以直接进行分析。</li></ul><h3 id="数据提取保存"><a class="markdownIt-Anchor" href="#数据提取保存"></a> 数据提取保存</h3><p>对于通过数据提取方式连接的数据，Tableau允许用户将提取的数据保存为<code>.tde</code>或<code>.hyper</code>格式：</p><ul><li><strong>.tde格式</strong>：这是Tableau Data Extract的旧格式，适用于Tableau 10.x及更早版本。它支持数据的压缩和优化，便于快速加载和分析。</li><li><strong>.hyper格式</strong>：这是Tableau Data Extract的新格式，从Tableau 10.5开始引入。它提供了更高的性能和更灵活的数据模型，支持更复杂的数据类型和操作。</li></ul><h3 id="数据源保存"><a class="markdownIt-Anchor" href="#数据源保存"></a> 数据源保存</h3><p>Tableau还支持将数据源保存为<code>.tds</code>或<code>.tdsx</code>格式：</p><ul><li><strong>.tds格式</strong>：这种格式保存了数据源的连接信息和设置，但不包含数据提取。用户在打开<code>.tds</code>文件时需要重新连接到原始数据源。</li><li><strong>.tdsx格式</strong>：这种格式是Tableau打包数据源，包含了数据源的所有内容，包括数据提取。用户在打开<code>.tdsx</code>文件时无需重新连接数据源，可以直接使用。</li></ul><h3 id="云端保存"><a class="markdownIt-Anchor" href="#云端保存"></a> 云端保存</h3><p>随着云计算的普及，Tableau也提供了云端保存的选项，支持将工作簿和数据提取保存到Tableau Online或Tableau Server：</p><ul><li><strong>Tableau Online</strong>：这是Tableau的云服务平台，用户可以将工作簿和数据提取上传到云端，实现跨设备的访问和协作。</li><li><strong>Tableau Server</strong>：这是Tableau的企业级服务器解决方案，支持在企业内部部署，提供更强大的数据管理和安全控制。</li></ul><h3 id="数据备份与恢复"><a class="markdownIt-Anchor" href="#数据备份与恢复"></a> 数据备份与恢复</h3><p>为了确保数据的安全性，Tableau还提供了数据备份和恢复的功能。用户可以定期备份工作簿、数据提取和数据源，以防止数据丢失或损坏。在需要时，用户可以通过备份文件快速恢复数据，确保分析工作的连续性和可靠性。</p><h2 id="数据解释器"><a class="markdownIt-Anchor" href="#数据解释器"></a> 数据解释器</h2><p>数据解释器清理是Tableau中的一项功能，主要用于处理和清理导入的数据，以便更有效地进行数据分析和可视化。以下是数据解释器清理的具体含义和作用：</p><h3 id="含义"><a class="markdownIt-Anchor" href="#含义"></a> 含义</h3><p>数据解释器清理是指在Tableau中导入数据时，自动识别和处理数据中的常见问题，如重复行、缺失值、格式不一致等。这一过程旨在提高数据的质量和一致性，确保后续的数据分析和可视化更加准确和可靠。</p><h3 id="作用"><a class="markdownIt-Anchor" href="#作用"></a> 作用</h3><ol><li><strong>数据清洗</strong>：自动识别和删除重复的行，填充或删除缺失值，统一数据格式，从而提高数据的整体质量。</li><li><strong>简化分析</strong>：通过清理数据，减少分析过程中的干扰因素，使分析师能够更专注于数据的实质内容和洞察。</li><li><strong>提升可视化效果</strong>：高质量的数据是生成有效可视化图表的基础。数据解释器清理确保数据在可视化过程中能够准确反映实际情况，避免误导性的图表和结论。</li><li><strong>节省时间</strong>：手动清理数据通常耗时且容易出错。数据解释器清理功能能够自动完成这些任务，节省分析师的时间和精力，使其能够更快地进行数据探索和分析。</li></ol><p>在Tableau中，数据解释器清理功能通常在数据源设置阶段启用。用户可以在导入数据时选择启用数据解释器，Tableau将自动进行数据清理。这一功能特别适用于处理来自不同来源和格式的数据，确保数据在导入后即可用于分析和可视化。</p><h2 id="数据可视化"><a class="markdownIt-Anchor" href="#数据可视化"></a> 数据可视化</h2><p>我们之所以需要数据可视化，是因为在缺乏专业训练的情况下，面对一堆数字，我们往往难以迅速识别出其中的最大值、最小值等关键信息。人类对数据的敏感度实际上是相对较低的。</p><p>然而，一旦我们通过可视化操作，将这些数字转化为直观的图像，我们的数据敏感度便会显著提升。这是因为人类天生就是图像视觉动物，我们的大脑更擅长处理和理解视觉信息。通过图表、图形等视觉元素，我们能够更快速、更直观地捕捉到数据的核心特征和内在规律，从而更有效地进行数据分析和决策。</p><p>其实对于tableau，我们要做的，熟能生巧就可以了，除此之外，要掌握做表格、做词云、做其他基础图表的能力。</p><p>其实总结来说，就是：</p><ul><li>度量默认聚合</li><li>度量值会形成图形标记，图形标记可以切换</li><li>维度会对度量值进行区分，增加度量值的信息密度</li><li>图表分为有轴图表和无轴图表(极坐标图表)</li><li>离散形成标签，连续形成数轴</li></ul><h2 id="基础图表制作指南"><a class="markdownIt-Anchor" href="#基础图表制作指南"></a> 基础图表制作指南</h2><h3 id="柱状图"><a class="markdownIt-Anchor" href="#柱状图"></a> 柱状图</h3><p>在成功连接数据源后，创建一个新的工作表。将所需数据分别拖拽至<code>行</code>和<code>列</code>区域，即可轻松生成柱状图。</p><h3 id="条形图"><a class="markdownIt-Anchor" href="#条形图"></a> 条形图</h3><p>若需将柱状图转换为条形图，只需点击工具栏中的排序快捷图标左侧，选择<code>交换行和列</code>（快捷键：Ctrl+W）。此外，通过在维度数据上右键点击并选择<code>创建分层结构</code>，可实现数据的分层展示，这是一个非常便捷的功能。</p><h4 id="筛选器"><a class="markdownIt-Anchor" href="#筛选器"></a> 筛选器</h4><p>筛选器是基础且实用的功能之一。在点击<code>显示筛选器</code>后，右侧将出现筛选面板，可用于按数值、日期、门店等条件进行图像筛选。</p><h3 id="热力图"><a class="markdownIt-Anchor" href="#热力图"></a> 热力图</h3><p>首先创建一个表格，然后将度量值数据拖至<code>颜色</code>区域，并将标记类型更改为<code>方形</code>，即可完成热力图的制作。</p><h3 id="气泡图和词云"><a class="markdownIt-Anchor" href="#气泡图和词云"></a> 气泡图和词云</h3><p>将数值度量放置于<code>大小</code>区域，将名称等维度量放置于<code>标签</code>或<code>文本</code>区域，并将标记类型改为<code>圆</code>，即可生成气泡图或词云。</p><h3 id="饼图"><a class="markdownIt-Anchor" href="#饼图"></a> 饼图</h3><p>制作饼图的方法与气泡图类似。将标记类型更改为<code>饼图</code>，将数值度量放置于<code>角度</code>区域，将名称等维度量放置于<code>颜色</code>区域。若需显示百分比或标签，按住<code>Ctrl</code>键将相应内容拖至<code>标签</code>区域。对于百分比显示，右键点击数值度量（位于<code>标签</code>中），选择<code>快速表计算</code> -&gt; <code>合计百分比</code>，并在<code>设置格式</code> -&gt; <code>数字</code> -&gt; <code>百分比</code>中进行进一步设置。</p><h3 id="树地图"><a class="markdownIt-Anchor" href="#树地图"></a> 树地图</h3><p>树地图的制作与饼图相似。将维度量放置于<code>颜色</code>区域，将<code>角度</code>区域中的数据度量拖至<code>大小</code>区域，并将标记类型更改为<code>方形</code>。</p><h3 id="堆积图"><a class="markdownIt-Anchor" href="#堆积图"></a> 堆积图</h3><p>堆积图适用于对比分析。首先将一个维度量放置于<code>列</code>区域，将数据度量放置于<code>行</code>区域，然后将另一个维度量放置于<code>颜色</code>区域。</p><h4 id="编辑表计算-数值"><a class="markdownIt-Anchor" href="#编辑表计算-数值"></a> 编辑表计算 - 数值</h4><p>选择<code>标签</code>区域中的数据度量，右键点击并选择<code>编辑表计算</code>，然后选择<code>表向下</code>，即可查看每列不同维度量之间的百分比差异。</p><h4 id="编辑表计算-数轴"><a class="markdownIt-Anchor" href="#编辑表计算-数轴"></a> 编辑表计算 - 数轴</h4><p>选择<code>行</code>区域中的数据度量，右键点击并依次选择<code>快速表计算</code> -&gt; <code>合计百分比</code>，然后选择<code>编辑表计算</code>并点击<code>表向下</code>，以显示相对百分比，使占比变化更加明显。</p><h3 id="折线图"><a class="markdownIt-Anchor" href="#折线图"></a> 折线图</h3><p>选择相应的行列数据，并将标记类型设置为<code>线</code>。通过添加筛选器，可以在<code>分析</code>菜单中点击<code>预测</code>，以获得一定的可信度分析。日期数据通常放置于<code>列</code>区域，右键点击可选择离散或连续的年月周日数据，通常使用连续数据进行操作。此外，还可以在<code>分析</code>菜单中添加趋势线、盒须图等分析工具。</p><h3 id="面积图"><a class="markdownIt-Anchor" href="#面积图"></a> 面积图</h3><p>选择相应的行列数据，将标记类型设置为<code>区域</code>，并将具有区分性的维度量放置于<code>颜色</code>区域，即可生成面积图。</p><h3 id="散点图"><a class="markdownIt-Anchor" href="#散点图"></a> 散点图</h3><p>选择相应的行列数据，将标记类型设置为<code>自动</code>，并将具有区分性的维度量放置于<code>颜色</code>或<code>详细信息</code>区域。最后，添加<code>分析</code>菜单中的<code>趋势线</code>，以完善散点图。根据需求，还可以添加<code>群集</code>功能进行分类。</p><h3 id="直方图"><a class="markdownIt-Anchor" href="#直方图"></a> 直方图</h3><p>首先创建一个<code>数据桶</code>，然后将其拖至相应的行和列区域。可根据需要添加其他维度量进行区分。</p><h3 id="地图"><a class="markdownIt-Anchor" href="#地图"></a> 地图</h3><p>将城市、省份、国家等维度量右键点击并选择<code>地理角色</code>，更改为相应的角色。然后双击或使用智能推荐功能，即可生成相应的地理图。后续可加入行列数据和其他筛选条件进行进一步区分。</p><blockquote><p>在进行<code>距离</code>类型的维度量分析时，我们通常会通过右键选择<code>创建</code>-&gt;<code>组</code>的方式，将不同距离区间进行分组。以美化可视化效果并清晰区分各组与门店的距离,从而提升数据解读的直观性和效率。</p></blockquote><h4 id="主键"><a class="markdownIt-Anchor" href="#主键"></a> 主键</h4><p>在处理大量数据时，为了便于区分和识别，我们通常会创建一个主键，以实现数据的唯一标识。在操作界面的左侧，我们可以看到<code>查看数据</code>和<code>查找字段</code>等功能选项，而右侧则提供了<code>创建计算字段</code>的选项。通过点击<code>创建计算字段</code>，我们可以选择合适的维度量来构建一个具有唯一标识的主键。这样，在后续的数据处理过程中，我们便能够更加准确地区分和识别每一条数据。</p><h2 id="bi仪表盘"><a class="markdownIt-Anchor" href="#bi仪表盘"></a> BI仪表盘</h2><p>在精心打造BI仪表盘的过程中，我们首先需要精准定位我们的目标观众，这包括但不限于业务人员、中层管理者、高级管理者以及用人单位等。</p><p>每类观众因其职责和需求的不同，对仪表盘的功能和呈现方式有着各自独特的要求：</p><ul><li>对于业务人员而言，他们更关注与自身业务紧密相关的数据细节，因此仪表盘应提供直观、具体的数据展示，以便他们快速获取所需信息，辅助日常业务决策。</li><li>中层管理者则需要一个全面而精炼的总结报告，涵盖各个关键维度的数据。这样的仪表盘应具备多维度分析能力，能够帮助他们从宏观层面把握业务动态，同时也能深入到具体细节，以便进行更为精准的管理和指导。</li><li>高级管理者通常关注的是整体战略层面的总结报告。因此，他们的仪表盘应简洁明了，突出关键指标和趋势，以便他们迅速把握全局，做出高层次的决策。</li><li>至于用人单位，他们往往需要一个明确的分析主题，且分析的维度越深入、图表越高级，越能满足他们的需求。这类仪表盘应具备强大的数据挖掘和可视化能力，能够提供深入的分析结果，帮助用人单位洞察数据背后的深层次信息。</li></ul><h3 id="如何明确主题"><a class="markdownIt-Anchor" href="#如何明确主题"></a> 如何明确主题</h3><p>在明确目标观众后，我们需要进一步确定仪表盘的主题。这一步骤至关重要，因为它直接关系到仪表盘的内容和结构。我们可以通过以下几个步骤来明确主题：</p><ol><li><strong>需求调研</strong>：深入了解目标观众的具体需求和痛点，通过访谈、问卷等方式收集信息。这一阶段，我们需要关注观众对数据的具体需求，包括他们希望看到哪些数据、这些数据的重要程度是否相同，以及他们希望通过这些数据解决什么问题。</li><li><strong>数据梳理与分类</strong>：根据调研结果，对涉及的数据进行梳理和分类。这一步骤中，我们需要识别出哪些数据是核心数据，哪些是辅助数据，以及它们之间的关联性。同时，我们还需要评估每类数据的重要程度，确保在后续的仪表盘设计中能够合理分配展示空间。</li><li><strong>关键指标筛选</strong>：在数据梳理的基础上，筛选出与主题紧密相关的关键指标。这些指标应能够全面反映主题的核心内容，并且具有较高的重要程度。通过这一步骤，我们可以确保仪表盘的主题突出，避免信息过载。</li><li><strong>数据整合与分析</strong>：对筛选出的关键指标进行数据整合和深入分析，挖掘数据背后的关联和趋势。这一阶段，我们需要运用各种数据分析工具和方法，对数据进行深入剖析，以便为可视化设计提供有力的支撑。</li><li><strong>可视化设计</strong>：根据分析结果，设计直观、易懂的可视化图表，确保观众能够迅速理解数据含义。在设计过程中，我们需要充分考虑观众的认知习惯和视觉偏好，力求使图表既美观又实用。</li><li><strong>反馈与迭代</strong>：在仪表盘初步完成后，邀请目标观众进行试用，并根据反馈进行迭代优化。这一步骤中，我们需要关注观众的实际使用体验，及时调整和优化仪表盘的设计，确保其能够真正满足观众的需求。</li></ol><h3 id="最适合数据的图表"><a class="markdownIt-Anchor" href="#最适合数据的图表"></a> 最适合数据的图表</h3><ol><li>对比：</li></ol><ul><li>绝对值对比——条形图/柱状图</li></ul><ol start="2"><li>变化：</li></ol><ul><li>没有累计关系——折线图+柱状图</li><li>有累计关系——面积图/堆积图</li></ul><ol start="3"><li>构成：</li></ol><ul><li>对象少于3个——环形图</li><li>对象大于3个——树地图</li></ul><ol start="4"><li>分布：</li></ol><ul><li>单变量分布——直方图</li><li>多变量分布——散点图/气泡图</li></ul><h3 id="度量名称显示"><a class="markdownIt-Anchor" href="#度量名称显示"></a> 度量名称显示</h3><p>首先先把一个数据度量放在<code>文本</code>里，再拖动一个数据度量放在画布里那个显示的数据上，拖到上面会发现有个<code>+</code>或者<code>智能显示</code>，这样，就可以发现<code>行</code>上面显示一个<code>度量名称</code>，下面我们把<code>度量名称</code>拖到<code>列</code>上，然后把其他所需要的度量值托到左侧的<code>度量值</code>里就可以了。</p><blockquote><p>其实我们在做仪表盘的时候，会在筛选器里通常加入日期一类的维度量，然后右键点击<code>应用于工作表</code>-&gt;<code>使用相关数据源的所有项</code>，再<code>显示筛选器</code>，操作筛选器之后，你会发现，所有的表图都会根据你对筛选器变动，而不是只变动一张图表的。</p></blockquote><h3 id="双轴"><a class="markdownIt-Anchor" href="#双轴"></a> 双轴</h3><p>在Tableau中创建双轴（Dual Axis）可以帮助我们在一个图表中同时显示两个不同的度量，每个度量有自己的轴。这对于比较两个不同量级的数据或者展示两个相关但不同类型的数据非常有用。以下是如何在Tableau中创建双轴的步骤：</p><ol><li><strong>准备数据</strong>：确保你的数据源中有至少两个不同的度量（Metrics），这些度量将分别显示在两个轴上。</li><li><strong>创建第一个视图</strong>：将第一个度量拖到<code>行</code>或<code>列</code>功能区。例如，将<code>销售额</code>拖到<code>行</code>功能区。</li><li><strong>创建第二个视图</strong>：将第二个度量拖到与第一个度量相同的位置，例如，将<code>利润</code>拖到<code>行</code>功能区，并且放在<code>销售额</code>的旁边。</li><li><strong>转换为双轴</strong>：右键点击第二个度量（例如<code>利润</code>），然后选择<code>双轴</code>（Dual Axis）。</li><li><strong>调整轴和格式</strong>：你可以通过右键点击轴标签来调整每个轴的格式，比如设置轴的最小值、最大值、刻度间隔等。</li></ol><p>双轴的作用主要包括：</p><ul><li><strong>比较不同量级的数据</strong>：例如，销售额和利润，这两个数据可能量级不同，通过双轴可以更直观地比较。</li><li><strong>展示相关但不同类型的数据</strong>：例如，温度和降雨量，这两个数据虽然相关，但类型不同，通过双轴可以同时展示。</li><li><strong>增强可视化效果</strong>：双轴图表可以提供更丰富的信息，帮助用户更好地理解数据之间的关系。</li></ul><p>最后我们发现，这个双轴图并不美观，没关系，我们点击第一个视图，将其调整为条形图，并通过调整透明度和条形大小来增强视觉效果。具体操作如下：</p><ol><li><strong>选择条形图</strong>：在<code>标记</code>卡中，将图表类型从默认的折线图改为条形图。</li><li><strong>调整透明度</strong>：在<code>标记</code>卡下找到<code>颜色</code>选项，调整透明度滑块，降低条形图的透明度，使其更加柔和，不至于过于突兀。</li><li><strong>缩小条形大小</strong>：在<code>标记</code>卡中，找到<code>大小</code>选项，适当减小条形的大小，使其与后续的折线图更好地融合，保持图表的整体协调性。</li><li><strong>保持折线图</strong>：对于第二个视图，继续使用折线图，以保持数据的连续性和趋势的清晰展示。</li></ol><p>咳，最后的最后，我们再加一个<code>分析</code>里的<code>趋势线</code>，完美收工。</p><h3 id="环形图"><a class="markdownIt-Anchor" href="#环形图"></a> 环形图</h3><p>先做一个饼形图，然后在<code>行</code>的上面双击输入<code>0</code>，重复两次，可以得到两个图表，然后右键<code>双轴</code>，在左侧的下面的<code>总和(0)</code>里进行以下操作，首先把所有标签删除，把<code>颜色</code>改为纯白，最后把<code>大小</code>拉小，就可以得到一个环形图了。</p><p>不过这个时候会发现左右两侧会有轴线，我们右键轴线段，点击<code>显示标题</code>，就可以把轴线给隐藏掉。</p><p>还有一个零值线，我们右键画布，点击<code>设置格式</code>，点击字段左边的图标，里面是设置工作表的各种线和刻度的，找到<code>零值线</code>，将其设置为<code>无</code>，这样我们就可以得到一个干净的环形图了。</p><blockquote><p>如果遇到标签的名字不符合我们所期望的，我们可以右键<code>编辑别名</code>进行设置。</p></blockquote><h3 id="仪表盘布局"><a class="markdownIt-Anchor" href="#仪表盘布局"></a> 仪表盘布局</h3><p>常见的仪表盘布局有两种，一种是纵向的，另一种是横向的。</p><h3 id="仪表盘制作"><a class="markdownIt-Anchor" href="#仪表盘制作"></a> 仪表盘制作</h3><p>当你根据数据源做好各类图表的时候，直接在右下侧建立仪表盘，然后把图表拖拽到仪表盘中，进行布局调试和交互设计/记得加上边框哦，这样我们的仪表盘就制作成功了，如下图所示，这是拉姆自己用一个小项目进行的练手：<br /><img src="https://www.qiuxs.cn/sharing-tools/img/read/f294f36b1c59f4262381d6ecb16fd7d9" alt="图表1" /></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;strong&gt;Tableau：最易上手且功能强大的可视化操作BI工具&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Tableau是一款广受欢迎的商业智能（BI）工具，以其直观的用户界面和强大的数据可视化功能而闻名。无论是数据分析师、业务用户还是IT专业人员，都能快速上手并利用Tabl</summary>
      
    
    
    
    <category term="learn" scheme="https://sherry14love.github.io/categories/learn/"/>
    
    
    <category term="卷" scheme="https://sherry14love.github.io/tags/%E5%8D%B7/"/>
    
    <category term="数据分析" scheme="https://sherry14love.github.io/tags/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/"/>
    
  </entry>
  
  <entry>
    <title>数据分析之Excel食用指南</title>
    <link href="https://sherry14love.github.io/2024/07/02/learn/excel/"/>
    <id>https://sherry14love.github.io/2024/07/02/learn/excel/</id>
    <published>2024-07-01T16:00:00.000Z</published>
    <updated>2024-09-26T07:27:28.674Z</updated>
    
    <content type="html"><![CDATA[<p>Excel，作为微软公司开发的一款强大电子表格软件，不仅在数据分析、财务计算、项目管理、统计分析等领域发挥着重要作用，还因其丰富的数据处理和计算功能，以及多样化的图表和图形工具，成为高效管理和分析数据的得力助手。</p><p>如下图，是拉姆在系统学习Excel时制作的某店铺报表，其中利用了切片器灵活筛选美团、饿了么的数据情况，这是初级数据分析师所必须掌握的。接下来，我们要介绍关于excel的各类用法，帮助大家胜任数据分析师。</p><p><img src="https://www.qiuxs.cn/sharing-tools/img/read/2775923e3ecc6eeb946155c4b77dfe86" alt="报表" /></p><h2 id="基础篇"><a class="markdownIt-Anchor" href="#基础篇"></a> 基础篇</h2><p>首先，为了确保数据的安全性和便于分析计算结果，我们需采取以下步骤：</p><ol><li>创建一个新的工作簿（例如工作簿2），专门用于存储和分析计算结果。</li><li>这样做的好处是可以避免在原始数据工作簿（例如工作簿1）中进行操作时可能导致的数据丢失或错误。</li><li>通过将分析和计算结果独立出来，可以更清晰地管理和查看数据，同时也便于进行后续的数据处理和报告生成。</li></ol><p>这种做法有助于保持数据的原貌，同时提供了一个专门的空间来进行数据分析和计算，确保了工作的有序性和高效性。</p><h3 id="等号的基础使用"><a class="markdownIt-Anchor" href="#等号的基础使用"></a> 等号的基础使用</h3><p>在Excel中，使用等号<code>=</code>是创建公式或引用其他单元格数据的关键步骤：</p><ol><li>打开一个新的工作簿（例如工作簿2），在任意一个单元格中输入等号<code>=</code>。</li><li>切换到另一个含有数据的工作簿（例如工作簿1）。</li><li>在工作簿1中选择我们想要引用的数据单元格，然后按回车键。</li><li>会自动回到工作簿2，可以发现所选单元格中显示了工作簿1中选定的数据。</li><li>如果需要引用工作簿1中同一列的连续数据，可以向下拖动工作簿2中单元格的填充柄（即单元格右下角的小方块），这样会自动引用工作簿1中相应列的后续数据。</li></ol><p>通过这种方式，可以方便地在不同工作簿之间引用和复制数据。</p><p>还有在一个单元格内输入等号<code>=</code>，可以选择各类函数，包括求和求平均的常用函数、财务、工程、日期与时间、统计、数学与三角函数等。</p><h3 id="绝对引用"><a class="markdownIt-Anchor" href="#绝对引用"></a> 绝对引用</h3><p>在Excel中，锁定引用通常指的是使用绝对引用，这样在复制公式时，引用的单元格不会改变。可以通过以下步骤来锁定引用：</p><ol><li><strong>选择单元格</strong>：首先，选择包含我们要锁定引用的公式的单元格。</li><li><strong>编辑公式</strong>：点击公式栏，进入公式编辑模式。</li><li><strong>锁定引用</strong>：在公式中，将光标放在我们要锁定的单元格引用上，然后按下 <code>F4</code> 键。每按一次 <code>F4</code> 键，引用就会在以下四种模式之间切换：<ul><li><strong>绝对引用</strong>：例如 <code>$A$1</code>，行和列都被锁定。</li><li><strong>混合引用（锁定行）</strong>：例如 <code>A$1</code>，只有行被锁定。</li><li><strong>混合引用（锁定列）</strong>：例如 <code>$A1</code>，只有列被锁定。</li><li><strong>相对引用</strong>：例如 <code>A1</code>，行和列都没有锁定。</li></ul></li><li><strong>完成公式</strong>：根据需要调整引用后，按 <code>Enter</code> 键完成公式的编辑。</li></ol><p>例如，如果我们有一个公式 <code>=A1</code>，并且想锁定这个引用，我们可以将光标放在 <code>A1</code> 上，然后按 <code>F4</code> 键，公式会变成 <code>=$A$1</code>。</p><p>这样，当我们复制这个公式到其他单元格时，<code>$A$1</code> 的引用不会改变，而相对引用会根据新单元格的位置自动调整。</p><h3 id="排序"><a class="markdownIt-Anchor" href="#排序"></a> 排序</h3><p><strong>Ctrl + Shift + L</strong>是排序和筛选功能的快捷键，选中数据，进行排序。</p><h3 id="快捷键"><a class="markdownIt-Anchor" href="#快捷键"></a> 快捷键</h3><h4 id="常用快捷键"><a class="markdownIt-Anchor" href="#常用快捷键"></a> 常用快捷键</h4><ul><li><strong>Ctrl + C</strong>：复制选中的单元格</li><li><strong>Ctrl + V</strong>：粘贴复制的内容</li><li><strong>Ctrl + X</strong>：剪切选中的单元格</li><li><strong>Ctrl + Z</strong>：撤销上一步操作</li><li><strong>Ctrl + Y</strong>：重做上一步操作</li><li><strong>Ctrl + S</strong>：保存当前工作簿</li><li><strong>Ctrl + P</strong>：打印当前工作表</li><li><strong>Ctrl + F</strong>：查找内容</li><li><strong>Ctrl + H</strong>：替换内容</li><li><strong>Ctrl + A</strong>：全选当前工作表</li><li><strong>Ctrl + B</strong>：应用或取消加粗格式</li><li><strong>Ctrl + I</strong>：应用或取消斜体格式</li><li><strong>Ctrl + U</strong>：应用或取消下划线</li><li><strong>Ctrl + K</strong>：插入或编辑超链接</li><li><strong>Ctrl + Shift + L</strong>：排序和筛选</li></ul><h4 id="导航快捷键"><a class="markdownIt-Anchor" href="#导航快捷键"></a> 导航快捷键</h4><ul><li><strong>Ctrl + 方向键</strong>：快速移动到数据区域的边缘</li><li><strong>Ctrl + Home</strong>：移动到工作表的第一个单元格（A1）</li><li><strong>Ctrl + End</strong>：移动到工作表的最后一个单元格（数据区域的右下角）</li><li><strong>Page Up</strong>：向上翻页</li><li><strong>Page Down</strong>：向下翻页</li><li><strong>Alt + Page Up</strong>：向左翻页</li><li><strong>Alt + Page Down</strong>：向右翻页</li></ul><h4 id="选择和编辑快捷键"><a class="markdownIt-Anchor" href="#选择和编辑快捷键"></a> 选择和编辑快捷键</h4><ul><li><strong>Shift + 方向键</strong>：扩展选定区域</li><li><strong>Shift + Ctrl + 方向键</strong>：快速选择数据区域</li><li><strong>F2</strong>：编辑活动单元格</li><li><strong>Enter</strong>：完成单元格输入并移动到下方单元格</li><li><strong>Tab</strong>：完成单元格输入并移动到右侧单元格</li><li><strong>Esc</strong>：取消单元格或编辑栏中的输入</li></ul><h4 id="格式化快捷键"><a class="markdownIt-Anchor" href="#格式化快捷键"></a> 格式化快捷键</h4><ul><li><strong>Ctrl + 1</strong>：打开“单元格格式”对话框</li><li><strong>Ctrl + Shift + $</strong>：应用货币格式</li><li><strong>Ctrl + Shift + %</strong>：应用百分比格式</li><li><strong>Ctrl + Shift + #</strong>：应用日期格式</li><li><strong>Ctrl + Shift + @</strong>：应用时间格式</li><li><strong>Ctrl + Shift + !</strong>：应用数字格式</li></ul><h4 id="工作表和窗口管理快捷键"><a class="markdownIt-Anchor" href="#工作表和窗口管理快捷键"></a> 工作表和窗口管理快捷键</h4><ul><li><strong>Ctrl + N</strong>：新建工作簿</li><li><strong>Ctrl + O</strong>：打开工作簿</li><li><strong>Ctrl + W</strong>：关闭当前工作簿</li><li><strong>Ctrl + F6</strong>：切换到下一个工作簿</li><li><strong>Ctrl + Shift + F6</strong>：切换到上一个工作簿</li><li><strong>Alt + F1</strong>：创建当前数据区域的图表</li><li><strong>F11</strong>：创建当前数据区域的图表并插入到新工作表中</li></ul><h2 id="进阶篇"><a class="markdownIt-Anchor" href="#进阶篇"></a> 进阶篇</h2><h3 id="数据透视表"><a class="markdownIt-Anchor" href="#数据透视表"></a> 数据透视表</h3><p>在Excel中，数据透视表是一种强大的数据分析工具，能够帮助用户快速汇总、分析和展示大量数据。以下是创建和使用数据透视表的详细步骤：</p><ol><li><strong>创建数据透视表</strong>：<ul><li>首先，选择我们想要分析的数据区域。确保数据区域包含标题行，以便数据透视表能够正确识别字段名称。</li><li>然后，点击Excel顶部菜单栏中的“插入”选项卡。</li><li>在“插入”选项卡中，找到并点击最左侧的“数据透视表”按钮。</li><li>在弹出的“创建数据透视表”对话框中，确认数据区域无误，并选择“新工作表”选项，以便将数据透视表放置在一个新的工作表中，保持原始数据的整洁。</li></ul></li><li><strong>配置数据透视表</strong>：<ul><li>创建数据透视表后，Excel会显示一个新的工作表，并在右侧打开“数据透视表字段”窗格。</li><li>在“数据透视表字段”窗格中，我们可以通过拖拽字段到不同的区域（行、列、值、筛选器）来配置数据透视表的布局。<ul><li><strong>行区域</strong>：拖拽字段到行区域，数据透视表将按该字段进行行排列。</li><li><strong>列区域</strong>：拖拽字段到列区域，数据透视表将按该字段进行列排列。</li><li><strong>值区域</strong>：拖拽字段到值区域，数据透视表将对该字段进行汇总计算（如求和、计数、平均值、方差等）。</li><li><strong>筛选器区域</strong>：拖拽字段到筛选器区域，可以对数据透视表进行条件筛选，以便查看特定数据子集。</li></ul></li></ul></li><li><strong>优化数据透视表</strong>：<ul><li>根据需要，我们可以进一步调整数据透视表的格式和布局，例如更改汇总方式、添加计算字段、设置条件格式等。</li><li>数据透视表还支持多种图表类型，我们可以通过点击“数据透视图”按钮，将数据透视表转换为图表，以便更直观地展示数据分析结果。</li></ul></li><li><strong>插入切片器</strong>：<ul><li>切片器是数据透视表的一个交互式组件，可以方便地对数据进行动态筛选。</li><li>要插入切片器，首先确保我们的数据透视表已经创建并配置好。</li><li>然后，点击“插入”选项卡中的“切片器”按钮。</li><li>在弹出的“插入切片器”对话框中，选择我们想要作为筛选条件的字段，然后点击“确定”。</li><li>切片器将以一个小窗口的形式出现在工作表中，我们可以通过点击切片器中的选项来动态筛选数据透视表中的数据。</li></ul></li><li><strong>刷新数据透视表</strong>：<ul><li>如果我们的原始数据发生了变化，需要更新数据透视表以反映最新的数据。</li><li>右键点击数据透视表中的任意单元格，选择“刷新”，或者点击“数据”选项卡中的“刷新”按钮。</li><li>数据透视表将重新计算并显示最新的数据。</li></ul></li><li><strong>数据透视表的高级功能</strong>：<ul><li><strong>计算字段和计算项</strong>：在数据透视表中添加自定义的计算字段或计算项，以进行更复杂的分析。</li><li><strong>数据透视表选项</strong>：通过“数据透视表选项”对话框，可以调整数据透视表的各种设置，如布局和格式、汇总和筛选、显示和打印等。</li><li><strong>数据模型</strong>：对于大型和复杂的数据集，可以使用数据模型来创建多表数据透视表，进行更深入的数据分析。</li></ul></li></ol><h3 id="数据透视图表"><a class="markdownIt-Anchor" href="#数据透视图表"></a> 数据透视图表</h3><p>在Excel中，数据透视图表是一种强大的可视化工具，它与数据透视表紧密结合，能够直观地展示数据的汇总和分析结果。以下是创建和使用数据透视图表的详细步骤：</p><ol><li><strong>创建数据透视图表</strong>：<ul><li>首先，确保我们已经创建并配置好了一个数据透视表。</li><li>然后，点击Excel顶部菜单栏中的“数据透视表分析”选项卡。</li><li>在“数据透视表分析”选项卡中，找到并点击“数据透视图”按钮。</li><li>在弹出的“插入图表”对话框中，选择我们想要的图表类型，如柱状图、折线图、饼图等。</li><li>点击“确定”，Excel将根据数据透视表的内容自动生成相应的数据透视图表。</li></ul></li><li><strong>配置数据透视图表</strong>：<ul><li>创建数据透视图表后，我们可以通过“数据透视图字段”窗格来配置图表的布局和内容。</li><li>在“数据透视图字段”窗格中，我们可以拖拽字段到不同的区域（轴、图例、值、筛选器）来调整图表的显示方式。<ul><li><strong>轴区域</strong>：拖拽字段到轴区域，图表将按该字段进行分类。</li><li><strong>图例区域</strong>：拖拽字段到图例区域，图表将按该字段进行分组。</li><li><strong>值区域</strong>：拖拽字段到值区域，图表将对该字段进行汇总计算（如求和、计数、平均值等）。</li><li><strong>筛选器区域</strong>：拖拽字段到筛选器区域，可以对图表进行条件筛选，以便查看特定数据子集。</li></ul></li></ul></li><li><strong>优化数据透视图表</strong>：<ul><li>根据需要，我们可以进一步调整数据透视图表的格式和样式，例如更改颜色、添加数据标签、调整图表标题等。</li><li>数据透视图表还支持交互式功能，如通过切片器进行动态筛选，使图表更加灵活和直观。</li></ul></li><li><strong>插入切片器</strong>：<ul><li>切片器是数据透视图表的一个交互式组件，可以方便地对数据进行动态筛选。</li><li>要插入切片器，首先确保我们的数据透视图表已经创建并配置好。</li><li>然后，点击“插入”选项卡中的“切片器”按钮。</li><li>在弹出的“插入切片器”对话框中，选择我们想要作为筛选条件的字段，然后点击“确定”。</li><li>切片器将以一个小窗口的形式出现在工作表中，我们可以通过点击切片器中的选项来动态筛选数据透视图表中的数据。</li></ul></li></ol><h3 id="vlookup函数"><a class="markdownIt-Anchor" href="#vlookup函数"></a> VLOOKUP函数</h3><p>VLOOKUP函数是Excel中非常常用的函数之一，用于在表格或区域中按行查找数据。它的基本语法如下：</p><figure class="highlight excel"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">VLOOKUP</span>(lookup_value, table_array, col_index_num, [range_lookup])</span><br></pre></td></tr></table></figure><p>各参数的含义如下：</p><ol><li><strong>lookup_value</strong>：要查找的值。</li><li><strong>table_array</strong>：包含数据的表格区域。</li><li><strong>col_index_num</strong>：返回值在表格区域中的列号。</li><li><strong>range_lookup</strong>：可选参数，指定查找方式。TRUE（或省略）表示近似匹配，FALSE（或0）表示精确匹配。</li></ol><h4 id="示例"><a class="markdownIt-Anchor" href="#示例"></a> 示例</h4><p>假设有以下数据表格：</p><table><thead><tr><th>编号</th><th>姓名</th><th>年龄</th></tr></thead><tbody><tr><td>1</td><td>张三</td><td>25</td></tr><tr><td>2</td><td>李四</td><td>30</td></tr><tr><td>3</td><td>王五</td><td>28</td></tr></tbody></table><p>如果我们想根据编号查找对应的姓名，可以使用以下公式：</p><figure class="highlight excel"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">=<span class="built_in">VLOOKUP</span>(<span class="number">2</span>; sheet2！<span class="symbol">A2</span>:<span class="symbol">C4</span>; <span class="number">2</span>; <span class="built_in">FALSE</span>)</span><br></pre></td></tr></table></figure><p>这个公式的含义是：</p><ul><li>查找值为2（编号为2的行）。</li><li>在A2:C4区域中查找。</li><li>返回第2列的值（即姓名）。</li><li>使用精确匹配（FALSE）。</li></ul><p>因此，结果将返回“李四”。</p><h4 id="注意事项"><a class="markdownIt-Anchor" href="#注意事项"></a> 注意事项</h4><ol><li><strong>table_array</strong>的第一列必须包含要查找的值（lookup_value）。</li><li><strong>col_index_num</strong>必须大于0且小于等于table_array的总列数。</li><li>使用精确匹配时，确保lookup_value在table_array的第一列中存在，否则会返回错误。</li></ol><p>VLOOKUP函数在处理大量数据时非常有用，但也有一些局限性，例如无法从右向左查找。在这种情况下，可以考虑使用INDEX和MATCH函数的组合来实现更灵活的查找。</p><h3 id="if函数"><a class="markdownIt-Anchor" href="#if函数"></a> IF函数</h3><p>IF函数是Excel中非常基础且常用的逻辑函数，用于根据指定的条件返回不同的结果。它的基本语法如下：</p><figure class="highlight excel"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">IF</span>(logical_test; [value_if_true]; [value_if_false])</span><br></pre></td></tr></table></figure><p>各参数的含义如下：</p><ol><li><strong>logical_test</strong>：要进行测试的逻辑表达式，结果为TRUE或FALSE。</li><li><strong>value_if_true</strong>：如果logical_test为TRUE，则返回的值。</li><li><strong>value_if_false</strong>：如果logical_test为FALSE，则返回的值。</li></ol><h4 id="示例-2"><a class="markdownIt-Anchor" href="#示例-2"></a> 示例</h4><p>假设有以下数据表格：</p><table><thead><tr><th>姓名</th><th>分数</th></tr></thead><tbody><tr><td>张三</td><td>85</td></tr><tr><td>李四</td><td>72</td></tr><tr><td>王五</td><td>90</td></tr></tbody></table><p>如果我们想根据分数判断学生是否及格（假设及格分数为60），可以使用以下公式：</p><figure class="highlight excel"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">=<span class="built_in">IF</span>(<span class="symbol">B2</span>&gt;=<span class="number">60</span>; <span class="string">&quot;及格&quot;</span>; <span class="string">&quot;不及格&quot;</span>)</span><br></pre></td></tr></table></figure><p>这个公式的含义是：</p><ul><li>测试B2单元格的值是否大于或等于60。</li><li>如果是，返回“及格”。</li><li>如果不是，返回“不及格”。</li></ul><p>因此，对于张三（分数为85），结果将返回“及格”。</p><h4 id="嵌套if函数"><a class="markdownIt-Anchor" href="#嵌套if函数"></a> 嵌套IF函数</h4><p>IF函数还可以嵌套使用，以处理更复杂的逻辑判断。例如，如果我们想根据分数划分等级（优秀、良好、及格、不及格），可以使用以下公式：</p><figure class="highlight excel"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">=<span class="built_in">IF</span>(<span class="symbol">B2</span>&gt;=<span class="number">90</span>; <span class="string">&quot;优秀&quot;</span>; <span class="built_in">IF</span>(<span class="symbol">B2</span>&gt;=<span class="number">80</span>; <span class="string">&quot;良好&quot;</span>; <span class="built_in">IF</span>(<span class="symbol">B2</span>&gt;=<span class="number">60</span>; <span class="string">&quot;及格&quot;</span>; <span class="string">&quot;不及格&quot;</span>)))</span><br></pre></td></tr></table></figure><p>这个公式的含义是：</p><ul><li>如果B2单元格的值大于或等于90，返回“优秀”。</li><li>否则，如果B2单元格的值大于或等于80，返回“良好”。</li><li>否则，如果B2单元格的值大于或等于60，返回“及格”。</li><li>否则，返回“不及格”。</li></ul><h4 id="注意事项-2"><a class="markdownIt-Anchor" href="#注意事项-2"></a> 注意事项</h4><ol><li><strong>logical_test</strong>必须是一个可以计算为TRUE或FALSE的表达式。</li><li><strong>value_if_true</strong>和<strong>value_if_false</strong>可以是文本、数字、其他公式或函数的结果。</li><li>嵌套IF函数时，确保逻辑清晰且完整，避免出现逻辑错误。</li></ol><p>IF函数在处理简单的条件判断时非常方便，但在处理复杂逻辑时，可能需要结合其他函数（如AND、OR、NOT等）来实现更复杂的逻辑判断。</p><blockquote><p>通过巧妙地结合这些函数，我们能够实现更为复杂且精准的逻辑判断。<br />完成这一系列逻辑判断后，只需轻轻回车，即可得到我们期望的值。此时，若双击单元格右下角的填充柄，整列便会自动填充上我们期望的结果，从而避免了手动逐个拖动的繁琐操作，大大提升了工作效率。</p></blockquote><h3 id="sumif函数"><a class="markdownIt-Anchor" href="#sumif函数"></a> SumIF函数</h3><p>在Excel中，SumIF函数是一个非常实用的工具，它能够根据指定的条件对数据进行求和。这个函数在处理大量数据时尤为高效，能够帮助我们快速筛选并汇总符合特定条件的数据。</p><h4 id="基本语法"><a class="markdownIt-Anchor" href="#基本语法"></a> 基本语法</h4><p>SumIF函数的基本语法如下：</p><figure class="highlight excel"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">=<span class="built_in">SUMIF</span>(range; criteria; [sum_range])</span><br></pre></td></tr></table></figure><ul><li><strong>range</strong>：需要进行条件判断的单元格区域。</li><li><strong>criteria</strong>：用于筛选的条件，可以是数字、文本、表达式或单元格引用。</li><li><strong>[sum_range]</strong>：实际需要求和的单元格区域。如果省略此参数，则默认对range区域中符合条件的单元格进行求和。</li></ul><h4 id="应用示例"><a class="markdownIt-Anchor" href="#应用示例"></a> 应用示例</h4><p>假设我们有一个销售数据表，其中A列是产品名称，B列是销售数量。我们希望统计“苹果”产品的总销售数量，可以使用以下公式：</p><figure class="highlight excel"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">=<span class="built_in">SUMIF</span>(<span class="symbol">A:A</span>; <span class="string">&quot;苹果&quot;</span>; <span class="symbol">B:B</span>)</span><br></pre></td></tr></table></figure><p>在这个例子中，A列是range，&quot;苹果&quot;是criteria，B列是sum_range。函数会筛选出A列中所有名为“苹果”的单元格，并对对应的B列单元格进行求和。</p><h4 id="进阶技巧"><a class="markdownIt-Anchor" href="#进阶技巧"></a> 进阶技巧</h4><ol><li><strong>使用通配符</strong>：在criteria中可以使用通配符，如<code>*</code>和<code>?</code>。例如，<code>=SUMIF(A:A; &quot;苹果*&quot;; B:B)</code>可以统计所有以“苹果”开头的产品销售数量。</li><li><strong>引用单元格作为条件</strong>：可以将criteria设置为单元格引用，如<code>=SUMIF(A:A; D1; B:B)</code>，其中D1单元格中存放着需要筛选的产品名称。</li><li><strong>多条件求和</strong>：如果需要进行多条件求和，可以考虑使用SumIFS函数，它支持多个条件同时进行筛选和求和。</li></ol><h3 id="sumifs函数"><a class="markdownIt-Anchor" href="#sumifs函数"></a> SumIFS函数</h3><p>在Excel中，SumIFS函数是一个强大的工具，它允许用户根据多个条件对数据进行求和。与SumIF函数相比，SumIFS函数能够处理更为复杂的筛选需求，使得数据分析和汇总变得更加灵活和精确。</p><h4 id="基本语法-2"><a class="markdownIt-Anchor" href="#基本语法-2"></a> 基本语法</h4><p>SumIFS函数的基本语法如下：</p><figure class="highlight excel"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">=<span class="built_in">SUMIFS</span>(sum_range; criteria_range1; criteria1; [criteria_range2;  criteria2]; ...)</span><br></pre></td></tr></table></figure><ul><li><strong>sum_range</strong>：实际需要求和的单元格区域。</li><li><strong>criteria_range1</strong>：第一个条件判断的单元格区域。</li><li><strong>criteria1</strong>：第一个用于筛选的条件。</li><li><strong>[criteria_range2, criteria2]</strong>：可选参数，用于添加更多的条件判断区域和条件。</li></ul><h4 id="应用示例-2"><a class="markdownIt-Anchor" href="#应用示例-2"></a> 应用示例</h4><p>假设我们有一个销售数据表，其中A列是产品名称，B列是销售数量，C列是销售地区。我们希望统计“苹果”产品在“北京”地区的总销售数量，可以使用以下公式：</p><figure class="highlight excel"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">=<span class="built_in">SUMIFS</span>(<span class="symbol">B:B</span>; <span class="symbol">A:A</span>; <span class="string">&quot;苹果&quot;</span>; <span class="symbol">C:C</span>; <span class="string">&quot;北京&quot;</span>)</span><br></pre></td></tr></table></figure><p>在这个例子中，B列是sum_range，A列是第一个criteria_range，&quot;苹果&quot;是第一个criteria，C列是第二个criteria_range，&quot;北京&quot;是第二个criteria。函数会筛选出A列中所有名为“苹果”且C列中地区为“北京”的单元格，并对对应的B列单元格进行求和。</p><h4 id="进阶技巧-2"><a class="markdownIt-Anchor" href="#进阶技巧-2"></a> 进阶技巧</h4><ol><li><strong>使用通配符</strong>：在criteria中可以使用通配符，如<code>*</code>和<code>?</code>。例如，<code>=SUMIFS(B:B; A:A; &quot;苹果*&quot;; C:C; &quot;北京&quot;)</code>可以统计所有以“苹果”开头的产品在“北京”地区的销售数量。</li><li><strong>引用单元格作为条件</strong>：可以将criteria设置为单元格引用，如<code>=SUMIFS(B:B; A:A; D1; C:C; E1)</code>，其中D1单元格中存放着需要筛选的产品名称，E1单元格中存放着需要筛选的地区。</li><li><strong>日期和数值条件</strong>：SumIFS函数也支持日期和数值条件。例如，<code>=SUMIFS(B:B; A:A; &quot;苹果&quot;; C:C, &quot;北京&quot;; D:D; &quot;&gt;2023-01-01&quot;)</code>可以统计“苹果”产品在“北京”地区且销售日期在2023年1月1日之后的销售数量。</li></ol><h3 id="同比和环比"><a class="markdownIt-Anchor" href="#同比和环比"></a> 同比和环比</h3><p>下面，让我们了解一下常用的数据比较方法：同比和环比，这两者主要用于分析时间序列数据的变化情况。它们在经济分析、市场研究、财务报告等领域有着广泛的应用。</p><h4 id="同比year-on-year"><a class="markdownIt-Anchor" href="#同比year-on-year"></a> 同比（Year-on-Year）</h4><p>同比是指将某一时期的数据与上一年同一时期的数据进行比较。这种比较方法主要用于观察长期趋势和季节性因素的影响。</p><p><strong>同比公式：同比增减率 = (本期数值 - 同期数值) / 同期数值 * 100%</strong></p><p>例如，如果2023年第二季度的销售额为100万元，而2022年第二季度的销售额为80万元，那么同比增减率为：<strong>同比增减率 = (100 - 80) / 80 * 100% = 25%</strong></p><p>这意味着2023年第二季度的销售额比2022年第二季度增长了25%。</p><h4 id="环比month-on-month或-quarter-on-quarter"><a class="markdownIt-Anchor" href="#环比month-on-month或-quarter-on-quarter"></a> 环比（Month-on-Month或 Quarter-on-Quarter）</h4><p>环比是指将某一时期的数据与上一个相邻时期的数据进行比较。这种比较方法主要用于观察短期内的变化趋势，尤其是季节性因素和市场波动的影响。<br /><strong>环比公式：环比增减率 = (本期数值 - 上期数值) / 上期数值 * 100%</strong></p><p>例如，如果2023年第二季度的销售额为100万元，而2023年第一季度的销售额为90万元，那么环比增减率为：<strong>环比增减率 = (100 - 90) / 90 * 100% = 11.11%</strong><br />这意味着2023年第二季度的销售额比2023年第一季度增长了11.11%。</p><ul><li><strong>同比</strong>：比较同一时期不同年份的数据，用于观察长期趋势和季节性因素。</li><li><strong>环比</strong>：比较相邻时期的数据，用于观察短期内的变化趋势和市场波动。</li></ul><h3 id="数据验证"><a class="markdownIt-Anchor" href="#数据验证"></a> 数据验证</h3><p>在Excel中，数据验证是一项强大的功能，它允许用户设定特定的规则来限制输入到单元格中的数据类型和范围。这不仅有助于确保数据的准确性和一致性，还能提升工作表的整体质量。以下是一些关于Excel数据验证功能的详细介绍和使用技巧（在业务中常用作切片器功能）：</p><h4 id="1-设置数据验证规则"><a class="markdownIt-Anchor" href="#1-设置数据验证规则"></a> 1. 设置数据验证规则</h4><ul><li><strong>数据类型限制</strong>：我们可以选择允许输入的数据类型，如整数、小数、日期、时间等。</li><li><strong>范围限制</strong>：通过设定最小值和最大值，可以限制输入的数据必须在某个特定范围内。</li><li><strong>列表限制</strong>：创建一个下拉列表，用户只能从预定义的选项中选择。</li><li><strong>自定义公式</strong>：使用公式来定义更复杂的验证规则，如确保输入的数据符合特定的业务逻辑。</li></ul><h4 id="2-数据验证的提示信息"><a class="markdownIt-Anchor" href="#2-数据验证的提示信息"></a> 2. 数据验证的提示信息</h4><ul><li><strong>输入提示</strong>：当用户选择一个设置了数据验证的单元格时，可以显示输入提示信息，帮助用户理解应该输入什么样的数据。</li><li><strong>错误警告</strong>：如果用户输入的数据不符合设定的规则，可以显示错误警告信息，并提供重试、取消或帮助选项。</li></ul><h4 id="3-数据验证的高级应用"><a class="markdownIt-Anchor" href="#3-数据验证的高级应用"></a> 3. 数据验证的高级应用</h4><ul><li><strong>跨单元格验证</strong>：可以设置规则来验证多个单元格之间的关系，例如确保一个单元格的值总是大于另一个单元格的值。</li><li><strong>动态数据验证</strong>：结合公式和函数，可以使数据验证规则根据其他单元格的内容动态变化。</li></ul><h4 id="4-数据验证的维护和更新"><a class="markdownIt-Anchor" href="#4-数据验证的维护和更新"></a> 4. 数据验证的维护和更新</h4><ul><li><strong>复制数据验证</strong>：可以通过复制和粘贴的方式，将数据验证规则应用到其他单元格或工作表中。</li><li><strong>更新验证规则</strong>：当业务需求变化时，可以方便地更新数据验证规则，以适应新的数据要求。</li></ul><h3 id="迷你图"><a class="markdownIt-Anchor" href="#迷你图"></a> 迷你图</h3><p>迷你图（Sparklines）是Excel中一种简洁而强大的数据可视化工具，它能够在单个单元格内展示数据的趋势和波动，非常适合用于展示时间序列数据或对比分析。以下是对Excel迷你图功能的详细介绍和使用技巧：</p><h4 id="1-迷你图的类型"><a class="markdownIt-Anchor" href="#1-迷你图的类型"></a> 1. 迷你图的类型</h4><ul><li><strong>折线图</strong>：展示数据随时间的变化趋势，适用于时间序列数据。</li><li><strong>柱形图</strong>：通过柱子的高低来展示数据的对比，适用于比较不同类别的数据。</li><li><strong>盈亏图</strong>：通过不同的颜色来区分正负值，适用于展示盈亏或正负变化。</li></ul><h4 id="2-创建迷你图"><a class="markdownIt-Anchor" href="#2-创建迷你图"></a> 2. 创建迷你图</h4><ul><li><strong>选择数据</strong>：首先，选择我们要创建迷你图的数据范围。</li><li><strong>插入迷你图</strong>：在“插入”选项卡中，点击“迷你图”组中的相应图表类型（折线图、柱形图或盈亏图）。</li><li><strong>设置位置</strong>：在弹出的对话框中，指定迷你图的位置范围，即我们希望迷你图显示的单元格。</li><li><strong>确认创建</strong>：点击“确定”，迷你图就会出现在指定的单元格中。</li></ul><h4 id="3-迷你图的格式设置"><a class="markdownIt-Anchor" href="#3-迷你图的格式设置"></a> 3. 迷你图的格式设置</h4><ul><li><strong>样式调整</strong>：通过“设计”选项卡中的样式库，可以快速更改迷你图的颜色和样式。</li><li><strong>标记设置</strong>：可以添加高点、低点、首点、末点等标记，以突出显示数据中的关键点。</li><li><strong>轴线设置</strong>：对于折线图，可以显示或隐藏轴线，以更好地展示数据趋势。</li></ul><h4 id="4-迷你图的高级应用"><a class="markdownIt-Anchor" href="#4-迷你图的高级应用"></a> 4. 迷你图的高级应用</h4><ul><li><strong>动态迷你图</strong>：结合数据验证和条件格式，可以创建动态更新的迷你图，实时反映数据变化。</li><li><strong>组合迷你图</strong>：在同一单元格内组合不同类型的迷你图，以展示更丰富的数据信息。</li></ul><h4 id="5-迷你图的维护和更新"><a class="markdownIt-Anchor" href="#5-迷你图的维护和更新"></a> 5. 迷你图的维护和更新</h4><ul><li><strong>更新数据</strong>：当源数据发生变化时，迷你图会自动更新，保持数据的实时性。</li><li><strong>复制迷你图</strong>：可以通过复制和粘贴的方式，将迷你图应用到其他单元格或工作表中。</li></ul><p>通过合理使用Excel的迷你图功能，可以在有限的单元格空间内直观地展示数据趋势和对比，提升数据分析的效率和效果。无论是制作报告、仪表盘还是进行日常的数据监控，迷你图都是一种非常实用的工具。</p><h3 id="条件格式"><a class="markdownIt-Anchor" href="#条件格式"></a> 条件格式</h3><p>条件格式是Excel中一项强大的数据可视化工具，它允许用户根据特定的条件自动格式化单元格，从而使数据分析更加直观和高效。以下是对Excel条件格式功能的详细介绍和使用技巧，包括数据条和突出显示单元格规则的应用。</p><h4 id="1-数据条的应用"><a class="markdownIt-Anchor" href="#1-数据条的应用"></a> 1. 数据条的应用</h4><ul><li><strong>业务进度百分比显示</strong>：通过数据条，可以在单元格内直观地展示业务进度的百分比。数据条的长度与百分比数据成正比，使得进度一目了然。</li><li><strong>设置数据条</strong>：选择包含百分比数据的单元格范围，然后在“开始”选项卡中点击“条件格式”，选择“数据条”并选择合适的样式。</li><li><strong>高级设置</strong>：在“条件格式规则管理器”中，可以设置数据条的最小值和最大值，以及负值的显示方式，确保数据条的准确性和美观性。</li></ul><h4 id="2-突出显示单元格规则"><a class="markdownIt-Anchor" href="#2-突出显示单元格规则"></a> 2. 突出显示单元格规则</h4><ul><li><strong>特定值的突出显示</strong>：可以设置规则，使得包含特定值（如关键绩效指标、异常值等）的单元格自动以不同的颜色或格式突出显示。</li><li><strong>条件设置</strong>：在“开始”选项卡中点击“条件格式”，选择“突出显示单元格规则”，然后选择“等于”、“大于”、“小于”等条件，并设置相应的格式。</li><li><strong>自定义规则</strong>：可以使用公式创建自定义的突出显示规则，以满足更复杂的格式化需求。</li></ul><h4 id="3-条件格式的高级应用"><a class="markdownIt-Anchor" href="#3-条件格式的高级应用"></a> 3. 条件格式的高级应用</h4><ul><li><strong>数据条与突出显示规则的结合</strong>：可以在同一数据范围内同时应用数据条和突出显示规则，以提供更丰富的数据可视化效果。</li><li><strong>动态更新</strong>：当数据发生变化时，条件格式会自动更新，保持数据的实时性和准确性。</li><li><strong>复制和应用规则</strong>：可以通过复制条件格式规则，将相同的格式化效果应用到其他单元格或工作表中。</li></ul><h4 id="4-条件格式的维护和更新"><a class="markdownIt-Anchor" href="#4-条件格式的维护和更新"></a> 4. 条件格式的维护和更新</h4><ul><li><strong>管理规则</strong>：在“条件格式规则管理器”中，可以查看、编辑和删除已设置的条件格式规则。</li><li><strong>优先级调整</strong>：可以调整规则的优先级，确保重要的规则优先执行。</li></ul><p>通过合理使用Excel的条件格式功能，可以在单元格内直观地展示业务进度百分比，并突出显示关键数据，提升数据的可读性和分析效率。无论是进行日常的业务监控，还是制作专业的报告和仪表盘，条件格式都是一种非常实用的工具。</p><h2 id="excel自动化宏与vba"><a class="markdownIt-Anchor" href="#excel自动化宏与vba"></a> excel自动化：宏与VBA</h2><h3 id="宏"><a class="markdownIt-Anchor" href="#宏"></a> 宏</h3><p><strong>宏</strong> 是一组预先录制的命令和操作，目的是自动化重复性任务，从而节省时间并减少人为错误。在Excel中，宏通过录制或编写VBA（Visual Basic for Applications）代码实现。以下是关于宏操作的详细介绍：</p><h4 id="1-录制宏"><a class="markdownIt-Anchor" href="#1-录制宏"></a> 1. 录制宏</h4><p>录制宏是创建宏的一种简单方法，无需编写任何代码。通过录制宏，你可以自动执行一系列手动操作。以下是录制宏的步骤：</p><ol><li><strong>打开宏录制工具</strong><ul><li>在Excel中，转到“开发工具”选项卡。如果“开发工具”选项卡未显示，可以通过“文件”-&gt;“选项”-&gt;“自定义功能区”来启用。</li><li>点击“录制宏”按钮。</li></ul></li><li><strong>设置宏参数</strong><ul><li>弹出对话框中，输入宏的名称（必须以字母开头，不得包含空格）。</li><li>选择宏的存储位置，可以选择存储在当前工作簿、新工作簿或个人宏工作簿中。</li><li>输入描述，便于将来识别宏的用途。</li></ul></li><li><strong>执行操作</strong><ul><li>录制开始后，所有的操作都会被记录下来。可以执行希望自动化的步骤，如格式化单元格、输入数据、创建图表等。</li><li>完成所有操作后，点击“停止录制”按钮。</li></ul></li><li><strong>运行宏</strong><ul><li>可以通过“开发工具”选项卡中的“宏”按钮来查看和运行录制的宏。</li></ul></li></ol><h4 id="2-编辑宏"><a class="markdownIt-Anchor" href="#2-编辑宏"></a> 2. 编辑宏</h4><p>录制的宏生成的VBA代码可以在VBA编辑器中进行编辑和修改。以下是编辑宏的步骤：</p><ol><li><strong>打开VBA编辑器</strong><ul><li>在“开发工具”选项卡中，点击“Visual Basic”按钮，打开VBA编辑器。</li></ul></li><li><strong>查找录制的宏</strong><ul><li>在项目资源管理器中，找到包含宏的模块，双击模块名称打开代码窗口。</li></ul></li><li><strong>编辑VBA代码</strong><ul><li>可以直接在代码窗口中修改录制的VBA代码。例如，修改单元格格式、添加新的操作等。</li></ul></li></ol><h3 id="vba"><a class="markdownIt-Anchor" href="#vba"></a> VBA</h3><p><strong>VBA（Visual Basic for Applications）</strong> 是一种事件驱动的编程语言，用于编写宏和自动化任务。VBA提供了比录制宏更强大的功能，可以实现复杂的自动化和定制化操作。以下是使用VBA的一些基本知识和工具：</p><h4 id="1-打开vba编辑器"><a class="markdownIt-Anchor" href="#1-打开vba编辑器"></a> 1. 打开VBA编辑器</h4><ul><li>在Excel中，转到“开发工具”选项卡，点击“Visual Basic”按钮，打开VBA编辑器。</li></ul><h4 id="2-vba编辑器界面"><a class="markdownIt-Anchor" href="#2-vba编辑器界面"></a> 2. VBA编辑器界面</h4><p>VBA编辑器由以下几个部分组成：</p><ul><li><strong>项目资源管理器</strong>：显示所有打开的工作簿及其包含的工作表、模块等。</li><li><strong>属性窗口</strong>：显示所选对象的属性。</li><li><strong>代码窗口</strong>：编写和编辑VBA代码的地方。</li></ul><h4 id="3-创建模块"><a class="markdownIt-Anchor" href="#3-创建模块"></a> 3. 创建模块</h4><p>模块是存放VBA代码的地方。以下是创建模块的步骤：</p><ol><li>在项目资源管理器中，右键单击工作簿名称。</li><li>选择“插入”-&gt;“模块”，创建一个新的代码模块。</li></ol><h4 id="4-编写vba代码"><a class="markdownIt-Anchor" href="#4-编写vba代码"></a> 4. 编写VBA代码</h4><p>在模块中编写VBA代码。例如，创建一个简单的宏来显示消息框：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Sub ShowMessage()</span><br><span class="line">    MsgBox &quot;Hello, Excel VBA!&quot;</span><br><span class="line">End Sub</span><br></pre></td></tr></table></figure><h4 id="5-运行vba代码"><a class="markdownIt-Anchor" href="#5-运行vba代码"></a> 5. 运行VBA代码</h4><p>在VBA编辑器中，点击“运行”按钮（绿色三角形）或按下F5键来运行代码。</p><h4 id="6-调试vba代码"><a class="markdownIt-Anchor" href="#6-调试vba代码"></a> 6. 调试VBA代码</h4><p>调试是发现和修正错误的重要步骤。VBA编辑器提供了多种调试工具：</p><ul><li><strong>断点</strong>：按F9键设置断点，在代码执行到断点时暂停。</li><li><strong>单步执行</strong>：按F8键逐行执行代码，便于观察每一步的执行情况。</li><li><strong>立即窗口</strong>：可以在代码运行时输入命令，查看变量值或执行VBA语句。</li></ul><h4 id="7-示例宏与vba代码"><a class="markdownIt-Anchor" href="#7-示例宏与vba代码"></a> 7. 示例宏与VBA代码</h4><p>以下是一些常用的宏和VBA代码示例：</p><ol><li><strong>自动化格式化</strong><ul><li>录制一个宏，将选定单元格的字体设置为粗体，颜色设置为红色。</li></ul></li><li><strong>批量处理数据</strong><ul><li>编写VBA代码，将工作表中A列中的所有空单元格填充为“NA”：</li></ul></li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Sub FillEmptyCells()</span><br><span class="line">    Dim cell As Range</span><br><span class="line">    For Each cell In Range(&quot;A1:A100&quot;)</span><br><span class="line">        If IsEmpty(cell) Then</span><br><span class="line">            cell.Value = &quot;NA&quot;</span><br><span class="line">        End If</span><br><span class="line">    Next cell</span><br><span class="line">End Sub</span><br></pre></td></tr></table></figure><ol start="3"><li><strong>生成报告</strong><ul><li>录制一个宏，将数据表中的数据复制到新的工作表，并插入图表。</li></ul></li></ol><h3 id="末梢"><a class="markdownIt-Anchor" href="#末梢"></a> 末梢</h3><p>通过宏和VBA，Excel用户可以极大地提高工作效率，自动化繁琐的任务。录制宏适用于简单的自动化需求，而VBA则提供了更强大和灵活的功能，适用于复杂的自动化和定制化操作。掌握这些工具，愿我们都胜任数据分析师，找到合适的工作，拿到满意的薪资。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Excel，作为微软公司开发的一款强大电子表格软件，不仅在数据分析、财务计算、项目管理、统计分析等领域发挥着重要作用，还因其丰富的数据处理和计算功能，以及多样化的图表和图形工具，成为高效管理和分析数据的得力助手。&lt;/p&gt;
&lt;p&gt;如下图，是拉姆在系统学习Excel时制作的某店</summary>
      
    
    
    
    <category term="learn" scheme="https://sherry14love.github.io/categories/learn/"/>
    
    
    <category term="卷" scheme="https://sherry14love.github.io/tags/%E5%8D%B7/"/>
    
    <category term="数据分析" scheme="https://sherry14love.github.io/tags/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/"/>
    
  </entry>
  
  <entry>
    <title>数据分析食用指南2-优化与连接</title>
    <link href="https://sherry14love.github.io/2024/06/15/learn/data5/"/>
    <id>https://sherry14love.github.io/2024/06/15/learn/data5/</id>
    <published>2024-06-14T16:00:00.000Z</published>
    <updated>2024-09-26T07:27:16.722Z</updated>
    
    <content type="html"><![CDATA[<h2 id="优化算法"><a class="markdownIt-Anchor" href="#优化算法"></a> 优化算法</h2><p>曾经有一次面试的时候，HR问拉姆优化算法都是有哪些，拉姆很懵，因为拉姆下意识以为这是算法岗的内容，就磕磕绊绊得回答的很糟糕。</p><p>现在了解一下，其实数据分析和数据挖掘中常用的优化算法是有很多的，这些算法可以帮助我们找到最优或近似最优的解决方案。</p><p>以下是一些常见的优化算法及其应用场景：</p><h3 id="梯度下降gradient-descent"><a class="markdownIt-Anchor" href="#梯度下降gradient-descent"></a> 梯度下降（Gradient Descent）</h3><p>梯度下降是一种迭代优化算法，用于最小化一个函数。在机器学习中，它通常用于最小化损失函数，以找到模型的最佳参数。</p><p><strong>应用场景</strong>：线性回归、逻辑回归、神经网络等模型的参数优化。</p><h3 id="随机梯度下降stochastic-gradient-descent-sgd"><a class="markdownIt-Anchor" href="#随机梯度下降stochastic-gradient-descent-sgd"></a> 随机梯度下降（Stochastic Gradient Descent, SGD）</h3><p>随机梯度下降是梯度下降的一种变体，它在每次迭代中使用一个随机样本的梯度来更新参数，这使得算法更快，但可能会导致收敛路径更加震荡。</p><p><strong>应用场景</strong>：大规模数据集的模型训练，如图像识别、自然语言处理等。</p><h3 id="牛顿法newtons-method"><a class="markdownIt-Anchor" href="#牛顿法newtons-method"></a> 牛顿法（Newton’s Method）</h3><p>牛顿法是一种二阶优化算法，它使用目标函数的二阶导数（海森矩阵）来寻找最小值。牛顿法通常比梯度下降更快收敛，但计算海森矩阵及其逆矩阵可能非常耗时。</p><p><strong>应用场景</strong>：数据维度较低的优化问题，如支持向量机（SVM）的参数优化。</p><h3 id="拟牛顿法quasi-newton-methods"><a class="markdownIt-Anchor" href="#拟牛顿法quasi-newton-methods"></a> 拟牛顿法（Quasi-Newton Methods）</h3><p>拟牛顿法是一类使用近似海森矩阵来代替精确海森矩阵的优化算法，其中最著名的是BFGS和L-BFGS。这些方法在保持牛顿法快速收敛特性的同时，避免了直接计算海森矩阵。</p><p><strong>应用场景</strong>：中等规模数据集的模型训练，如逻辑回归、神经网络等。</p><h3 id="坐标下降coordinate-descent"><a class="markdownIt-Anchor" href="#坐标下降coordinate-descent"></a> 坐标下降（Coordinate Descent）</h3><p>坐标下降是一种迭代算法，它在每次迭代中只优化一个参数，而保持其他参数不变。这种方法在参数之间相互独立或近似独立时非常有效。</p><p><strong>应用场景</strong>：LASSO回归、弹性网络等正则化模型的参数优化。</p><h3 id="遗传算法genetic-algorithms"><a class="markdownIt-Anchor" href="#遗传算法genetic-algorithms"></a> 遗传算法（Genetic Algorithms）</h3><p>遗传算法是一种模拟自然选择和遗传机制的搜索启发式算法。它通过模拟生物进化过程来寻找问题的最优解。</p><p><strong>应用场景</strong>：复杂的优化问题，如调度问题、旅行商问题（TSP）等。</p><h3 id="粒子群优化particle-swarm-optimization-pso"><a class="markdownIt-Anchor" href="#粒子群优化particle-swarm-optimization-pso"></a> 粒子群优化（Particle Swarm Optimization, PSO）</h3><p>粒子群优化是一种基于群体智能的优化算法，它模拟鸟群或鱼群的社会行为来寻找最优解。</p><p><strong>应用场景</strong>：多目标优化问题，如工程设计、机器人路径规划等。</p><h3 id="模拟退火simulated-annealing"><a class="markdownIt-Anchor" href="#模拟退火simulated-annealing"></a> 模拟退火（Simulated Annealing）</h3><p>模拟退火是一种概率性优化算法，它通过模拟固体退火过程来寻找全局最优解。算法在搜索过程中允许接受劣解，以避免陷入局部最优。</p><p><strong>应用场景</strong>：组合优化问题，如旅行商问题、调度问题等。</p><h3 id="蚁群算法ant-colony-optimization-aco"><a class="markdownIt-Anchor" href="#蚁群算法ant-colony-optimization-aco"></a> 蚁群算法（Ant Colony Optimization, ACO）</h3><p>蚁群算法是一种模拟蚂蚁觅食行为的优化算法，它通过模拟蚂蚁在寻找食物过程中留下的信息素来解决优化问题。</p><p><strong>应用场景</strong>：路径规划、网络路由等优化问题。</p><h3 id="支持向量机support-vector-machines-svm"><a class="markdownIt-Anchor" href="#支持向量机support-vector-machines-svm"></a> 支持向量机（Support Vector Machines, SVM）</h3><p>虽然SVM本身不是一种优化算法，但它使用了一种称为序列最小优化（Sequential Minimal Optimization, SMO）的算法来解决其优化问题。</p><p><strong>应用场景</strong>：分类和回归问题，如文本分类、图像识别等。</p><p>上面算是对优化算法的一个小介绍。</p><h2 id="数据连接"><a class="markdownIt-Anchor" href="#数据连接"></a> 数据连接</h2><p>数据连接（Data Joining 或 Data Merging）是数据分析和处理中的一项核心操作，它将两个或多个数据集合并在一起，以便进行更深入的分析。这个过程通常基于一个或多个共同的键（key），这些键在不同的数据集中对应相同的实体或观测值。</p><p>我们将介绍常见的数据连接类型，并通过Python的pandas库展示如何实现这些连接。</p><h2 id="数据连接类型"><a class="markdownIt-Anchor" href="#数据连接类型"></a> 数据连接类型</h2><h3 id="内连接inner-join"><a class="markdownIt-Anchor" href="#内连接inner-join"></a> 内连接（Inner Join）</h3><p>内连接只保留两个数据集中键值匹配的记录。换句话说，只有当两个数据集中的键值完全匹配时，这些记录才会被包含在结果中。</p><p><strong>示例场景</strong>：假设你有两个数据集，一个包含客户信息（如客户ID、姓名、地址），另一个包含客户的购买记录（如客户ID、购买日期、购买金额）。通过内连接这两个数据集，你可以得到一个包含所有客户购买信息的新数据集，其中只包含那些在两个数据集中都有记录的客户。</p><h3 id="左连接left-join或左外连接left-outer-join"><a class="markdownIt-Anchor" href="#左连接left-join或左外连接left-outer-join"></a> 左连接（Left Join）或左外连接（Left Outer Join）</h3><p>左连接保留左边的数据集中的所有记录，以及右边数据集中与左边数据集键值匹配的记录。如果右边数据集中没有匹配的记录，则结果中对应的字段为空（或缺失值）。</p><p><strong>示例场景</strong>：在上述客户和购买记录的例子中，使用左连接可以得到一个包含所有客户信息及其购买记录的数据集，即使某些客户没有购买记录。</p><h3 id="右连接right-join或右外连接right-outer-join"><a class="markdownIt-Anchor" href="#右连接right-join或右外连接right-outer-join"></a> 右连接（Right Join）或右外连接（Right Outer Join）</h3><p>右连接保留右边的数据集中的所有记录，以及左边数据集中与右边数据集键值匹配的记录。如果左边数据集中没有匹配的记录，则结果中对应的字段为空（或缺失值）。</p><p><strong>示例场景</strong>：在客户和购买记录的例子中，使用右连接可以得到一个包含所有购买记录及其对应客户信息的数据集，即使某些购买记录没有对应的客户信息。</p><h3 id="全连接full-join或全外连接full-outer-join"><a class="markdownIt-Anchor" href="#全连接full-join或全外连接full-outer-join"></a> 全连接（Full Join）或全外连接（Full Outer Join）</h3><p>全连接保留两个数据集中的所有记录，无论它们是否在另一个数据集中有匹配的记录。如果一个数据集中没有匹配的记录，则结果中对应的字段为空（或缺失值）。</p><p><strong>示例场景</strong>：在客户和购买记录的例子中，使用全连接可以得到一个包含所有客户信息和购买记录的数据集，无论它们是否相互匹配。</p><h3 id="交叉连接cross-join或笛卡尔积cartesian-product"><a class="markdownIt-Anchor" href="#交叉连接cross-join或笛卡尔积cartesian-product"></a> 交叉连接（Cross Join）或笛卡尔积（Cartesian Product）</h3><p>交叉连接将两个数据集中的每一行与另一个数据集中的每一行进行配对，生成所有可能的组合。这种连接不依赖于任何键值匹配。</p><p><strong>示例场景</strong>：假设你有两个数据集，一个包含产品列表，另一个包含促销活动。通过交叉连接这两个数据集，你可以得到一个包含所有可能的产品和促销组合的数据集。</p><h3 id="自连接self-join"><a class="markdownIt-Anchor" href="#自连接self-join"></a> 自连接（Self Join）</h3><p>自连接是将数据集与其自身连接的操作，通常用于处理层次结构数据或需要比较数据集中不同记录的情况。</p><p><strong>示例场景</strong>：假设你有一个员工数据集，其中包含员工ID、姓名和经理ID。通过自连接，你可以创建一个包含所有员工及其直接经理信息的数据集。</p><p>在实际操作中，数据连接可以通过多种编程语言和工具来实现，如SQL、Python（使用pandas库）、R等。</p><h2 id="python实现"><a class="markdownIt-Anchor" href="#python实现"></a> Python实现</h2><p>下面我们将使用Python的pandas库来演示这些连接类型。首先，我们需要创建示例数据集：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建第一个数据集：客户信息</span></span><br><span class="line">data1 = &#123;<span class="string">&#x27;CustomerID&#x27;</span>: [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>],</span><br><span class="line">         <span class="string">&#x27;Name&#x27;</span>: [<span class="string">&#x27;Alice&#x27;</span>, <span class="string">&#x27;Bob&#x27;</span>, <span class="string">&#x27;Charlie&#x27;</span>, <span class="string">&#x27;David&#x27;</span>, <span class="string">&#x27;Eve&#x27;</span>],</span><br><span class="line">         <span class="string">&#x27;Address&#x27;</span>: [<span class="string">&#x27;New York&#x27;</span>, <span class="string">&#x27;Los Angeles&#x27;</span>, <span class="string">&#x27;Chicago&#x27;</span>, <span class="string">&#x27;Houston&#x27;</span>, <span class="string">&#x27;Phoenix&#x27;</span>]&#125;</span><br><span class="line">df1 = pd.DataFrame(data1)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建第二个数据集：购买记录</span></span><br><span class="line">data2 = &#123;<span class="string">&#x27;CustomerID&#x27;</span>: [<span class="number">3</span>, <span class="number">4</span>, <span class="number">6</span>, <span class="number">7</span>],</span><br><span class="line">         <span class="string">&#x27;PurchaseDate&#x27;</span>: [<span class="string">&#x27;2023-01-01&#x27;</span>, <span class="string">&#x27;2023-01-02&#x27;</span>, <span class="string">&#x27;2023-01-03&#x27;</span>, <span class="string">&#x27;2023-01-04&#x27;</span>],</span><br><span class="line">         <span class="string">&#x27;Amount&#x27;</span>: [<span class="number">100</span>, <span class="number">200</span>, <span class="number">300</span>, <span class="number">400</span>]&#125;</span><br><span class="line">df2 = pd.DataFrame(data2)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;客户信息数据集:&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(df1)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;\n购买记录数据集:&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(df2)</span><br></pre></td></tr></table></figure><p>现在，让我们展示如何实现不同类型的连接：</p><h3 id="内连接"><a class="markdownIt-Anchor" href="#内连接"></a> 内连接</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">inner_join = pd.merge(df1, df2, on=<span class="string">&#x27;CustomerID&#x27;</span>, how=<span class="string">&#x27;inner&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;\n内连接结果:&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(inner_join)</span><br></pre></td></tr></table></figure><h3 id="左连接"><a class="markdownIt-Anchor" href="#左连接"></a> 左连接</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">left_join = pd.merge(df1, df2, on=<span class="string">&#x27;CustomerID&#x27;</span>, how=<span class="string">&#x27;left&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;\n左连接结果:&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(left_join)</span><br></pre></td></tr></table></figure><h3 id="右连接"><a class="markdownIt-Anchor" href="#右连接"></a> 右连接</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">right_join = pd.merge(df1, df2, on=<span class="string">&#x27;CustomerID&#x27;</span>, how=<span class="string">&#x27;right&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;\n右连接结果:&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(right_join)</span><br></pre></td></tr></table></figure><h3 id="全连接"><a class="markdownIt-Anchor" href="#全连接"></a> 全连接</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">full_join = pd.merge(df1, df2, on=<span class="string">&#x27;CustomerID&#x27;</span>, how=<span class="string">&#x27;outer&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;\n全连接结果:&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(full_join)</span><br></pre></td></tr></table></figure><h3 id="交叉连接"><a class="markdownIt-Anchor" href="#交叉连接"></a> 交叉连接</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cross_join = pd.merge(df1, df2, how=<span class="string">&#x27;cross&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;\n交叉连接结果:&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(cross_join)</span><br></pre></td></tr></table></figure><h3 id="自连接"><a class="markdownIt-Anchor" href="#自连接"></a> 自连接</h3><p>自连接通常用于同一个数据集内部的不同记录之间的连接。以下是一个简单的自连接示例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建一个简单的员工数据集</span></span><br><span class="line">data3 = &#123;<span class="string">&#x27;EmployeeID&#x27;</span>: [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>],</span><br><span class="line">         <span class="string">&#x27;Name&#x27;</span>: [<span class="string">&#x27;Alice&#x27;</span>, <span class="string">&#x27;Bob&#x27;</span>, <span class="string">&#x27;Charlie&#x27;</span>, <span class="string">&#x27;David&#x27;</span>],</span><br><span class="line">         <span class="string">&#x27;ManagerID&#x27;</span>: [<span class="literal">None</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>]&#125;</span><br><span class="line">df3 = pd.DataFrame(data3)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用自连接</span></span><br><span class="line">self_join = pd.merge(df3, df3, left_on=<span class="string">&#x27;ManagerID&#x27;</span>, right_on=<span class="string">&#x27;EmployeeID&#x27;</span>, suffixes=(<span class="string">&#x27;_Employee&#x27;</span>, <span class="string">&#x27;_Manager&#x27;</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;\n自连接结果:&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(self_join[[<span class="string">&#x27;EmployeeID_Employee&#x27;</span>, <span class="string">&#x27;Name_Employee&#x27;</span>, <span class="string">&#x27;Name_Manager&#x27;</span>]])</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;优化算法&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#优化算法&quot;&gt;&lt;/a&gt; 优化算法&lt;/h2&gt;
&lt;p&gt;曾经有一次面试的时候，HR问拉姆优化算法都是有哪些，拉姆很懵，因为拉姆下意识以为这是算法岗的内容，就磕磕绊绊得回答的很糟糕。&lt;/p&gt;</summary>
      
    
    
    
    <category term="learn" scheme="https://sherry14love.github.io/categories/learn/"/>
    
    
    <category term="卷" scheme="https://sherry14love.github.io/tags/%E5%8D%B7/"/>
    
    <category term="数据分析" scheme="https://sherry14love.github.io/tags/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/"/>
    
  </entry>
  
  <entry>
    <title>回归与分类</title>
    <link href="https://sherry14love.github.io/2024/06/05/learn/data3/"/>
    <id>https://sherry14love.github.io/2024/06/05/learn/data3/</id>
    <published>2024-06-04T16:00:00.000Z</published>
    <updated>2024-09-26T07:27:10.898Z</updated>
    
    <content type="html"><![CDATA[<p>回归（Regression）和分类（Classification）是机器学习中两种常见的监督学习任务，它们在目标和方法上有所不同。</p><h2 id="回归regression"><a class="markdownIt-Anchor" href="#回归regression"></a> 回归（Regression）</h2><p>回归分析是一种预测性的建模技术，它研究的是因变量（目标）和自变量（预测器）之间的关系。这种技术通常用于预测一个具体的数值，如房价、股票价格、温度等。</p><p><strong>关键特点：</strong></p><ul><li><strong>目标变量</strong>：连续值。</li><li><strong>输出</strong>：一个数值。</li><li><strong>例子</strong>：线性回归、多项式回归、决策树回归、随机森林回归等。</li></ul><p><strong>应用场景</strong>：</p><ul><li>房价预测</li><li>销售预测</li><li>股票价格预测</li></ul><h3 id="线性回归"><a class="markdownIt-Anchor" href="#线性回归"></a> 线性回归</h3><p>线性回归（Linear Regression）是统计学和机器学习中最基础的预测建模技术之一，它用于建立和估计一个变量（因变量）与一个或多个变量（自变量）之间的线性关系。线性回归假设因变量和自变量之间的关系可以用一条直线（在一维情况下）或一个超平面（在多维情况下）来近似表示。</p><h3 id="基本概念"><a class="markdownIt-Anchor" href="#基本概念"></a> 基本概念</h3><p><strong>因变量（Dependent Variable）</strong>：我们试图预测的变量，通常表示为 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>y</mi></mrow><annotation encoding="application/x-tex">y</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span></span></span></span>。<br /><strong>自变量（Independent Variables）</strong>：用于预测因变量的变量，通常表示为 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>x</mi><mn>1</mn></msub><mo separator="true">,</mo><msub><mi>x</mi><mn>2</mn></msub><mo separator="true">,</mo><mo>…</mo><mo separator="true">,</mo><msub><mi>x</mi><mi>n</mi></msub></mrow><annotation encoding="application/x-tex">x_1, x_2, \ldots, x_n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="minner">…</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>。<br /><strong>参数（Parameters）</strong>：模型中的系数，用于确定自变量和因变量之间的关系，通常表示为 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>β</mi><mn>0</mn></msub><mo separator="true">,</mo><msub><mi>β</mi><mn>1</mn></msub><mo separator="true">,</mo><mo>…</mo><mo separator="true">,</mo><msub><mi>β</mi><mi>n</mi></msub></mrow><annotation encoding="application/x-tex">\beta_0, \beta_1, \ldots, \beta_n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05278em;">β</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.05278em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05278em;">β</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.05278em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="minner">…</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05278em;">β</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:-0.05278em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>。其中 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>β</mi><mn>0</mn></msub></mrow><annotation encoding="application/x-tex">\beta_0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05278em;">β</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.05278em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> 是截距，<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>β</mi><mn>1</mn></msub><mo separator="true">,</mo><mo>…</mo><mo separator="true">,</mo><msub><mi>β</mi><mi>n</mi></msub></mrow><annotation encoding="application/x-tex">\beta_1, \ldots, \beta_n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05278em;">β</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.05278em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="minner">…</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05278em;">β</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:-0.05278em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> 是各自变量的系数。</p><h3 id="模型表示"><a class="markdownIt-Anchor" href="#模型表示"></a> 模型表示</h3><p>在一元线性回归（只有一个自变量）中，模型可以表示为：<br /><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>y</mi><mo>=</mo><msub><mi>β</mi><mn>0</mn></msub><mo>+</mo><msub><mi>β</mi><mn>1</mn></msub><mi>x</mi><mo>+</mo><mi>ϵ</mi></mrow><annotation encoding="application/x-tex">y = \beta_0 + \beta_1x + \epsilon</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05278em;">β</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.05278em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05278em;">β</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.05278em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathnormal">ϵ</span></span></span></span><br />在多元线性回归（有多个自变量）中，模型可以表示为：<br /><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>y</mi><mo>=</mo><msub><mi>β</mi><mn>0</mn></msub><mo>+</mo><msub><mi>β</mi><mn>1</mn></msub><msub><mi>x</mi><mn>1</mn></msub><mo>+</mo><msub><mi>β</mi><mn>2</mn></msub><msub><mi>x</mi><mn>2</mn></msub><mo>+</mo><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mo>+</mo><msub><mi>β</mi><mi>n</mi></msub><msub><mi>x</mi><mi>n</mi></msub><mo>+</mo><mi>ϵ</mi></mrow><annotation encoding="application/x-tex">y = \beta_0 + \beta_1x_1 + \beta_2x_2 + ... + \beta_nx_n + \epsilon</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05278em;">β</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.05278em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05278em;">β</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.05278em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05278em;">β</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.05278em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord">.</span><span class="mord">.</span><span class="mord">.</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05278em;">β</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:-0.05278em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathnormal">ϵ</span></span></span></span><br />其中<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>ϵ</mi></mrow><annotation encoding="application/x-tex">\epsilon</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathnormal">ϵ</span></span></span></span> 是误差项，表示模型未能捕捉到的随机变异。</p><h3 id="参数估计"><a class="markdownIt-Anchor" href="#参数估计"></a> 参数估计</h3><p>线性回归模型的参数通常使用最小二乘法（Least Squares Method）来估计，目的是找到使所有观测值的残差平方和（RSS，Residual Sum of Squares）最小的参数值。数学上，这可以通过求解最小化问题来实现：</p><p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><munder><mo><mi>min</mi><mo>⁡</mo></mo><mrow><msub><mi>β</mi><mn>0</mn></msub><mo separator="true">,</mo><msub><mi>β</mi><mn>1</mn></msub><mo separator="true">,</mo><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mo separator="true">,</mo><msub><mi>β</mi><mi>n</mi></msub></mrow></munder><munderover><mo>∑</mo><mrow><mi>i</mi><mo>=</mo><mn>1</mn></mrow><mi>N</mi></munderover><mo stretchy="false">(</mo><msub><mi>y</mi><mi>i</mi></msub><mo>−</mo><mo stretchy="false">(</mo><msub><mi>β</mi><mn>0</mn></msub><mo>+</mo><msub><mi>β</mi><mn>1</mn></msub><msub><mi>x</mi><mrow><mi>i</mi><mn>1</mn></mrow></msub><mo>+</mo><msub><mi>β</mi><mn>2</mn></msub><msub><mi>x</mi><mrow><mi>i</mi><mn>2</mn></mrow></msub><mo>+</mo><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mo>+</mo><msub><mi>β</mi><mi>n</mi></msub><msub><mi>x</mi><mrow><mi>i</mi><mi>n</mi></mrow></msub><mo stretchy="false">)</mo><msup><mo stretchy="false">)</mo><mn>2</mn></msup></mrow><annotation encoding="application/x-tex">\min_{\beta_0, \beta_1, ..., \beta_n} \sum_{i=1}^{N} (y_i - (\beta_0 + \beta_1x_{i1} + \beta_2x_{i2} + ... + \beta_nx_{in}))^2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:3.106005em;vertical-align:-1.277669em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.66786em;"><span style="top:-2.3478920000000003em;margin-left:0em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.05278em;">β</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31731428571428577em;"><span style="top:-2.357em;margin-left:-0.05278em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span><span class="mpunct mtight">,</span><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.05278em;">β</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31731428571428577em;"><span style="top:-2.357em;margin-left:-0.05278em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span><span class="mpunct mtight">,</span><span class="mord mtight">.</span><span class="mord mtight">.</span><span class="mord mtight">.</span><span class="mpunct mtight">,</span><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.05278em;">β</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.16454285714285719em;"><span style="top:-2.357em;margin-left:-0.05278em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mathnormal mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span></span></span></span><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span><span class="mop">min</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.8882159999999999em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.8283360000000002em;"><span style="top:-1.872331em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span><span class="mrel mtight">=</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.050005em;"><span class="pstrut" style="height:3.05em;"></span><span><span class="mop op-symbol large-op">∑</span></span></span><span style="top:-4.3000050000000005em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.10903em;">N</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.277669em;"><span></span></span></span></span></span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05278em;">β</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.05278em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05278em;">β</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.05278em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05278em;">β</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.05278em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span><span class="mord mtight">2</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord">.</span><span class="mord">.</span><span class="mord">.</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.1141079999999999em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05278em;">β</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:-0.05278em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span><span class="mord mathnormal mtight">n</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641079999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span></span></span></p><h3 id="假设"><a class="markdownIt-Anchor" href="#假设"></a> 假设</h3><p>线性回归模型基于几个关键假设：</p><ol><li><strong>线性关系</strong>：因变量和自变量之间的关系是线性的。</li><li><strong>独立性</strong>：观测值之间是相互独立的。</li><li><strong>同方差性</strong>：误差项的方差对于所有观测值都是相同的。</li><li><strong>无自相关</strong>：误差项之间不存在自相关（即序列相关）。</li><li><strong>正态性</strong>：误差项是正态分布的。</li></ol><h3 id="评估指标"><a class="markdownIt-Anchor" href="#评估指标"></a> 评估指标</h3><ul><li><strong>均方误差（MSE）</strong>：衡量预测值和实际值之间差异的平均平方值。</li><li><strong>决定系数（R-squared）</strong>：表示模型解释的数据变异性的比例。</li></ul><h3 id="应用"><a class="markdownIt-Anchor" href="#应用"></a> 应用</h3><p>线性回归广泛应用于各种领域，包括经济学、金融学、社会科学、物理学等，用于预测和分析变量之间的关系。</p><h3 id="注意事项"><a class="markdownIt-Anchor" href="#注意事项"></a> 注意事项</h3><ul><li>线性回归对异常值敏感。</li><li>需要满足模型的假设条件。</li><li>在处理非线性关系时，可能需要使用多项式回归或其他非线性模型。</li></ul><p>线性回归虽然简单，但它是理解更复杂模型的基础，并且在许多实际问题中仍然非常有效。</p><h2 id="分类classification"><a class="markdownIt-Anchor" href="#分类classification"></a> 分类（Classification）</h2><p>分类是另一种预测模型，它涉及将数据分到预定义的类别或标签中。分类模型通常用于识别模式，并根据这些模式对数据进行分类。</p><p><strong>关键特点：</strong></p><ul><li><strong>目标变量</strong>：离散值，通常是预定义的类别。</li><li><strong>输出</strong>：一个类别或标签。</li><li><strong>例子</strong>：逻辑回归、决策树分类、支持向量机（SVM）、随机森林分类、神经网络等。</li></ul><p><strong>应用场景</strong>：</p><ul><li>垃圾邮件检测</li><li>图像识别</li><li>信用评分</li></ul><h2 id="主要区别"><a class="markdownIt-Anchor" href="#主要区别"></a> 主要区别</h2><ul><li><strong>目标变量的类型</strong>：回归分析处理连续数值，而分类处理离散的类别。</li><li><strong>输出的性质</strong>：回归输出一个数值，分类输出一个类别。</li><li><strong>损失函数</strong>：回归通常使用均方误差（MSE）等，分类则使用交叉熵损失等。</li></ul><h3 id="逻辑回归"><a class="markdownIt-Anchor" href="#逻辑回归"></a> 逻辑回归</h3><p>逻辑回归（Logistic Regression）是一种广泛使用的统计学习方法，用于解决分类问题。尽管它的名字中包含“回归”，但实际上它主要用于分类任务，特别是二分类问题。逻辑回归通过使用逻辑函数（也称为Sigmoid函数）来估计概率，从而将线性回归的输出转换为0到1之间的概率值，这个概率值可以用来预测样本属于某一类别的概率。</p><h3 id="基本概念-2"><a class="markdownIt-Anchor" href="#基本概念-2"></a> 基本概念</h3><ul><li><strong>因变量（Dependent Variable）</strong>：通常是二元的，表示为<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>y</mi></mrow><annotation encoding="application/x-tex">y</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span></span></span></span>，取值为0或1。</li><li><strong>自变量（Independent Variables）</strong>：用于预测因变量的变量，表示为<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>x</mi><mn>1</mn></msub><mo separator="true">,</mo><msub><mi>x</mi><mn>2</mn></msub><mo separator="true">,</mo><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mo separator="true">,</mo><msub><mi>x</mi><mi>n</mi></msub></mrow><annotation encoding="application/x-tex">x_1, x_2, ..., x_n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">.</span><span class="mord">.</span><span class="mord">.</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>。</li><li><strong>参数（Parameters）</strong>：模型中的系数，用于确定自变量和因变量之间的关系，表示为<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>β</mi><mn>0</mn></msub><mo separator="true">,</mo><msub><mi>β</mi><mn>1</mn></msub><mo separator="true">,</mo><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mo separator="true">,</mo><msub><mi>β</mi><mi>n</mi></msub></mrow><annotation encoding="application/x-tex">\beta_0, \beta_1, ..., \beta_n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05278em;">β</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.05278em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05278em;">β</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.05278em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">.</span><span class="mord">.</span><span class="mord">.</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05278em;">β</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:-0.05278em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>。</li></ul><h3 id="模型表示-2"><a class="markdownIt-Anchor" href="#模型表示-2"></a> 模型表示</h3><p>逻辑回归模型可以表示为：</p><p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>P</mi><mo stretchy="false">(</mo><mi>y</mi><mo>=</mo><mn>1</mn><mi mathvariant="normal">∣</mi><mi>X</mi><mo stretchy="false">)</mo><mo>=</mo><mfrac><mn>1</mn><mrow><mn>1</mn><mo>+</mo><msup><mi>e</mi><mrow><mo>−</mo><mo stretchy="false">(</mo><msub><mi>β</mi><mn>0</mn></msub><mo>+</mo><msub><mi>β</mi><mn>1</mn></msub><msub><mi>x</mi><mn>1</mn></msub><mo>+</mo><msub><mi>β</mi><mn>2</mn></msub><msub><mi>x</mi><mn>2</mn></msub><mo>+</mo><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mo>+</mo><msub><mi>β</mi><mi>n</mi></msub><msub><mi>x</mi><mi>n</mi></msub><mo stretchy="false">)</mo></mrow></msup></mrow></mfrac></mrow><annotation encoding="application/x-tex">P(y=1|X) = \frac{1}{1 + e^{-(\beta_0 + \beta_1x_1 + \beta_2x_2 + ... + \beta_nx_n)}}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mord">∣</span><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:2.10877em;vertical-align:-0.78733em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.32144em;"><span style="top:-2.2960000000000003em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathnormal">e</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.814em;"><span style="top:-2.989em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">−</span><span class="mopen mtight">(</span><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.05278em;">β</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31731428571428577em;"><span style="top:-2.357em;margin-left:-0.05278em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span><span class="mbin mtight">+</span><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.05278em;">β</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31731428571428577em;"><span style="top:-2.357em;margin-left:-0.05278em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span><span class="mord mtight"><span class="mord mathnormal mtight">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31731428571428577em;"><span style="top:-2.357em;margin-left:0em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span><span class="mbin mtight">+</span><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.05278em;">β</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31731428571428577em;"><span style="top:-2.357em;margin-left:-0.05278em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span><span class="mord mtight"><span class="mord mathnormal mtight">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31731428571428577em;"><span style="top:-2.357em;margin-left:0em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span><span class="mbin mtight">+</span><span class="mord mtight">.</span><span class="mord mtight">.</span><span class="mord mtight">.</span><span class="mbin mtight">+</span><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.05278em;">β</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.16454285714285719em;"><span style="top:-2.357em;margin-left:-0.05278em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mathnormal mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span><span class="mord mtight"><span class="mord mathnormal mtight">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.16454285714285719em;"><span style="top:-2.357em;margin-left:0em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mathnormal mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span><span class="mclose mtight">)</span></span></span></span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.78733em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></span></p><p>其中<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>P</mi><mo stretchy="false">(</mo><mi>y</mi><mo>=</mo><mn>1</mn><mi mathvariant="normal">∣</mi><mi>X</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">P(y=1|X)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mord">∣</span><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="mclose">)</span></span></span></span>是给定自变量<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>X</mi></mrow><annotation encoding="application/x-tex">X</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.07847em;">X</span></span></span></span>时，因变量<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>y</mi></mrow><annotation encoding="application/x-tex">y</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span></span></span></span>取值为1的概率。逻辑函数（Sigmoid函数）定义为：</p><p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>σ</mi><mo stretchy="false">(</mo><mi>z</mi><mo stretchy="false">)</mo><mo>=</mo><mfrac><mn>1</mn><mrow><mn>1</mn><mo>+</mo><msup><mi>e</mi><mrow><mo>−</mo><mi>z</mi></mrow></msup></mrow></mfrac></mrow><annotation encoding="application/x-tex">\sigma(z) = \frac{1}{1 + e^{-z}}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">σ</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.04398em;">z</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:2.09077em;vertical-align:-0.7693300000000001em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.32144em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathnormal">e</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.697331em;"><span style="top:-2.989em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">−</span><span class="mord mathnormal mtight" style="margin-right:0.04398em;">z</span></span></span></span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.7693300000000001em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></span></p><p>其中<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>z</mi><mo>=</mo><msub><mi>β</mi><mn>0</mn></msub><mo>+</mo><msub><mi>β</mi><mn>1</mn></msub><msub><mi>x</mi><mn>1</mn></msub><mo>+</mo><msub><mi>β</mi><mn>2</mn></msub><msub><mi>x</mi><mn>2</mn></msub><mo>+</mo><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mo>+</mo><msub><mi>β</mi><mi>n</mi></msub><msub><mi>x</mi><mi>n</mi></msub></mrow><annotation encoding="application/x-tex">z = \beta_0 + \beta_1x_1 + \beta_2x_2 + ... + \beta_nx_n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.04398em;">z</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05278em;">β</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.05278em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05278em;">β</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.05278em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05278em;">β</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.05278em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord">.</span><span class="mord">.</span><span class="mord">.</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05278em;">β</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:-0.05278em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>。</p><h3 id="参数估计-2"><a class="markdownIt-Anchor" href="#参数估计-2"></a> 参数估计</h3><p>逻辑回归的参数通常使用最大似然估计（Maximum Likelihood Estimation, MLE）来估计。目标是找到最大化观测数据似然函数的参数值。数学上，这可以通过求解优化问题来实现，通常使用梯度下降或其变体（如随机梯度下降、牛顿法等）来找到最优参数。</p><h3 id="假设-2"><a class="markdownIt-Anchor" href="#假设-2"></a> 假设</h3><p>逻辑回归模型基于以下假设：</p><ol><li><strong>线性关系</strong>：自变量和因变量之间的关系可以通过线性组合来近似。</li><li><strong>概率输出</strong>：模型的输出是样本属于正类的概率。</li></ol><h3 id="评估指标-2"><a class="markdownIt-Anchor" href="#评估指标-2"></a> 评估指标</h3><ul><li><strong>准确率（Accuracy）</strong>：正确预测的比例。</li><li><strong>混淆矩阵（Confusion Matrix）</strong>：显示真正例（True Positives）、假正例（False Positives）、真反例（True Negatives）和假反例（False Negatives）的数量。</li><li><strong>精确率（Precision）</strong>：真正例占所有预测为正例的比例。</li><li><strong>召回率（Recall）</strong>：真正例占所有实际正例的比例。</li><li><strong>F1分数（F1 Score）</strong>：精确率和召回率的调和平均。</li></ul><h3 id="应用-2"><a class="markdownIt-Anchor" href="#应用-2"></a> 应用</h3><p>逻辑回归广泛应用于各种领域，包括医学、金融、社会科学等，用于预测和分类任务，如信用评分、疾病诊断、垃圾邮件检测等。</p><h3 id="注意事项-2"><a class="markdownIt-Anchor" href="#注意事项-2"></a> 注意事项</h3><ul><li>逻辑回归对自变量的缩放和异常值敏感。</li><li>它假设数据是线性可分的，这在某些情况下可能不成立。</li><li>逻辑回归不直接提供概率的置信区间。</li></ul><p>逻辑回归是一种强大且易于实现的分类算法，尤其适合于二分类问题，并且在实际应用中非常受欢迎。</p><h2 id="小总结"><a class="markdownIt-Anchor" href="#小总结"></a> 小总结</h2><p>回归和分类是机器学习中的基本任务，它们各自适用于不同类型的问题。选择哪种方法取决于问题的性质和所需解决的具体任务。在实际应用中，这两种方法都有广泛的应用，并且经常需要根据数据的特点和业务需求来选择合适的模型。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;回归（Regression）和分类（Classification）是机器学习中两种常见的监督学习任务，它们在目标和方法上有所不同。&lt;/p&gt;
&lt;h2 id=&quot;回归regression&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#回归regress</summary>
      
    
    
    
    <category term="learn" scheme="https://sherry14love.github.io/categories/learn/"/>
    
    
    <category term="卷" scheme="https://sherry14love.github.io/tags/%E5%8D%B7/"/>
    
    <category term="数据分析" scheme="https://sherry14love.github.io/tags/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/"/>
    
  </entry>
  
  <entry>
    <title>GPT食用分享</title>
    <link href="https://sherry14love.github.io/2024/06/01/Tool/ChatGPTfree/"/>
    <id>https://sherry14love.github.io/2024/06/01/Tool/ChatGPTfree/</id>
    <published>2024-05-31T16:00:00.000Z</published>
    <updated>2024-10-27T15:25:02.162Z</updated>
    
    <content type="html"><![CDATA[<h2 id="gpt4"><a class="markdownIt-Anchor" href="#gpt4"></a> GPT4</h2><blockquote><p>注意，套壳网站注册的时候，千万别用自己的qq邮箱还有手机号，密码记得随机生成，容易被开盒（亲身吃瓜）</p></blockquote><h3 id="官网"><a class="markdownIt-Anchor" href="#官网"></a> <code>官网</code>:</h3><blockquote><ol><li><em>openAI</em>⭐⭐⭐（什么实力就不用说了吧）：<a href="https://chat.openai.com/">https://chat.openai.com/</a></li></ol></blockquote><blockquote><ol start="2"><li><em>Claude</em>⭐⭐⭐（唯一一家在正面上能力比OpenAI强的）：<a href="https://claude.ai/">https://claude.ai/</a></li></ol></blockquote><blockquote><ol start="3"><li>Copilot⭐⭐⭐（最早联网的AI，微软的心头宝）：<a href="https://copilot.microsoft.com/">https://copilot.microsoft.com/</a></li></ol></blockquote><blockquote><ol start="4"><li><em>DeepSeek</em>（写报告不错，就是敏感词太严格）：<a href="https://chat.deepseek.com/">https://chat.deepseek.com/</a></li></ol></blockquote><blockquote><ol start="5"><li>智谱清言（国内的免费挡NO.1了几乎）：<a href="https://chatglm.cn/">https://chatglm.cn/</a></li></ol></blockquote><blockquote><ol start="6"><li>Kimi（除了上传文档多之外，逻辑能力有点堪忧）：<a href="https://kimi.moonshot.cn/">https://kimi.moonshot.cn/</a></li></ol></blockquote><blockquote><ol start="7"><li>通义千问（没细用过，不太清楚）：<a href="https://tongyi.aliyun.com/qianwen/">https://tongyi.aliyun.com/qianwen/</a></li></ol></blockquote><blockquote><ol start="8"><li>讯飞星火（没细用过，不太清楚）：<a href="https://xinghuo.xfyun.cn/">https://xinghuo.xfyun.cn/</a></li></ol></blockquote><blockquote><ol start="9"><li>文心一言（嗯…3.5一言难尽）：<a href="https://yiyan.baidu.com/">https://yiyan.baidu.com/</a></li></ol></blockquote><blockquote><ol start="10"><li>豆包（逻辑能力还可以）：<a href="https://www.doubao.com/chat/">https://www.doubao.com/chat/</a></li></ol></blockquote><blockquote><ol start="11"><li>万知AI（恩…一般）：<a href="https://www.wanzhi.com/">https://www.wanzhi.com/</a></li></ol></blockquote><blockquote><ol start="12"><li>复仇者联盟AI（整合了国内的所有的AI）：<a href="https://bot.360.com/">https://bot.360.com/</a></li></ol></blockquote><blockquote><ol start="13"><li>知乎直答：<a href="https://zhida.zhihu.com/">https://zhida.zhihu.com/</a></li></ol></blockquote><h3 id="套壳-有删除线的是已失效的"><a class="markdownIt-Anchor" href="#套壳-有删除线的是已失效的"></a> <code>套壳</code>: 有删除线的是已失效的</h3><p><strong>注意，有<code>国内直连</code>标志的，如果用手机或者电脑访问不成功，基本上是你所在地区的运营商不支持这个网址，换一个运营商或者借助魔法，就可以访问了(也有概率是挂了)。</strong></p><ol><li><p>Poe（每日10次4o）：<a href="https://poe.com/">https://poe.com/</a></p></li><li><p>Coze（现在不推荐了）：<a href="https://www.coze.com/">https://www.coze.com/</a></p></li><li><p>慧AI（<code>国内直连</code>、每日150次4o）：<a href="https://huiai.io/signup/?code=2926">https://huiai.io/signup/?code=2926</a></p></li><li><p>Arena（<code>国内直连</code>、免费，拥挤）：<a href="https://arena.lmsys.org/">https://arena.lmsys.org/</a></p></li><li><p>ChatGate（<code>国内直连</code>、所有模型可用但不能上传文件）：<a href="https://chatgate.ai/">https://chatgate.ai/</a></p></li><li><p><s>ChatData（<code>国内直连</code>、免费可用所有模型，不稳定）</s>：<a href="https://chat.chatdata.online/chat">https://chat.chatdata.online/chat</a></p></li><li><p><em>Aicnn</em>（<code>国内直连</code>、联系拉姆）：<a href="http://aicnn.cn/loginPage?aff=zypTghoVaW">http://aicnn.cn/loginPage?aff=zypTghoVaW</a></p></li></ol><!-- *Aicnn*：http://www.aicnn.cn/oaifree --><ol start="8"><li><p><s>套壳1(不推荐）</s>： <a href="https://oai.aitopk.com/">https://oai.aitopk.com/</a></p></li><li><p><s>套壳2（可用4o）</s>： <a href="https://share.bpj666.xyz/">https://share.bpj666.xyz/</a></p></li><li><p>套壳3（<code>国内直连</code>、可体验4）：<a href="https://jvip.ccaiai.com/#/chat/1002">https://jvip.ccaiai.com/#/chat/1002</a></p></li><li><p>套壳4（免费公共账户-4）：<a href="https://share.wendaalpha.net/">https://share.wendaalpha.net/</a></p></li><li><p><s>套壳5（可用4o）</s>：<a href="https://jialeopen.love/chat/#/">https://jialeopen.love/chat/#/</a></p></li><li><p>WRTN（免费4，韩国）：<a href="https://wrtn.ai/">https://wrtn.ai/</a></p></li><li><p>Dify（免费Claude）：<a href="https://cloud.dify.ai/">https://cloud.dify.ai/</a></p></li><li><p>Merlin（<code>国内直连</code>、每日4o四次）：<a href="https://www.getmerlin.in/zh-CN/chat">https://www.getmerlin.in/zh-CN/chat</a></p></li><li><p><s>LibreChat（<code>国内直连</code>、慈善家，免费）</s>：<a href="https://get.multibotapp.com/c/new">https://get.multibotapp.com/c/new</a></p></li><li><p>OhMyGpt（不推荐）：<a href="https://www.ohmygpt.com/">https://www.ohmygpt.com/</a></p></li><li><p>Free For Ai（<code>国内直连</code>、慈善家，Open WebUI）：<a href="https://ffa.chat/">https://ffa.chat/</a></p></li><li><p>ChandlerAi（<code>国内直连</code>、每月四十次）:<a href="https://mychandler.bet/">https://mychandler.bet/</a></p></li></ol><!-- 20. 套壳6（50次3小时4o）：https://share.sydney-ai.com/ --><ol start="20"><li><p>套壳6（<code>国内直连</code>、50次3小时4o）：<a href="https://share.tu-zi.com/">https://share.tu-zi.com/</a></p></li><li><p>套壳7（<code>国内直连</code>、一日五次4o）：<a href="https://gpt4o.so/zh-CN/app">https://gpt4o.so/zh-CN/app</a></p></li><li><p>套壳8（<code>国内直连</code>、模型变少了）：<a href="https://chat.sorapi.dev/">https://chat.sorapi.dev/</a></p></li><li><p>套壳9（<code>国内直连</code>、领悟AI，免费4o）：<a href="https://www.chatgpt.sh/?inviteCode=ad824001">https://www.chatgpt.sh/?inviteCode=ad824001</a></p></li><li><p><s>morphic（<code>国内直连</code>、免费4o、Claude3.5）</s>：<a href="https://www.morphic.sh/">https://www.morphic.sh/</a></p></li><li><p>julius（<code>国内直连</code>、<code>专攻</code>数据分析的AI）：<a href="https://julius.ai/">https://julius.ai/</a></p></li><li><p>套壳9（<code>国内直连</code>、Claude3.5）：<a href="https://www.zaiwen.top/">https://www.zaiwen.top/</a></p></li><li><p>hiplotAI（<code>国内直连</code>、<code>专攻</code>生物信息分析）：<a href="https://hiplot.cn/?lang=zh_cn">https://hiplot.cn/?lang=zh_cn</a></p></li><li><p><s>VecMul Chat(<code>国内直连</code>、可联系拉姆)</s>:<a href="https://www.vecmul.com?inviteCode=HBFLI9K7">https://www.vecmul.com?inviteCode=HBFLI9K7</a></p></li><li><p>wordware(<code>国内直连</code>、目前免费):<a href="https://www.wordware.ai/">https://www.wordware.ai/</a></p></li><li><p>SambaVova(Meta-Llama3.1-405B):<a href="https://sambanova.ai/">https://sambanova.ai/</a></p></li><li><p>套壳10(<code>国内直连</code>、目前免费405B、Claude3.5)：<a href="https://openai-x.net/">https://openai-x.net/</a></p></li><li><p>RawChat公益站点(<code>国内直连</code>、Claude3.5)：<a href="https://kelaode.ai/">https://kelaode.ai/</a></p></li><li><p>套壳11(<code>国内直连</code>、4o和Claude3.5万完全免费)：<a href="https://aichatru.ru/zh-CN/app">https://aichatru.ru/zh-CN/app</a></p></li><li><p><strong>Notiamond</strong>(每月100000次免费请求额度)：<a href="https://www.notdiamond.ai/">https://www.notdiamond.ai/</a></p></li><li><p>GizAI(所有模型免费，包括O1):<a href="https://app.giz.ai/shared">https://app.giz.ai/shared</a></p></li></ol><h2 id="ai搜索"><a class="markdownIt-Anchor" href="#ai搜索"></a> AI搜索</h2><ol><li><p>清华的AMiner（<code>国内直连</code>、AI学术搜索平台）：<a href="https://www.aminer.cn/">https://www.aminer.cn/</a></p></li><li><p>秘塔AI（<code>国内直连</code>、全网、学术、文库、播客搜索AI）：<a href="https://metaso.cn/">https://metaso.cn/</a></p></li><li><p>ScholarAI（学术AI）<a href="https://app.scholarai.io/home">https://app.scholarai.io/home</a></p></li><li><p>DevvAI（特色：有GitHub库搜索）：<a href="https://devv.ai/zh/referral?code=driyivdqpn9c">https://devv.ai/zh/referral?code=driyivdqpn9c</a></p></li><li><p>Genspark（在检索某些信息方面个人感觉比秘塔好一点）：<a href="https://www.genspark.ai">https://www.genspark.ai</a></p></li><li><p>Perplexity（AI搜索鼻祖）：<a href="https://www.perplexity.ai/">https://www.perplexity.ai/</a></p></li><li><p>Phind（有IDE支持，还可以）<a href="https://www.phind.com/">https://www.phind.com/</a></p></li><li><p><strong>Copilot</strong>（最早联网的AI，涵盖AI搜索的功能）：<a href="https://copilot.microsoft.com/">https://copilot.microsoft.com/</a></p></li><li><p>百小应（<code>国内直连</code>、百度的）：<a href="https://ying.baichuan-ai.com/chat">https://ying.baichuan-ai.com/chat</a></p></li><li><p>360搜索（<code>国内直连</code>、360）：<a href="https://so.360.com/">https://so.360.com/</a></p></li><li><p>博查AI（<code>国内直连</code>、提供联网搜索、AI搜索、智能体搜索等API服务）：<a href="https://bochaai.com/">https://bochaai.com/</a></p></li><li><p>天工AI（<code>国内直连</code>）：<a href="https://www.tiangong.cn/">https://www.tiangong.cn/</a></p></li><li><p>ThinkAny（<code>国内直连</code>、提供GitHub、twitter、Wikipedia搜索）<a href="https://thinkany.so/zh">https://thinkany.so/zh</a></p></li><li><p>快搜AI（<code>国内直连</code>）：<a href="https://www.kuaisou.com/">https://www.kuaisou.com/</a></p></li><li><p>心流AI（<code>国内直连</code>，阿里巴巴的）:<a href="https://iflow.cn/">https://iflow.cn/</a></p></li><li><p>开搜AI (<code>国内直连</code>):<a href="https://kaisouai.com/?from=wananxz">https://kaisouai.com/?from=wananxz</a></p></li></ol><h2 id="ai导航站"><a class="markdownIt-Anchor" href="#ai导航站"></a> <code>AI导航站</code>:</h2><ol><li><p><em>GPT公益导航</em>：<a href="https://dongfang.flowus.cn/">https://dongfang.flowus.cn/</a></p></li><li><p>摸鱼技术网：<a href="https://xn--v4q818bf34b.com/">https://摸鱼儿.com/</a></p></li><li><p>Github统计免费GPT导航网页：<a href="https://github.com/LiLittleCat/awesome-free-chatgpt?tab=readme-ov-file#-chatgpt-%E9%95%9C%E5%83%8F%E5%88%97%E8%A1%A8">https://github.com/LiLittleCat/awesome-free-chatgpt?tab=readme-ov-file#-chatgpt-镜像列表</a></p></li><li><p>非猪ai导航：<a href="https://feizhuke.com/#term-6606">https://feizhuke.com/#term-6606</a></p></li><li><p>潮点AI导航：<a href="https://aichaodian.com/">https://aichaodian.com/</a></p></li><li><p>公益RawChat：<a href="https://sharedchat.cn/">https://sharedchat.cn/</a></p></li><li><p>AI工具集：<a href="https://ai-bot.cn/">https://ai-bot.cn/</a></p></li></ol><h2 id="ai-排行榜"><a class="markdownIt-Anchor" href="#ai-排行榜"></a> AI 排行榜：</h2><ol><li><p>aider：<a href="https://aider.chat/docs/leaderboards/">https://aider.chat/docs/leaderboards/</a></p></li><li><p>Arena：<a href="https://arena.lmsys.org/">https://arena.lmsys.org/</a></p></li><li><p>全球百大 AI 排行榜:<a href="https://a16z.com/100-gen-ai-apps-3/">https://a16z.com/100-gen-ai-apps-3/</a></p></li></ol><blockquote><p>声明:本文旨在分享个人对各种人工智能工具的使用体验和主观看法,仅供参考。如有不当之处可能引起不适,敬请谅解并欢迎与作者联系,拉姆将及时修改或删除相关内容。</p></blockquote><p><em>本文秉持互联网开放共享精神,无任何商业目的。若不慎侵犯了您的权益,烦请及时告知,拉姆将立即采取妥善措施。</em></p><p><em>感谢您的理解与支持。</em></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;gpt4&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#gpt4&quot;&gt;&lt;/a&gt; GPT4&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;注意，套壳网站注册的时候，千万别用自己的qq邮箱还有手机号，密码记得随机生成，容易被开盒（亲身吃瓜）&lt;/p</summary>
      
    
    
    
    <category term="Tool" scheme="https://sherry14love.github.io/categories/Tool/"/>
    
    
    <category term="GPT" scheme="https://sherry14love.github.io/tags/GPT/"/>
    
  </entry>
  
  <entry>
    <title>数据分析之特征提取-PCA</title>
    <link href="https://sherry14love.github.io/2024/05/31/learn/data4/"/>
    <id>https://sherry14love.github.io/2024/05/31/learn/data4/</id>
    <published>2024-05-30T16:00:00.000Z</published>
    <updated>2024-09-26T07:27:13.624Z</updated>
    
    <content type="html"><![CDATA[<h2 id="常见方法"><a class="markdownIt-Anchor" href="#常见方法"></a> 常见方法</h2><p>在数据分析中，特征提取是一个关键步骤，它涉及从原始数据中提取有意义的特征，以便用于后续的分析和建模。以下是一些常用的特征提取方法：</p><ol><li><p><strong>主成分分析（PCA）</strong>：</p><ul><li>PCA是一种线性降维技术，通过将数据投影到新的正交坐标系中，提取出数据的主要成分。这些主成分是原始特征的线性组合，能够最大程度地保留数据的方差。</li></ul></li><li><p><strong>独立成分分析（ICA）</strong>：</p><ul><li>ICA是一种用于分离混合信号的技术，它假设数据是由独立的非高斯信号源线性混合而成的。ICA的目标是找到这些独立的信号源。</li></ul></li><li><p><strong>线性判别分析（LDA）</strong>：</p><ul><li>LDA是一种监督学习方法，用于在保持类间差异最大化的同时，减少数据的维度。LDA通过找到一个投影方向，使得不同类别的数据点尽可能分开。</li></ul></li><li><p><strong>t-分布随机邻域嵌入（t-SNE）</strong>：</p><ul><li>t-SNE是一种用于高维数据可视化的非线性降维技术。它通过保持数据点之间的相似性关系，将高维数据映射到低维空间。</li></ul></li><li><p><strong>局部线性嵌入（LLE）</strong>：</p><ul><li>LLE是一种非线性降维技术，它通过保持数据点之间的局部线性关系，将高维数据映射到低维空间。LLE假设每个数据点可以由其邻域点的线性组合近似表示。</li></ul></li><li><p><strong>自动编码器（Autoencoders）</strong>：</p><ul><li>自动编码器是一种神经网络模型，用于无监督学习中的特征提取。它通过将输入数据压缩到一个低维编码，然后再解码回原始维度，学习数据的紧凑表示。</li></ul></li><li><p><strong>小波变换（Wavelet Transform）</strong>：</p><ul><li>小波变换是一种信号处理技术，用于将信号分解成不同频率的子信号。它在时间-频率域中提供了一种灵活的分析方法，适用于非平稳信号的特征提取。</li></ul></li><li><p><strong>傅里叶变换（Fourier Transform）</strong>：</p><ul><li>傅里叶变换是一种将信号从时域转换到频域的技术。它可以将信号分解成不同频率的正弦波成分，适用于周期性信号的特征提取。</li></ul></li><li><p><strong>词嵌入（Word Embeddings）</strong>：</p><ul><li>词嵌入是一种自然语言处理技术，用于将单词表示为低维连续向量。常用的词嵌入方法包括Word2Vec、GloVe和FastText等。</li></ul></li><li><p><strong>特征哈希（Feature Hashing）</strong>：</p><ul><li>特征哈希是一种用于处理高维稀疏特征的技术。它通过将特征映射到一个固定大小的哈希空间，减少特征的维度，同时保持特征的多样性。</li></ul></li></ol><p>这些方法各有特点，适用于不同的数据类型和分析任务。在实际应用中，选择合适的特征提取方法需要根据具体的数据和分析目标来决定。</p><h2 id="pca"><a class="markdownIt-Anchor" href="#pca"></a> PCA</h2><p>主成分分析（Principal Component Analysis，简称PCA）是一种统计方法，用于将一组可能相关的变量转换为一组线性不相关的变量，这些新的变量称为主成分。PCA的主要目标是降维，同时尽可能保留原始数据中的变异信息。以下是PCA的详细介绍：</p><h3 id="基本原理"><a class="markdownIt-Anchor" href="#基本原理"></a> 基本原理</h3><p>PCA的基本原理是通过线性变换将原始数据投影到一个新的坐标系中，使得投影后的数据在新的坐标系中的第一个坐标（即第一主成分）具有最大的方差，第二个坐标（即第二主成分）具有次大的方差，依此类推。每个主成分都是原始变量的线性组合，且主成分之间相互正交（即不相关）。</p><h3 id="步骤"><a class="markdownIt-Anchor" href="#步骤"></a> 步骤</h3><p>PCA的实施通常包括以下步骤：</p><h4 id="数据标准化"><a class="markdownIt-Anchor" href="#数据标准化"></a> 数据标准化</h4><p>在进行PCA之前，通常需要对数据进行标准化处理，使得每个变量的均值为0，方差为1。这是因为PCA对变量的尺度非常敏感，如果不进行标准化，方差较大的变量将在主成分分析中占据主导地位。</p><h4 id="计算协方差矩阵"><a class="markdownIt-Anchor" href="#计算协方差矩阵"></a> 计算协方差矩阵</h4><p>协方差矩阵反映了变量之间的线性关系。通过计算标准化后数据的协方差矩阵，可以了解变量之间的相关性。</p><h4 id="计算特征值和特征向量"><a class="markdownIt-Anchor" href="#计算特征值和特征向量"></a> 计算特征值和特征向量</h4><p>协方差矩阵的特征值和特征向量是PCA的核心。特征值表示每个主成分所解释的方差大小，特征向量表示每个主成分的方向。特征值越大，对应的主成分解释的方差越大。</p><h4 id="选择主成分"><a class="markdownIt-Anchor" href="#选择主成分"></a> 选择主成分</h4><p>根据特征值的大小，选择保留的主成分数量。通常的做法是保留特征值大于某个阈值的主成分，或者保留累计解释方差达到一定比例的主成分。</p><h4 id="数据投影"><a class="markdownIt-Anchor" href="#数据投影"></a> 数据投影</h4><p>将原始数据投影到所选择的主成分上，得到降维后的数据。</p><h3 id="应用"><a class="markdownIt-Anchor" href="#应用"></a> 应用</h3><p>PCA广泛应用于数据分析的各个领域，包括但不限于：</p><ul><li><strong>数据降维</strong>：减少数据的维度，去除冗余信息，同时保留主要特征。</li><li><strong>数据可视化</strong>：将高维数据投影到二维或三维空间，便于可视化分析。</li><li><strong>特征提取</strong>：提取数据的主要特征，用于后续的机器学习模型训练。</li><li><strong>噪声过滤</strong>：通过保留主要成分，去除数据中的噪声。</li></ul><h3 id="优缺点"><a class="markdownIt-Anchor" href="#优缺点"></a> 优缺点</h3><h4 id="优点"><a class="markdownIt-Anchor" href="#优点"></a> 优点：</h4><ul><li>计算简单，易于理解和实现。</li><li>能够有效降维，减少数据量，提高计算效率。</li><li>保留了数据的主要结构和变异信息。</li></ul><h4 id="缺点"><a class="markdownIt-Anchor" href="#缺点"></a> 缺点：</h4><ul><li>PCA是一种线性方法，对于非线性数据结构可能效果不佳。</li><li>结果受数据尺度和分布的影响，需要进行标准化处理。</li><li>解释性较差，主成分是原始变量的线性组合，不易于解释其物理或实际意义。</li></ul><h3 id="实现工具"><a class="markdownIt-Anchor" href="#实现工具"></a> 实现工具</h3><p>PCA可以通过多种编程语言和工具实现，如Python中的<code>scikit-learn</code>库、R语言中的<code>prcomp</code>函数等。</p><p>通过PCA，可以在保留数据主要信息的同时，有效地降低数据的维度，从而简化数据分析和模型构建的过程。</p><!-- 主成分分析（Principal Component Analysis，简称PCA）是一种常用的降维技术，主要用于以下几个方面：1. **数据降维**：PCA通过将高维数据投影到低维空间，从而减少数据的维度。这有助于去除数据中的冗余信息，同时保留数据的主要特征。降维后的数据更易于处理和可视化。2. **数据压缩**：通过PCA，可以将高维数据压缩到低维空间，从而减少存储空间和计算资源的消耗。这在处理大规模数据集时尤为重要。3. **去噪**：PCA可以帮助去除数据中的噪声。通过保留主要成分，可以有效地减少噪声对数据分析的影响。4. **数据可视化**：将高维数据降维到二维或三维空间后，可以方便地进行数据可视化。这有助于更好地理解数据的结构和特征。5. **特征提取**：PCA可以用于提取数据的主要特征。通过分析主成分，可以了解数据的主要变化方向，从而更好地理解数据的内在结构。6. **模式识别和分类**：PCA可以用于模式识别和分类任务中，通过降维和特征提取，提高分类算法的性能。7. **数据预处理**：在某些机器学习任务中，PCA可以作为数据预处理的一部分，帮助提高模型的性能和稳定性。 --><p>以下是如何使用<code>scikit-learn</code>进行PCA分析的详细步骤和示例代码：</p><h3 id="安装scikit-learn库"><a class="markdownIt-Anchor" href="#安装scikit-learn库"></a> 安装scikit-learn库</h3><p>如果还没有安装<code>scikit-learn</code>库，可以使用以下命令进行安装：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install scikit-learn</span><br></pre></td></tr></table></figure><h3 id="导入必要的库"><a class="markdownIt-Anchor" href="#导入必要的库"></a> 导入必要的库</h3><p>在进行PCA分析之前，需要导入<code>scikit-learn</code>库以及其他可能用到的库，如<code>numpy</code>和<code>pandas</code>，还有可视化的matplotlib。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">from</span> sklearn.decomposition <span class="keyword">import</span> PCA</span><br><span class="line"><span class="keyword">from</span> sklearn.preprocessing <span class="keyword">import</span> StandardScaler</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br></pre></td></tr></table></figure><h3 id="加载和准备数据"><a class="markdownIt-Anchor" href="#加载和准备数据"></a> 加载和准备数据</h3><p>假设你已经有一个数据集，可以使用<code>pandas</code>读取数据，并进行必要的数据预处理。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 读取数据</span></span><br><span class="line">data = pd.read_csv(<span class="string">&#x27;your_data.csv&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 选择特征列</span></span><br><span class="line">features = [<span class="string">&#x27;feature1&#x27;</span>, <span class="string">&#x27;feature2&#x27;</span>, <span class="string">&#x27;feature3&#x27;</span>, <span class="string">&#x27;feature4&#x27;</span>]</span><br><span class="line">X = data[features] <span class="comment"># 特征矩阵</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 数据标准化</span></span><br><span class="line">scaler = StandardScaler()</span><br><span class="line">X_scaled = scaler.fit_transform(X)</span><br></pre></td></tr></table></figure><h3 id="进行pca分析"><a class="markdownIt-Anchor" href="#进行pca分析"></a> 进行PCA分析</h3><p>使用<code>scikit-learn</code>的<code>PCA</code>类进行PCA分析。可以指定要保留的主成分数量，或者通过设置解释方差的阈值来确定主成分的数量。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建PCA对象，指定要保留的主成分数量</span></span><br><span class="line">pca = PCA(n_components=<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 或者根据解释方差的阈值来确定主成分数量</span></span><br><span class="line"><span class="comment"># pca = PCA(0.95)  # 保留95%的方差</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 拟合数据并进行转换</span></span><br><span class="line">X_pca = pca.fit_transform(X_scaled)</span><br></pre></td></tr></table></figure><h3 id="解释结果"><a class="markdownIt-Anchor" href="#解释结果"></a> 解释结果</h3><p>可以通过查看PCA对象的属性来解释结果，例如每个主成分解释的方差比例和累计解释方差比例。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 每个主成分解释的方差比例</span></span><br><span class="line">explained_variance_ratio = pca.explained_variance_ratio_</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Explained Variance Ratio:&quot;</span>, explained_variance_ratio)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 累计解释方差比例</span></span><br><span class="line">cumulative_explained_variance = np.cumsum(explained_variance_ratio)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Cumulative Explained Variance:&quot;</span>, cumulative_explained_variance)</span><br></pre></td></tr></table></figure><blockquote><p>解释方差比例：表示每个主成分解释的方差占原始数据总方差的比例，帮助我们了解每个主成分对数据变异性的贡献程度。<br />累计解释方差比例：表示前若干个主成分累计解释的方差占原始数据总方差的比例，帮助我们确定需要多少个主成分才能达到一定的解释方差比例，从而进行有效的降维。</p></blockquote><h3 id="可视化结果"><a class="markdownIt-Anchor" href="#可视化结果"></a> 可视化结果</h3><p>可以使用<code>matplotlib</code>库将降维后的数据进行可视化。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line"><span class="comment"># 可视化降维后的数据</span></span><br><span class="line">plt.scatter(X_pca[:, <span class="number">0</span>], X_pca[:, <span class="number">1</span>])</span><br><span class="line">plt.xlabel(<span class="string">&#x27;Principal Component 1&#x27;</span>)</span><br><span class="line">plt.ylabel(<span class="string">&#x27;Principal Component 2&#x27;</span>)</span><br><span class="line">plt.title(<span class="string">&#x27;PCA Visualization&#x27;</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><h3 id="特征提取"><a class="markdownIt-Anchor" href="#特征提取"></a> 特征提取</h3><p>在PCA分析之后，我们可以将降维后的数据作为新的特征集，用于后续的机器学习模型或其他分析任务。以下是如何将PCA结果作为特征提取的示例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 将PCA结果转换为DataFrame</span></span><br><span class="line">pca_features = pd.DataFrame(X_pca, columns=[<span class="string">&#x27;PC1&#x27;</span>, <span class="string">&#x27;PC2&#x27;</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将原始标签（如果有）与新的特征集合并</span></span><br><span class="line"><span class="keyword">if</span> <span class="string">&#x27;label&#x27;</span> <span class="keyword">in</span> data.columns:</span><br><span class="line">    pca_features[<span class="string">&#x27;label&#x27;</span>] = data[<span class="string">&#x27;label&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看新的特征集</span></span><br><span class="line"><span class="built_in">print</span>(pca_features.head())</span><br></pre></td></tr></table></figure><p>通过上述步骤，我们使用<code>scikit-learn</code>库在Python中进行PCA分析，有效降低数据的维度，同时保留数据的主要信息，不仅有助于简化数据结构，还可以将PCA分析的结果作为新的特征集，用于后续的机器学习模型或其他分析任务，从而提高分析的效率和准确性。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;常见方法&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#常见方法&quot;&gt;&lt;/a&gt; 常见方法&lt;/h2&gt;
&lt;p&gt;在数据分析中，特征提取是一个关键步骤，它涉及从原始数据中提取有意义的特征，以便用于后续的分析和建模。以下是一些常用的特征提取方法：&lt;</summary>
      
    
    
    
    <category term="learn" scheme="https://sherry14love.github.io/categories/learn/"/>
    
    
    <category term="卷" scheme="https://sherry14love.github.io/tags/%E5%8D%B7/"/>
    
    <category term="数据分析" scheme="https://sherry14love.github.io/tags/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/"/>
    
  </entry>
  
  <entry>
    <title>GPT-4o免费分享</title>
    <link href="https://sherry14love.github.io/2024/05/23/Tool/GPT4o/"/>
    <id>https://sherry14love.github.io/2024/05/23/Tool/GPT4o/</id>
    <published>2024-05-22T16:00:00.000Z</published>
    <updated>2024-06-17T12:47:50.103Z</updated>
    
    <content type="html"><![CDATA[<p>注意喔，红色字体可以直接转跳。如果想要免费的ChatGPT4，可以和拉姆联系，拉姆很乐意和小伙伴们进行讨论喔~</p><h2 id="国内可访问的mychandler"><a class="markdownIt-Anchor" href="#国内可访问的mychandler"></a> 国内可访问的mychandler</h2><p><a href="https://mychandler.bet/">mychandler</a>每月免费用户有40次，就是进入的时候很慢很慢，使用魔法也不快（他的CDN肯定有问题）</p><p><img src="https://www.qiuxs.cn/sharing-tools/img/read/ce0e2643bf94e02164fbba6c147cba4b" alt="mychandler" /></p><h2 id="插件merlin国内可用"><a class="markdownIt-Anchor" href="#插件merlin国内可用"></a> 插件merlin（国内可用）</h2><p><a href="https://www.getmerlin.in/zh-CN/chat">merlin</a>可以在edge中访问，也可以在chrome中，每日102电力，下面是详细价格表：</p><p><img src="https://www.qiuxs.cn/sharing-tools/img/read/bb2ff479dba6482d4066b238688fcbc3" alt="merlin" /></p><h2 id="coze"><a class="markdownIt-Anchor" href="#coze"></a> Coze</h2><p><a href="https://www.coze.com/">Coze</a>简直是我们的神，每次都是免费的！无论是GPT4还是4o，而且到目前为止，拉姆都不知道他的限制次数或者tokens到底是多少，太伟大了</p><p><img src="https://www.qiuxs.cn/sharing-tools/img/read/10b01ddb99f4d6bdbd76fa8d0e35dbeb" alt="Coze" /></p><h2 id="you"><a class="markdownIt-Anchor" href="#you"></a> YOU</h2><p><a href="https://you.com/">YOU</a>每日五次访问，使用体验是比较可以的。</p><p><img src="https://www.qiuxs.cn/sharing-tools/img/read/7482489d99d68c7a0aee66978735748d" alt="YOU" /></p><h2 id="poe"><a class="markdownIt-Anchor" href="#poe"></a> Poe</h2><p>拉姆想了想，貌似每次都是这几家可以免费使用，像是<a href="https://arena.lmsys.org/">lmsys.org</a>,<a href="https://poe.com/">poe</a>等，虽然有所限制，但是对于轻度用户还是比较友好的，OpenAI官网其实这次的4o模型也是免费的，但是，这需要等待。</p><blockquote><p>poe如果只用GPT4o可以每日免费10次哦</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;注意喔，红色字体可以直接转跳。如果想要免费的ChatGPT4，可以和拉姆联系，拉姆很乐意和小伙伴们进行讨论喔~&lt;/p&gt;
&lt;h2 id=&quot;国内可访问的mychandler&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#国内可访问的mychandle</summary>
      
    
    
    
    <category term="Tool" scheme="https://sherry14love.github.io/categories/Tool/"/>
    
    
    <category term="GPT" scheme="https://sherry14love.github.io/tags/GPT/"/>
    
  </entry>
  
  <entry>
    <title>随机森林与决策树</title>
    <link href="https://sherry14love.github.io/2024/05/20/learn/data2/"/>
    <id>https://sherry14love.github.io/2024/05/20/learn/data2/</id>
    <published>2024-05-19T16:00:00.000Z</published>
    <updated>2024-09-26T07:27:07.956Z</updated>
    
    <content type="html"><![CDATA[<h2 id="定义与基本概念"><a class="markdownIt-Anchor" href="#定义与基本概念"></a> 定义与基本概念</h2><ul><li>决策树: 树形结构的分类或回归模型，通过特征分割进行分类</li><li>随机森林: 集成学习算法，由多个决策树组成</li></ul><h2 id="决策树decision-tree"><a class="markdownIt-Anchor" href="#决策树decision-tree"></a> 决策树（Decision Tree）</h2><p>决策树是一种用于分类和回归问题的基本算法，可以对数据进行分类和预测，主要步骤包括特征选择，决策树生成，剪枝。</p><ol><li><p>特征选择：决策树通过递归地选择最优特征，并根据该特征对训练数据进行分割，使得对各个子数据集有一个最好的分类。</p></li><li><p>决策树生成：决策树从根节点开始，每个节点都是基于某个特征的分割条件，最终形成一棵树形结构。</p></li><li><p>剪枝：为了防止过拟合，通常会对生成的树进行剪枝，通过移除预测性能不佳的分支来简化模型。</p></li></ol>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.tree <span class="keyword">import</span> DecisionTreeClassifier</span><br><span class="line"><span class="keyword">from</span> sklearn.datasets <span class="keyword">import</span> load_iris</span><br><span class="line"><span class="keyword">from</span> sklearn.model_selection <span class="keyword">import</span> train_test_split</span><br><span class="line"><span class="keyword">from</span> sklearn.metrics <span class="keyword">import</span> accuracy_score, classification_report</span><br><span class="line"></span><br><span class="line"><span class="comment"># 加载数据</span></span><br><span class="line">iris = load_iris()</span><br><span class="line">X = iris.data</span><br><span class="line">y = iris.target</span><br><span class="line"></span><br><span class="line"><span class="comment"># 分割数据集为训练集和测试集</span></span><br><span class="line">X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=<span class="number">0.2</span>, random_state=<span class="number">42</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建决策树分类器</span></span><br><span class="line">model = DecisionTreeClassifier(random_state=<span class="number">42</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 训练模型</span></span><br><span class="line">model.fit(X_train, y_train)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用模型进行预测</span></span><br><span class="line">y_pred = model.predict(X_test)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 计算准确率</span></span><br><span class="line">accuracy = accuracy_score(y_test, y_pred)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;准确率: <span class="subst">&#123;accuracy * <span class="number">100</span>&#125;</span>%&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 打印分类报告</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;分类报告:&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(classification_report(y_test, y_pred))</span><br></pre></td></tr></table></figure><h2 id="随机森林random-forest"><a class="markdownIt-Anchor" href="#随机森林random-forest"></a> 随机森林（Random Forest）</h2><p>随机森林是一种基于决策树的集成学习算法，由多个决策树构成。其核心思想是“集体智慧”，即多个决策树的平均预测结果通常比单个模型更准确。</p><p>随机森林是一种基于 Bagging 策略的集成学习模型，它能够有效地处理非线性问题，并且擅长处理大量样本和特征。此外，随机森林还注重降低方差。Bagging 方法在训练过程中，各基学习器之间无依赖，可实现并行训练。通过集成多个模型，它可以有效地处理过拟合问题，提高模型的预测准确性和泛化能力。随机森林可用于分类、回归和异常检测任务。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.ensemble <span class="keyword">import</span> RandomForestClassifier</span><br><span class="line"><span class="keyword">from</span> sklearn.datasets <span class="keyword">import</span> load_iris</span><br><span class="line"><span class="keyword">from</span> sklearn.model_selection <span class="keyword">import</span> train_test_split</span><br><span class="line"></span><br><span class="line"><span class="comment"># 加载数据</span></span><br><span class="line">iris = load_iris()</span><br><span class="line">X = iris.data <span class="comment"># 特征数据</span></span><br><span class="line">y = iris.target <span class="comment"># 目标标签</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 分割数据集为训练集和测试集</span></span><br><span class="line">X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=<span class="number">0.2</span>, random_state=<span class="number">42</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建随机森林模型</span></span><br><span class="line">model = RandomForestClassifier(n_estimators=<span class="number">100</span>, random_state=<span class="number">42</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 训练模型</span></span><br><span class="line">model.fit(X_train, y_train)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取特征重要性</span></span><br><span class="line">importances = model.feature_importances_</span><br><span class="line"></span><br><span class="line"><span class="comment"># 打印特征重要性</span></span><br><span class="line"><span class="keyword">for</span> feature_name, importance <span class="keyword">in</span> <span class="built_in">zip</span>(iris.feature_names, importances):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;feature_name&#125;</span>: <span class="subst">&#123;importance&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用模型进行预测</span></span><br><span class="line">predictions = model.predict(X_test)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 打印预测结果</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;预测结果:&quot;</span>, predictions)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 打印真实结果</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;真实结果:&quot;</span>, y_test)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 计算准确率</span></span><br><span class="line">accuracy = model.score(X_test, y_test)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;准确率: <span class="subst">&#123;accuracy * <span class="number">100</span>&#125;</span>%&quot;</span>)</span><br></pre></td></tr></table></figure><h2 id="bootstrap-sampling"><a class="markdownIt-Anchor" href="#bootstrap-sampling"></a> Bootstrap Sampling</h2><p>Bagging（Bootstrap Aggregating）是一种集成学习方法，用于提高机器学习算法的稳定性和准确性。Bagging的核心思想是通过构建多个模型，然后将这些模型的预测结果进行组合，以达到比单个模型更好的预测效果。（这就是随机森林的思想，对不对）</p><p>Bagging的步骤通常为：</p><ol><li><p>自助采样（Bootstrap Sampling）：从原始数据集中随机抽取多个样本，每个样本的大小与原始数据集相同，但允许重复抽取。这意味着每次抽样都会有一些数据点被多次选中，而另一些则可能不被选中。</p></li><li><p>训练模型：使用每个自助采样得到的数据集来训练一个单独的模型。这些模型可以是相同的算法，也可以是不同的算法。</p></li><li><p>预测：对新的数据点进行预测时，每个模型都会给出自己的预测结果。</p></li><li><p>组合预测：将所有模型的预测结果进行组合。对于分类问题，通常采用投票的方式来决定最终的分类结果；对于回归问题，则通常取所有模型预测结果的平均值作为最终的预测值。</p></li></ol><p>Bagging的主要优点是能够减少模型的方差，提高模型的泛化能力。它特别适用于那些高方差的模型（如决策树）</p><p>所以比较著名的一个Bagging算法就是随机森林。</p><h2 id="决策树与随机森林的区别"><a class="markdownIt-Anchor" href="#决策树与随机森林的区别"></a> 决策树与随机森林的区别</h2><p>随机森林（Random Forest）和决策树（Decision Tree）都是流行的机器学习算法，它们在数据分析和预测建模中广泛使用。尽管它们都基于决策树的概念，但它们在结构和应用上有所不同。下面我们来看看随机森林和决策树之间的一些主要区别：</p><ol><li><strong>模型结构</strong>：<ul><li><strong>决策树</strong>：是一个单一的树结构，它通过一系列的决策节点（内部节点）和终端节点（叶子节点）来对数据进行分类或回归。</li><li><strong>随机森林</strong>：是一个集成学习方法，它由多个决策树组成。随机森林通过构建多个树并将它们的预测结果进行组合来提高模型的性能。</li></ul></li><li><strong>预测方式</strong>：<ul><li><strong>决策树</strong>：对新数据进行预测时，从根节点开始，根据特征值沿着树的路径向下移动，直到到达叶子节点，该节点的值即为预测结果。</li><li><strong>随机森林</strong>：对新数据进行预测时，每个决策树都会给出自己的预测结果，然后通过投票（分类问题）或平均（回归问题）的方式来确定最终的预测结果。</li></ul></li><li><strong>过拟合问题</strong>：<ul><li><strong>决策树</strong>：容易过拟合，特别是在树很深的情况下，因为它可以完美地拟合训练数据。</li><li><strong>随机森林</strong>：通过集成多个树，随机森林能够减少过拟合的风险，因为即使单个树可能过拟合，但多个树的组合通常会更加稳定。</li></ul></li><li><strong>特征选择</strong>：<ul><li><strong>决策树</strong>：在每个节点上，决策树会考虑所有可用的特征来选择最佳的分割方式。</li><li><strong>随机森林</strong>：在构建每棵树时，随机森林会在每个节点上随机选择一部分特征来考虑最佳的分割方式，这增加了模型的多样性。</li></ul></li><li><strong>训练时间</strong>：<ul><li><strong>决策树</strong>：通常训练时间较短，因为只需要训练一个模型。</li><li><strong>随机森林</strong>：训练时间较长，因为需要训练多个决策树。</li></ul></li><li><strong>特征重要性</strong>：<ul><li><strong>决策树</strong>：可以提供特征重要性的度量，但通常不如随机森林准确。</li><li><strong>随机森林</strong>：能够提供更准确的特征重要性度量，因为它基于多个树的平均结果。</li></ul></li></ol><p>总的来说，随机森林通过集成多个决策树来提高模型的准确性和鲁棒性，而决策树则是一个更简单、更快速的单模型方法。随机森林通常在处理复杂数据集时表现更好，而决策树则适用于快速原型设计和简单数据集。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;定义与基本概念&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#定义与基本概念&quot;&gt;&lt;/a&gt; 定义与基本概念&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;决策树: 树形结构的分类或回归模型，通过特征分割进行分类&lt;/li&gt;
&lt;li&gt;随机森林: 集成学习算法，</summary>
      
    
    
    
    <category term="learn" scheme="https://sherry14love.github.io/categories/learn/"/>
    
    
    <category term="卷" scheme="https://sherry14love.github.io/tags/%E5%8D%B7/"/>
    
    <category term="数据分析" scheme="https://sherry14love.github.io/tags/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/"/>
    
  </entry>
  
  <entry>
    <title>数据分析与数据挖掘浅谈</title>
    <link href="https://sherry14love.github.io/2024/05/19/learn/data1/"/>
    <id>https://sherry14love.github.io/2024/05/19/learn/data1/</id>
    <published>2024-05-18T16:00:00.000Z</published>
    <updated>2024-09-26T07:27:03.915Z</updated>
    
    <content type="html"><![CDATA[<h2 id="技术栈和工具分析"><a class="markdownIt-Anchor" href="#技术栈和工具分析"></a> 技术栈和工具分析</h2><p>对于python技术栈的我们来说，走数据分析与数据挖掘是一条不错的路。</p><p>虽然也可以走前后端，但是目前的市场份额，Java和PHP仍然是主流，对于大厂而言，正在从Java到Golang过渡，所以python做前后端是有点尴尬的。</p><p>数据分析与数据挖掘常见的技术栈除了python之外，还有R、SQL、Hadoop、Spark、Hive、SPSS、SAS、Weka、Scikit-learn、TensorFlow、Keras等。</p><p>其中拉姆目前所接触的只有python、r、spss、Scikit-learn、TensorFlow、Keras</p><p>比较熟悉的只有python的一些库，Pandas、NumPy就不用说了，Scikit-learn、TensorFlow、Keras则是在机器学习和深度学习里的一点东西（其实也是python的库），大学里开设了相关的专业课与实验课。</p><p>R语言则是最近学习了解的。</p><p>SPSS、SAS、Weka是经典的数据挖掘和统计分析工具，使用起来并不是说很困难，可以尝试进行学习。</p><p>其实除了上面的之外，还有<a href="https://www.spsspro.com/">spsspro</a>、<a href="https://www.finebi.com/">FineBI</a>等，都是要比那种纯粹的工具更好用的。</p><h2 id="数据分析与数据挖掘的联系"><a class="markdownIt-Anchor" href="#数据分析与数据挖掘的联系"></a> 数据分析与数据挖掘的联系</h2><p>数据分析主要是指使用统计学、数学和计算机科学的方法来处理和分析数据，以提取有用的信息和洞察，帮助做出决策。</p><p>数据分析可以包括描述性分析（如计算平均值、中位数、标准差等）、诊断性分析（分析数据变化的原因）、预测性分析（使用历史数据预测未来趋势）和规范性分析（基于预测结果提出行动建议）。</p><p>数据分析通常侧重于已知模式的识别和验证，以及对数据的解释和报告。</p><p>数据挖掘则是一种更深层次的数据分析方法，它侧重于从大量数据中发现未知的、潜在有用的模式和关系。</p><p>数据挖掘通常涉及复杂的算法和技术，如聚类分析、关联规则学习、分类、回归和异常检测等。</p><p>数据挖掘的目的是发现数据中的隐藏模式，这些模式可能对业务决策、市场分析、风险管理等领域有重要价值。</p><p>两者都需要对数据进行预处理，比如清理缺失值、检查异常值、去除噪声什么的。</p><h2 id="食用指南1"><a class="markdownIt-Anchor" href="#食用指南1"></a> 食用指南1</h2><p>1.因为版本等各种因故，导致一些代码在运行的时候会有各种各样的警告，我们可以使用下面的代码进行<strong>忽略警告</strong>：</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">import warnings</span><br><span class="line">warnings.filterwarnings(<span class="string">&#x27;ignore&#x27;</span>)</span><br></pre></td></tr></table></figure><p>2.绘图的时候因为字体因故加载不出来中文字体，可以用下面代码：</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">import matplotlib.pyplot as plt</span><br><span class="line"><span class="comment"># 设置中文字体</span></span><br><span class="line">plt.rcParams[<span class="string">&#x27;font.sans-serif&#x27;</span>] = <span class="string">&#x27;SimHei&#x27;</span></span><br><span class="line">plt.rcParams[<span class="string">&#x27;axes.unicode_minus&#x27;</span>] = False</span><br></pre></td></tr></table></figure><p>3.读取数据：</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">import pandas as pd <span class="comment">#数据导入 </span></span><br><span class="line">data = pd.read_csv(<span class="string">&#x27;data.csv&#x27;</span>)</span><br></pre></td></tr></table></figure><p>4.数据探索：</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(data.head()) <span class="comment"># 查看数据前几行</span></span><br><span class="line"><span class="built_in">print</span>(data.describe())<span class="comment"># 查看数据统计摘要</span></span><br><span class="line"><span class="built_in">print</span>(data.columns)<span class="comment"># 查看数据列名</span></span><br></pre></td></tr></table></figure><p>5.数据处理的时候难免会遇到缺失值，这个时候我们可以进行之间删除，或者用均值进行填充：</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 处理缺失值</span></span><br><span class="line">data = data.dropna()  <span class="comment"># 删除含有缺失值的行</span></span><br><span class="line"><span class="comment"># 或者</span></span><br><span class="line">data = data.fillna(data.mean())  <span class="comment"># 用特定值（这里是均值）填充缺失值</span></span><br></pre></td></tr></table></figure><p>6.在数据分析之中，绘图matplotlib是最为常见的一个库，可以绘画各种图像进行数据可视化帮助我们理解：</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">import matplotlib.pyplot as plt</span><br><span class="line">data[<span class="string">&#x27;column_name&#x27;</span>].hist()  </span><br><span class="line">plt.show() <span class="comment"># 绘制直方图   </span></span><br><span class="line">plt.scatter(data[<span class="string">&#x27;column_name1&#x27;</span>], data[<span class="string">&#x27;column_name2&#x27;</span>])</span><br><span class="line">plt.show()<span class="comment"># 绘制散点图</span></span><br></pre></td></tr></table></figure><p>7.我们在处理一些数据的时候需要进行<strong>标准化</strong>，为什么呢，因为可以帮助不同的特征具有相似的尺度，提高模型的收敛速度，使特征更符合标准的正态分布，提高模型的准确性和可解释性：</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">from sklearn.preprocessing import StandardScaler</span><br><span class="line">scaler = StandardScaler()  </span><br><span class="line">scaled_data = scaler.fit_transform(data)<span class="comment"># 数据标准化</span></span><br><span class="line"><span class="comment"># 将标准化后的数据转换为DataFrame</span></span><br><span class="line">scaled_data = pd.DataFrame(scaled_data, columns=data.columns)</span><br></pre></td></tr></table></figure><p>8.进行<strong>特征选择</strong>在数据挖掘和机器学习中是非常必要的，它有助于去除无关或冗余的特征，提升模型性能，并减少计算成本，而且过多的特征可能导致维度灾难，增加模型复杂度，引发过拟合，并增加时间成本：</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">from sklearn.feature_selection import SelectKBest</span><br><span class="line">from sklearn.feature_selection import chi2</span><br><span class="line"><span class="comment"># 使用卡方检验选择特征选择排名前 10 的特征</span></span><br><span class="line">selector = SelectKBest(score_func=chi2, k=10)</span><br><span class="line">selected_features = selector.fit_transform(data, target)</span><br></pre></td></tr></table></figure><p>9.<strong>建模</strong>更不用说了，是数据挖掘之中必不可少的组成部分：</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">from sklearn.linear_model import LinearRegression</span><br><span class="line"><span class="comment"># 线性回归模型</span></span><br><span class="line">model = LinearRegression()</span><br><span class="line">model.fit(X_train, y_train)</span><br><span class="line">predictions = model.predict(X_test)</span><br></pre></td></tr></table></figure><p>10.建模之后，还需要对模型进行<strong>评估</strong>，这样可以帮助我们优化模型参数，提高模型性能，选择最佳模型等：</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">from sklearn.metrics import mean_squared_error</span><br><span class="line"><span class="comment"># 计算均方误差</span></span><br><span class="line">mse = mean_squared_error(y_test, predictions)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;MSE:&quot;</span>, mse))</span><br></pre></td></tr></table></figure><p>11.<strong>聚类分析</strong>是一种无监督学习方法，通过聚类，我们可以发现数据中相似的群组或簇，更好地理解数据之间的关系，还可以检测出异常值、噪声、离群点等：</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">from sklearn.cluster import KMeans</span><br><span class="line"><span class="comment"># KMeans聚类</span></span><br><span class="line">kmeans = KMeans(n_clusters=3)</span><br><span class="line">kmeans.fit(data)</span><br><span class="line">labels = kmeans.labels_</span><br></pre></td></tr></table></figure><p>12.分类任务常见的有<strong>随机森林</strong>、<strong>决策树</strong>、<strong>逻辑回归</strong>、<strong>朴素贝叶斯</strong>、<strong>支持向量机</strong>等，我们来简单介绍一下最常见的<strong>SVM</strong>，SVM适用于线性和非线性分类问题，还可以高效处理高维数据集，在多类别分类时具有独特的优势：</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">from sklearn.svm import SVC</span><br><span class="line"><span class="comment"># 支持向量机分类</span></span><br><span class="line">svm = SVC()</span><br><span class="line">svm.fit(X_train, y_train)</span><br><span class="line">predictions = svm.predict(X_test)</span><br></pre></td></tr></table></figure><p>这篇博文先写这些，后面有机会再拓展聊一下，下次见~</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;技术栈和工具分析&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#技术栈和工具分析&quot;&gt;&lt;/a&gt; 技术栈和工具分析&lt;/h2&gt;
&lt;p&gt;对于python技术栈的我们来说，走数据分析与数据挖掘是一条不错的路。&lt;/p&gt;
&lt;p&gt;虽然也可以走前后端，但</summary>
      
    
    
    
    <category term="learn" scheme="https://sherry14love.github.io/categories/learn/"/>
    
    
    <category term="卷" scheme="https://sherry14love.github.io/tags/%E5%8D%B7/"/>
    
    <category term="数据分析" scheme="https://sherry14love.github.io/tags/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/"/>
    
  </entry>
  
  <entry>
    <title>docker食用指南</title>
    <link href="https://sherry14love.github.io/2024/05/18/learn/docker/"/>
    <id>https://sherry14love.github.io/2024/05/18/learn/docker/</id>
    <published>2024-05-17T16:00:00.000Z</published>
    <updated>2024-09-26T07:27:25.340Z</updated>
    
    <content type="html"><![CDATA[<h2 id="什么是docker"><a class="markdownIt-Anchor" href="#什么是docker"></a> 什么是Docker？</h2><p>Docker 是一个开源的应用容器引擎，让开发者可以打包他们的应用及其依赖包到一个可移植的容器中，然后发布到任何支持 Docker 的平台上。它提供了简便的虚拟化解决方案，使得应用开发、测试和部署更加一致和高效。</p><h2 id="docker的应用场景"><a class="markdownIt-Anchor" href="#docker的应用场景"></a> Docker的应用场景</h2><ul><li>Web 应用的自动化打包和发布。</li><li>自动化测试和持续集成、发布。</li><li>在服务型环境中部署和调整数据库或其他的后台应用。</li><li>从头编译或者扩展现有的 OpenShift 或 Cloud Foundry 平台来搭建自己的 PaaS 环境。</li></ul><h2 id="基本概念"><a class="markdownIt-Anchor" href="#基本概念"></a> 基本概念</h2><ul><li>镜像 (Image)：镜像是一个只读模板，包含了运行应用程序所需的所有内容（代码、库、配置等）。可以把镜像看作是一个蓝图，用于创建Docker容器。</li><li>容器 (Container)：容器是镜像的运行实例，它是一个轻量级、独立的可执行软件包，包含了软件运行所需的所有内容。</li><li>Dockerfile：Dockerfile是一个文本文件，包含了一系列指令，告诉Docker如何构建镜像。</li><li>Docker Hub：这是一个云端的公共仓库，你可以在上面找到和共享Docker镜像</li></ul><h2 id="安装-docker"><a class="markdownIt-Anchor" href="#安装-docker"></a> 安装 Docker</h2><h3 id="1-linux"><a class="markdownIt-Anchor" href="#1-linux"></a> 1. Linux</h3><p>在Linux上，可以使用官方脚本来安装Docker。例如，在Ubuntu上：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">curl -fsSL https://get.docker.com -o get-docker.sh</span><br><span class="line">sudo sh get-docker.sh</span><br></pre></td></tr></table></figure><h3 id="2-windows-和-macos"><a class="markdownIt-Anchor" href="#2-windows-和-macos"></a> 2. Windows 和 macOS</h3><p>下载并安装Docker Desktop：</p><ul><li><a href="https://www.docker.com/products/docker-desktop">Docker Desktop for Windows</a></li><li><a href="https://www.docker.com/products/docker-desktop">Docker Desktop for macOS</a></li></ul><h2 id="基本命令"><a class="markdownIt-Anchor" href="#基本命令"></a> 基本命令</h2><h3 id="下载镜像"><a class="markdownIt-Anchor" href="#下载镜像"></a> 下载镜像</h3><p>使用 <code>docker pull</code> 命令从 Docker Hub 下载镜像：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull &lt;image_name&gt;</span><br></pre></td></tr></table></figure><h3 id="创建并启动容器"><a class="markdownIt-Anchor" href="#创建并启动容器"></a> 创建并启动容器</h3><p>使用 <code>docker run</code> 命令创建并启动一个容器。例如，运行一个交互式的 Ubuntu 容器：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -it ubuntu bash</span><br></pre></td></tr></table></figure><ul><li><code>-it</code>：以交互模式运行，并分配一个伪 TTY。</li><li><code>ubuntu</code>：指定使用的镜像。</li><li><code>bash</code>：在容器内运行的命令。</li></ul><h3 id="进入容器"><a class="markdownIt-Anchor" href="#进入容器"></a> 进入容器</h3><p>使用 <code>docker exec</code> 命令进入正在运行的容器：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker <span class="built_in">exec</span> -it &lt;container_id&gt; bash</span><br></pre></td></tr></table></figure><h3 id="查看容器状态"><a class="markdownIt-Anchor" href="#查看容器状态"></a> 查看容器状态</h3><ul><li>查看所有运行中的容器：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker ps</span><br></pre></td></tr></table></figure></li><li>查看所有容器，包括已停止的：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker ps -a</span><br></pre></td></tr></table></figure></li></ul><h3 id="停止容器"><a class="markdownIt-Anchor" href="#停止容器"></a> 停止容器</h3><p>使用 <code>docker stop</code> 命令停止一个运行中的容器：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker stop CONTAINER_ID</span><br></pre></td></tr></table></figure><h3 id="删除容器"><a class="markdownIt-Anchor" href="#删除容器"></a> 删除容器</h3><p>使用 <code>docker rm</code> 命令删除一个已停止的容器：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker <span class="built_in">rm</span> CONTAINER_ID</span><br></pre></td></tr></table></figure><h3 id="导出和导入容器"><a class="markdownIt-Anchor" href="#导出和导入容器"></a> 导出和导入容器</h3><ul><li>导出容器：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker <span class="built_in">export</span> &lt;container_id&gt; &gt; output.tar</span><br></pre></td></tr></table></figure></li><li>导入容器：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker import output.tar &lt;new_container_name&gt;</span><br></pre></td></tr></table></figure></li></ul><h3 id="构建镜像"><a class="markdownIt-Anchor" href="#构建镜像"></a> 构建镜像</h3><p>使用 <code>docker build</code> 命令从当前目录中的 Dockerfile 构建一个镜像：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker build -t TAG_NAME .</span><br></pre></td></tr></table></figure><ul><li><code>-t TAG_NAME</code>：为镜像指定一个标签。</li><li><code>.</code>：指定 Dockerfile 所在的目录。</li></ul><p>通过这些命令，我们可以有效地管理和操作Docker容器和镜像，实现应用的快速部署和环境的统一管理。</p><h2 id="dockerfile-示例"><a class="markdownIt-Anchor" href="#dockerfile-示例"></a> Dockerfile 示例</h2><p>Dockerfile 是用于构建Docker镜像的文本文件，包含一系列指令。例如，以下是一个简单的Dockerfile：</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 使用官方的Python基础镜像</span></span><br><span class="line"><span class="keyword">FROM</span> python:<span class="number">3.9</span>-slim</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置工作目录</span></span><br><span class="line"><span class="keyword">WORKDIR</span><span class="language-bash"> /app</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 复制当前目录内容到工作目录</span></span><br><span class="line"><span class="keyword">COPY</span><span class="language-bash"> . /app</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装依赖包</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> pip install --no-cache-dir -r requirements.txt</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义环境变量</span></span><br><span class="line"><span class="keyword">ENV</span> NAME World</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置容器启动时运行的命令</span></span><br><span class="line"><span class="keyword">CMD</span><span class="language-bash"> [<span class="string">&quot;python&quot;</span>, <span class="string">&quot;app.py&quot;</span>]</span></span><br></pre></td></tr></table></figure><h2 id="镜像管理"><a class="markdownIt-Anchor" href="#镜像管理"></a> 镜像管理</h2><h3 id="1-列出镜像"><a class="markdownIt-Anchor" href="#1-列出镜像"></a> 1. 列出镜像</h3><p>列出本地所有镜像：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker images</span><br></pre></td></tr></table></figure><h3 id="2-拉取镜像"><a class="markdownIt-Anchor" href="#2-拉取镜像"></a> 2. 拉取镜像</h3><p>从Docker Hub拉取一个镜像：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull IMAGE_NAME</span><br></pre></td></tr></table></figure><h3 id="3-删除镜像"><a class="markdownIt-Anchor" href="#3-删除镜像"></a> 3. 删除镜像</h3><p>删除一个本地镜像：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker rmi IMAGE_ID</span><br></pre></td></tr></table></figure><h2 id="网络和数据卷"><a class="markdownIt-Anchor" href="#网络和数据卷"></a> 网络和数据卷</h2><h3 id="网络"><a class="markdownIt-Anchor" href="#网络"></a> 网络</h3><p>Docker允许创建自定义网络，容器可以加入这些网络并相互通信。例如，创建一个网络：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker network create my-network</span><br></pre></td></tr></table></figure><p>运行容器时加入网络：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -d --network=my-network --name my-container ubuntu</span><br></pre></td></tr></table></figure><h3 id="数据卷"><a class="markdownIt-Anchor" href="#数据卷"></a> 数据卷</h3><p>数据卷用于持久化数据，可以在容器之间共享和重用。例如，创建一个数据卷：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker volume create my-volume</span><br></pre></td></tr></table></figure><p>运行容器时挂载数据卷：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -d -v my-volume:/app/data ubuntu</span><br></pre></td></tr></table></figure><h2 id="最佳实践"><a class="markdownIt-Anchor" href="#最佳实践"></a> 最佳实践</h2><ol><li><strong>使用<code>.dockerignore</code>文件</strong>：排除不需要的文件和目录，以减小镜像大小。</li><li><strong>使用官方镜像</strong>：尽量使用官方基础镜像，保证安全性和稳定性。</li><li><strong>保持镜像小巧</strong>：避免包含不必要的依赖，减小镜像大小。</li><li><strong>使用多阶段构建</strong>：通过多阶段构建来减少最终镜像的大小，优化构建过程。</li></ol><p>Docker 是一个功能强大的工具，上述指南仅涵盖了基础知识。深入学习 Docker 可以帮助你更好地理解容器化技术，并有效地管理应用部署。</p><blockquote><p>注意在windows系统退出dockers的时候，可能会出现一种情况，后台的WSL没有退出并且占用大量内存，这个时候我们需要 <code>wsl --shutdown</code> 命令进行关闭</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;什么是docker&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#什么是docker&quot;&gt;&lt;/a&gt; 什么是Docker？&lt;/h2&gt;
&lt;p&gt;Docker 是一个开源的应用容器引擎，让开发者可以打包他们的应用及其依赖包到一个可移植的容器中，然</summary>
      
    
    
    
    <category term="learn" scheme="https://sherry14love.github.io/categories/learn/"/>
    
    
    <category term="卷" scheme="https://sherry14love.github.io/tags/%E5%8D%B7/"/>
    
    <category term="docker" scheme="https://sherry14love.github.io/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title>linux食用指南</title>
    <link href="https://sherry14love.github.io/2024/05/15/learn/linuxone/"/>
    <id>https://sherry14love.github.io/2024/05/15/learn/linuxone/</id>
    <published>2024-05-14T16:00:00.000Z</published>
    <updated>2024-09-26T07:27:35.469Z</updated>
    
    <content type="html"><![CDATA[<h2 id="linux-基本概念"><a class="markdownIt-Anchor" href="#linux-基本概念"></a> Linux 基本概念</h2><h3 id="1-什么是linux"><a class="markdownIt-Anchor" href="#1-什么是linux"></a> 1. 什么是Linux</h3><p>Linux是一个开源的、类Unix操作系统，由Linus Torvalds于1991年首次发布。它有许多不同的发行版（例如Ubuntu、Red Hat、Fedora、Debian等），用于桌面、服务器和嵌入式系统。</p><h3 id="2-文件系统结构"><a class="markdownIt-Anchor" href="#2-文件系统结构"></a> 2. 文件系统结构</h3><p>Linux使用一种树状的文件系统结构，所有内容都从根目录（<code>/</code>）开始。常见的目录有：</p><ul><li><code>/bin</code>：基本命令二进制文件</li><li><code>/etc</code>：配置文件</li><li><code>/home</code>：用户主目录</li><li><code>/var</code>：可变文件，如日志</li><li><code>/usr</code>：用户程序和数据</li></ul><h3 id="3-权限和所有权"><a class="markdownIt-Anchor" href="#3-权限和所有权"></a> 3. 权限和所有权</h3><p>每个文件和目录都有权限和所有权。权限分为三类：所有者、所属组和其他用户。每类权限分为读（r）、写（w）和执行（x）。</p><h3 id="4-包管理"><a class="markdownIt-Anchor" href="#4-包管理"></a> 4. 包管理</h3><p>Ubuntu使用APT（Advanced Package Tool）来管理软件包。</p><h2 id="基本命令"><a class="markdownIt-Anchor" href="#基本命令"></a> 基本命令</h2><h3 id="1-显示当前路径"><a class="markdownIt-Anchor" href="#1-显示当前路径"></a> 1. 显示当前路径</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">pwd</span></span><br></pre></td></tr></table></figure><p>显示当前工作目录的路径。</p><h3 id="2-列出目录内容"><a class="markdownIt-Anchor" href="#2-列出目录内容"></a> 2. 列出目录内容</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">ls</span></span><br></pre></td></tr></table></figure><p>常用选项：</p><ul><li><code>ls -l</code>：详细列表格式</li><li><code>ls -a</code>：包括隐藏文件</li></ul><h3 id="3-更改目录"><a class="markdownIt-Anchor" href="#3-更改目录"></a> 3. 更改目录</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /path/to/directory</span><br></pre></td></tr></table></figure><p>进入指定目录。</p><h3 id="4-创建目录"><a class="markdownIt-Anchor" href="#4-创建目录"></a> 4. 创建目录</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> new_directory</span><br></pre></td></tr></table></figure><h3 id="5-删除文件或目录"><a class="markdownIt-Anchor" href="#5-删除文件或目录"></a> 5. 删除文件或目录</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">rm</span> file_name</span><br><span class="line"><span class="built_in">rm</span> -r directory_name</span><br></pre></td></tr></table></figure><p><code>-r</code> 递归删除目录及其内容。</p><h3 id="6-复制文件或目录"><a class="markdownIt-Anchor" href="#6-复制文件或目录"></a> 6. 复制文件或目录</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cp</span> source_file target_file</span><br><span class="line"><span class="built_in">cp</span> -r source_directory target_directory</span><br></pre></td></tr></table></figure><h3 id="7-移动文件或重命名"><a class="markdownIt-Anchor" href="#7-移动文件或重命名"></a> 7. 移动文件或重命名</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">mv</span> old_name new_name</span><br><span class="line"><span class="built_in">mv</span> file_name /path/to/new_directory</span><br></pre></td></tr></table></figure><h3 id="8-查看文件内容"><a class="markdownIt-Anchor" href="#8-查看文件内容"></a> 8. 查看文件内容</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cat</span> file_name</span><br><span class="line">less file_name</span><br></pre></td></tr></table></figure><p><code>less</code> 分页查看长文件。</p><h3 id="9-编辑文件"><a class="markdownIt-Anchor" href="#9-编辑文件"></a> 9. 编辑文件</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">nano file_name</span><br><span class="line">vim file_name</span><br></pre></td></tr></table></figure><h3 id="10-查找文件"><a class="markdownIt-Anchor" href="#10-查找文件"></a> 10. 查找文件</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">find /path/to/search -name <span class="string">&quot;file_name&quot;</span></span><br></pre></td></tr></table></figure><h3 id="11-搜索文件内容"><a class="markdownIt-Anchor" href="#11-搜索文件内容"></a> 11. 搜索文件内容</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">grep <span class="string">&quot;search_term&quot;</span> file_name</span><br></pre></td></tr></table></figure><h2 id="用户管理"><a class="markdownIt-Anchor" href="#用户管理"></a> 用户管理</h2><h3 id="1-添加用户"><a class="markdownIt-Anchor" href="#1-添加用户"></a> 1. 添加用户</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo adduser new_user</span><br></pre></td></tr></table></figure><h3 id="2-删除用户"><a class="markdownIt-Anchor" href="#2-删除用户"></a> 2. 删除用户</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo deluser user_name</span><br></pre></td></tr></table></figure><h3 id="3-修改用户密码"><a class="markdownIt-Anchor" href="#3-修改用户密码"></a> 3. 修改用户密码</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo passwd user_name</span><br></pre></td></tr></table></figure><h3 id="4-切换用户"><a class="markdownIt-Anchor" href="#4-切换用户"></a> 4. 切换用户</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">su - user_name</span><br></pre></td></tr></table></figure><h3 id="5-查看当前用户"><a class="markdownIt-Anchor" href="#5-查看当前用户"></a> 5. 查看当前用户</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">whoami</span></span><br></pre></td></tr></table></figure><h2 id="软件管理"><a class="markdownIt-Anchor" href="#软件管理"></a> 软件管理</h2><h3 id="1-更新软件包列表"><a class="markdownIt-Anchor" href="#1-更新软件包列表"></a> 1. 更新软件包列表</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt update</span><br></pre></td></tr></table></figure><h3 id="2-升级已安装的软件包"><a class="markdownIt-Anchor" href="#2-升级已安装的软件包"></a> 2. 升级已安装的软件包</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt upgrade</span><br></pre></td></tr></table></figure><h3 id="3-安装新软件包"><a class="markdownIt-Anchor" href="#3-安装新软件包"></a> 3. 安装新软件包</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install package_name</span><br></pre></td></tr></table></figure><h3 id="4-删除软件包"><a class="markdownIt-Anchor" href="#4-删除软件包"></a> 4. 删除软件包</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt remove package_name</span><br></pre></td></tr></table></figure><h3 id="5-清理不再需要的软件包"><a class="markdownIt-Anchor" href="#5-清理不再需要的软件包"></a> 5. 清理不再需要的软件包</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt autoremove</span><br></pre></td></tr></table></figure><h2 id="网络配置"><a class="markdownIt-Anchor" href="#网络配置"></a> 网络配置</h2><h3 id="1-查看网络接口信息"><a class="markdownIt-Anchor" href="#1-查看网络接口信息"></a> 1. 查看网络接口信息</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ip addr</span><br></pre></td></tr></table></figure><h3 id="2-查看网络连接状态"><a class="markdownIt-Anchor" href="#2-查看网络连接状态"></a> 2. 查看网络连接状态</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">netstat -tuln</span><br></pre></td></tr></table></figure><h3 id="3-配置静态ip地址"><a class="markdownIt-Anchor" href="#3-配置静态ip地址"></a> 3. 配置静态IP地址</h3><p>编辑 <code>/etc/netplan/*.yaml</code> 文件：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">network:</span></span><br><span class="line">  <span class="attr">version:</span> <span class="number">2</span></span><br><span class="line">  <span class="attr">ethernets:</span></span><br><span class="line">    <span class="attr">eth0:</span></span><br><span class="line">      <span class="attr">addresses:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="number">192.168</span><span class="number">.1</span><span class="number">.100</span><span class="string">/24</span></span><br><span class="line">      <span class="attr">gateway4:</span> <span class="number">192.168</span><span class="number">.1</span><span class="number">.1</span></span><br><span class="line">      <span class="attr">nameservers:</span></span><br><span class="line">        <span class="attr">addresses:</span> [<span class="number">8.8</span><span class="number">.8</span><span class="number">.8</span>, <span class="number">8.8</span><span class="number">.4</span><span class="number">.4</span>]</span><br></pre></td></tr></table></figure><p>然后应用配置：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo netplan apply</span><br></pre></td></tr></table></figure><h2 id="系统管理"><a class="markdownIt-Anchor" href="#系统管理"></a> 系统管理</h2><h3 id="1-查看系统信息"><a class="markdownIt-Anchor" href="#1-查看系统信息"></a> 1. 查看系统信息</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">uname</span> -a</span><br></pre></td></tr></table></figure><h3 id="2-查看磁盘使用情况"><a class="markdownIt-Anchor" href="#2-查看磁盘使用情况"></a> 2. 查看磁盘使用情况</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">df</span> -h</span><br></pre></td></tr></table></figure><h3 id="3-查看内存使用情况"><a class="markdownIt-Anchor" href="#3-查看内存使用情况"></a> 3. 查看内存使用情况</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">free -h</span><br></pre></td></tr></table></figure><h3 id="4-查看系统日志"><a class="markdownIt-Anchor" href="#4-查看系统日志"></a> 4. 查看系统日志</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo journalctl -xe</span><br></pre></td></tr></table></figure><h3 id="5-管理服务"><a class="markdownIt-Anchor" href="#5-管理服务"></a> 5. 管理服务</h3><ul><li>启动服务：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl start service_name</span><br></pre></td></tr></table></figure></li><li>停止服务：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl stop service_name</span><br></pre></td></tr></table></figure></li><li>重启服务：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl restart service_name</span><br></pre></td></tr></table></figure></li><li>查看服务状态：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl status service_name</span><br></pre></td></tr></table></figure></li></ul><h2 id="进阶操作"><a class="markdownIt-Anchor" href="#进阶操作"></a> 进阶操作</h2><h3 id="1-使用ssh连接远程服务器"><a class="markdownIt-Anchor" href="#1-使用ssh连接远程服务器"></a> 1. 使用SSH连接远程服务器</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh user@remote_server</span><br></pre></td></tr></table></figure><p>通过SSH安全地连接远程服务器。</p><h3 id="2-设置防火墙"><a class="markdownIt-Anchor" href="#2-设置防火墙"></a> 2. 设置防火墙</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sudo ufw <span class="built_in">enable</span></span><br><span class="line">sudo ufw allow ssh</span><br><span class="line">sudo ufw allow 80/tcp</span><br><span class="line">sudo ufw status</span><br></pre></td></tr></table></figure><p><code>ufw</code>（Uncomplicated Firewall）是一个简化的防火墙管理工具。</p><h3 id="3-配置自动更新"><a class="markdownIt-Anchor" href="#3-配置自动更新"></a> 3. 配置自动更新</h3><p>编辑 <code>/etc/apt/apt.conf.d/50unattended-upgrades</code> 文件，启用自动更新。</p><h3 id="4-设置定时任务cron-jobs"><a class="markdownIt-Anchor" href="#4-设置定时任务cron-jobs"></a> 4. 设置定时任务（Cron Jobs）</h3><p>编辑用户的crontab：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">crontab -e</span><br></pre></td></tr></table></figure><p>添加定时任务。例如，每天凌晨2点备份：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">0 2 * * * /path/to/backup_script.sh</span><br></pre></td></tr></table></figure><h3 id="5-安装和使用docker"><a class="markdownIt-Anchor" href="#5-安装和使用docker"></a> 5. 安装和使用Docker</h3><p>安装Docker：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt update</span><br><span class="line">sudo apt install docker.io</span><br></pre></td></tr></table></figure><p>启动Docker服务：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl start docker</span><br><span class="line">sudo systemctl <span class="built_in">enable</span> docker</span><br></pre></td></tr></table></figure><p>运行一个Docker容器：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo docker run hello-world</span><br></pre></td></tr></table></figure><h3 id="6-使用git进行版本控制"><a class="markdownIt-Anchor" href="#6-使用git进行版本控制"></a> 6. 使用Git进行版本控制</h3><p>安装Git：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install git</span><br></pre></td></tr></table></figure><p>配置Git：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name <span class="string">&quot;Your Name&quot;</span></span><br><span class="line">git config --global user.email <span class="string">&quot;your_email@example.com&quot;</span></span><br></pre></td></tr></table></figure><p>克隆一个Git仓库：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/example/repo.git</span><br></pre></td></tr></table></figure><p>以上内容涵盖了从基本概念到常用命令和进阶操作，希望能帮助初学者全面了解和使用Ubuntu Linux操作系统。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;linux-基本概念&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#linux-基本概念&quot;&gt;&lt;/a&gt; Linux 基本概念&lt;/h2&gt;
&lt;h3 id=&quot;1-什么是linux&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; hr</summary>
      
    
    
    
    <category term="learn" scheme="https://sherry14love.github.io/categories/learn/"/>
    
    
    <category term="卷" scheme="https://sherry14love.github.io/tags/%E5%8D%B7/"/>
    
    <category term="linux" scheme="https://sherry14love.github.io/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>GPT4与实用AI分享</title>
    <link href="https://sherry14love.github.io/2024/03/31/Tool/shareGPT/"/>
    <id>https://sherry14love.github.io/2024/03/31/Tool/shareGPT/</id>
    <published>2024-03-30T16:00:00.000Z</published>
    <updated>2024-06-17T12:47:48.473Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>这篇博文里有免费的GPT4、音乐生成AI、AI搜索引擎，分为国内和国外两部分。</p></blockquote><p>其中国内有两个：搜索引擎AI：<a href="https://metaso.cn/">秘塔AI</a>；Claude平替：<a href="https://kimi.moonshot.cn/">KimiAI</a>。<br />国外有七个：音乐生成AI：<a href="https://app.suno.ai/">Suno</a>；GPT4的免费平替：<a href="https://www.coze.com/">Coze</a>和<a href="https://claude.ai/chats">Claude</a>还有<a href="https://wrtn.ai/">wrtn</a>、<a href="https://www.popai.pro">PopAi</a>；搜索引擎AI：<a href="https://www.phind.com/agent?home=true">phind</a>和<a href="https://www.perplexity.ai/">perplexity</a>。</p><p>至于<a href="https://copilot.microsoft.com/?culture=en-us&amp;country=us">Copilot</a>和<a href="https://arena.lmsys.org/">arena.lmsys.org</a>就没提，不过你若是想要试试的话，可以直接点击红色字体进行跳转。</p><blockquote><p>PS：<strong>红色字体</strong>是转跳链接哦，点击直接转跳到官网。</p></blockquote><h2 id="国内ai"><a class="markdownIt-Anchor" href="#国内ai"></a> 国内AI</h2><h3 id="秘塔ai"><a class="markdownIt-Anchor" href="#秘塔ai"></a> 秘塔AI</h3><ol><li>秘塔AI <a href="https://metaso.cn/">https://metaso.cn/</a></li></ol><p>秘塔AI是一个AI搜索引擎，用户体验是很可以的，国产的可以做到这个水平说实话已经超出我的预料了，虽然国外的AI搜索引擎出来已经将近一年了，不过，在某些方面，拉姆还是支持国产的。</p><p>首先你需要进入官网，点击<a href="https://metaso.cn/">秘塔AI</a>，进入页面就可以直接使用了。</p><p>这里面有学术模式（对写论文搞学术的很友好）</p><p><img src="https://www.qiuxs.cn/sharing-tools/img/read/ff6eed44cb8c5c23e6126f0582a48847" alt="秘塔AI-0.png" /></p><p>还有一些如大纲、演示文稿一类的，使用起来很方便。</p><p><img src="https://www.qiuxs.cn/sharing-tools/img/read/3d653de7f589727eadcc0792240977dc" alt="秘塔AI-1.png" /></p><h3 id="kimiai"><a class="markdownIt-Anchor" href="#kimiai"></a> KimiAI</h3><ol start="2"><li><a href="https://kimi.moonshot.cn/">KimiAI</a><br />KimiAI支持最多五十个文档的上传与分析，这点和claude3差不多，在某些方面上是对标GPT4的，在国内免费使用是很良心的。</li></ol><p>点击<a href="https://kimi.moonshot.cn/">KimiAI</a>可以进入注册使用。</p><h2 id="国外ai"><a class="markdownIt-Anchor" href="#国外ai"></a> 国外AI</h2><h3 id="suno"><a class="markdownIt-Anchor" href="#suno"></a> Suno</h3><ol start="3"><li><a href="https://app.suno.ai/">Suno</a></li></ol><p>Suno是一个生成音乐的AI，无论是你给他自己所作歌词还是给他一段描述，他都可以生成一首歌曲，支持各种语言，包括中文，还可以自定义曲风等，开会员还可以生成纯音乐一类的。</p><p>点击<a href="https://app.suno.ai/">Suno</a>可以注册使用。</p><p><img src="https://www.qiuxs.cn/sharing-tools/img/read/81af18289f07204ce4e73ee88dfcb96f" alt="coze-0.png" /></p><p><img src="https://www.qiuxs.cn/sharing-tools/img/read/002da6e091f5014cef0feca58e152560" alt="coze-1.png" /></p><h3 id="coze"><a class="markdownIt-Anchor" href="#coze"></a> Coze</h3><ol start="4"><li><a href="https://www.coze.com/">Coze</a></li></ol><p>其实拉姆的一篇博文<a href="https://6677677.xyz/2023/12/22/Tool/GPT4.0/">GPT-4(8k)免费使用方法</a>已经介绍过这个免费使用GPT4.0的方法了，而且24年年初还增加了超多插件和GPT4-128K模式，还有一些Skills、Memory、Advanced，总之是非常非常超级良心的。</p><p>点击<a href="https://www.coze.com/">Coze</a>可以注册使用。</p><p><img src="https://www.qiuxs.cn/sharing-tools/img/read/d2d745b691da5b38f89b16b5bfe7675b" alt="coze-0.png" /></p><p>这里面的Persona和Prompt，也就是自定义角色和提示词，是很有意思的，拉姆的一个朋友把这个定义成他女朋友的名字和性格，然后发给他女朋友，还有定义猫娘什么的，这里等待你的开发哦😉</p><h3 id="claude"><a class="markdownIt-Anchor" href="#claude"></a> Claude</h3><ol start="5"><li><a href="https://claude.ai/chats">Claude</a></li></ol><p>Claude AI尤其是Claude3已经是对标GPT4甚至碾压GPT4的存在，很好用，但是对于小白来说不推荐。</p><p>不是使用上不推荐，是因为现在注册账户目前是需要海外手机号接受验证码的，这个可以在SMS上购买，不过不划算，毕竟SMS一次至少充值2美金…坑人。</p><p>拉姆当时注册的时候，还不需要手机验证码，比较那时候Claude刚出来。</p><p>点击<a href="https://claude.ai/chats">Claude</a>可以进行注册。</p><h3 id="wrtn"><a class="markdownIt-Anchor" href="#wrtn"></a> wrtn</h3><ol start="6"><li><a href="https://wrtn.ai/">wrtn</a></li></ol><p>这是韩国的一个免费的公益性AI，内含GPT4等各种模型，而且无限制使用，但是这个底层逻辑好像都是用韩文进行的回答，不过你也可以欺骗他，让他用英语或者中文进行回答：</p><p>点击<a href="https://wrtn.ai/">wrtn</a>可以进行注册。</p><p><img src="https://www.qiuxs.cn/sharing-tools/img/read/93edcb34931d01641cdb42af84342381" alt="wrtn-0.png" /></p><h3 id="popai"><a class="markdownIt-Anchor" href="#popai"></a> PopAi</h3><ol start="7"><li><a href="https://www.popai.pro">PopAi</a></li></ol><p>PopAi可以和文档聊天，也可以做PPT，还有绘图，内置的大模型可以每天使用两次GPT4，对于免费用户而言，虽然有些鸡肋，浅浅得玩一下还是可以的。</p><p>点击<a href="https://www.popai.pro">PopAi</a>可以进行注册。</p><p><img src="https://www.qiuxs.cn/sharing-tools/img/read/c4107e9b00ed91e64a3c32f7a637c730" alt="Popai-0.png" /></p><h3 id="phind"><a class="markdownIt-Anchor" href="#phind"></a> phind</h3><ol start="8"><li><a href="https://www.phind.com/agent?home=true">phind</a></li></ol><p>phind是一个AI搜索引擎，免费用户支持Chat和Search两者模式，Pro支持Code模式。</p><p>点击<a href="https://www.phind.com/agent?home=true">phind</a>可以进行注册。</p><p><img src="https://www.qiuxs.cn/sharing-tools/img/read/6b95d3ae7341ac3857fd1e73b7bdb673" alt="phind-0.png" /></p><p><img src="https://www.qiuxs.cn/sharing-tools/img/read/dc1b8babc874448ed6700c47d6b613fa" alt="phind-1.png" /></p><h3 id="perplexity"><a class="markdownIt-Anchor" href="#perplexity"></a> perplexity</h3><ol start="9"><li><a href="https://www.perplexity.ai/">perplexity</a></li></ol><p>perplexity也是一个AI搜索引擎，免费用户可以开启pro搜索，一天免费五次，每四个小时恢复一次，基本上就是加强版的new bing，当然不开Pro搜索他所给的答案个人感觉也是可以的。</p><p>点击<a href="https://www.perplexity.ai/">perplexity</a>可以进行注册。</p><p><img src="https://www.qiuxs.cn/sharing-tools/img/read/412236785a617acd1bfc25009e177be8" alt="perplexity.png" /></p>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;这篇博文里有免费的GPT4、音乐生成AI、AI搜索引擎，分为国内和国外两部分。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;其中国内有两个：搜索引擎AI：&lt;a href=&quot;https://metaso.cn/&quot;&gt;秘塔AI&lt;/a&gt;；Claude平替：&lt;</summary>
      
    
    
    
    <category term="Tool" scheme="https://sherry14love.github.io/categories/Tool/"/>
    
    
    <category term="GPT" scheme="https://sherry14love.github.io/tags/GPT/"/>
    
  </entry>
  
  <entry>
    <title>Summary for 2021-2023</title>
    <link href="https://sherry14love.github.io/2024/03/30/diary/university/"/>
    <id>https://sherry14love.github.io/2024/03/30/diary/university/</id>
    <published>2024-03-29T16:00:00.000Z</published>
    <updated>2024-06-26T07:43:08.007Z</updated>
    
    <content type="html"><![CDATA[<h2 id="如果能重来"><a class="markdownIt-Anchor" href="#如果能重来"></a> 如果能重来</h2><p>一眨眼就到大三下学期了，想想似乎是昨天才刚步入大学校园，急景流年，韶光如箭啊。</p><p>目前来看，大学生活虽谈不上颓废，也可以说得上是无所事事，说说比较后悔的几件事吧。</p><p>平心而论，比较<strong>后悔的第一件事</strong>，就是拉姆应该从大一便开始，积极参加各种竞赛项目的，不然也不至于现在连拿得出手的国奖都没几个。</p><blockquote><p>这点可以参考拉姆的班委，拿了二三十个竞赛奖项，还有一个大佬，拉姆只是见到过，大三上学期就拿到了几十个奖项，还有各种合作项目，真的真的太强了。</p></blockquote><p>当然，说笑一下，90%以上的大学生都不知道也不会参与各种竞赛，有这种觉悟的人是很少的，毕竟一般来说你的辅导员催你搞创新学分都在大三大四。</p><p>前些时候在群里看到一个HR说，现在的小孩，<strong>大一大二</strong>就开始<strong>卷实习</strong>，大三秋招，然后月入过万起步，害，要不然每个人的认知水平是不同的，你看看人家，再看看拉姆，不能比不能比。</p><p><strong>其二</strong>比较后悔的事情便是Java学得不怎么样，不过这点还好，目前已经决定不走后端，前端也不走，其实早知如此就应该报名<strong>数据科学专业</strong>的，刚好也和现如今的offer相匹配，再不然学学软件测试一类的也还好（毕竟在招聘会上看到招软件测试的比较多）</p><p>就是不知道以后ChatGPT这一类的AI对目前行业的影响了，毕竟前些时候世界上第一位完全自主运行的人工智能软件工程师<strong>Devin</strong>已经面世了（当然很多人对Devin提出的质疑咱暂且不提）。</p><p><strong>其三</strong>嘛，这个博客应该大一就开始做的，无论是记录生活还是写写诗词，亦或者分享学习技术，都是可以的，大三做博客就有点晚了。</p><p><strong>其四</strong>，虚度光阴，这点深有体会啊，拉姆平常就喜欢看看小说，但是一看便愈发不可收拾，说实在，看小说不如提高一下英语水平，说不准以后还能进个外企，但是现实嘛，不提也罢。</p><p><strong>其五</strong>，拉姆在网上查了查，写到其四的时候就没有想到其他的，查到一个，认真说起来，拉姆不清楚算不算得遗憾，这更多的可能只是一种选择，那就是看见网上有好多人在说后悔没有体验一下校园恋爱，这点，拉姆不清楚，毕竟身处局中，非旁观者迷。</p><p><s>不过前些时候拉姆的老大<strong>SXH</strong>，在qq上跟拉姆发癫，一直说他好想谈恋爱</s></p><p><s>所以有想恋爱的童鞋，可以和拉姆联系哦，拉姆的老大可是<strong>学历985</strong>，身高<strong>180</strong>，五官端正立体，皮肤细腻如玉，平时动不动就脸红的单纯大男孩。</s></p><!--   如果能重来，拉姆肯定大一就开始打竞赛。  说真的，你想想，大一就开始打各种竞赛，你到大三肯定得二三十个证书了（详细请参考拉姆的班委）  拉姆目前能拿出的竞赛证书证明只有六七八个，都是23年打下来的，但感觉竞赛知名度不怎么高，而且国奖只有三个，实际帮助可能并不大，现在再打的话就已经没那个精力了。  前些时候看到一个HR在群里说，现在大一大二的小孩好多都在卷实习，大三直接秋招，这简直...太厉害了，果然每个人的认知都是不同的。拉姆大一时候，似乎还在看小说，虽然现在也在看就是了。  你现在如果是在大一或者大二，真的可以考虑一下是否卷卷实习，打打竞赛，这样你会学到很多，而且到时候你的简历也很好看。  拉姆这个专业，到后面走人工智能是不可能的，走算法也不大可能，毕竟算法方面除非你大一大二就开始搞算法，不然你真的看不懂，算法实在是太抽象了（也可能拉姆比较笨）  刚刚和朋友聊了聊，他说算法岗不好走，对口专业的工作更不好走，他考研不走人工智能，走计科。其实也挺好，毕竟研究生现在那些搞AI的原先都是搞大数据和算法的，只不过这两年AI火起来了，只不过，拉姆这个学校的考研率只有10-15%嗯...上一年好像只有一个学生考到了985，其他的绝大部分都是双非，211也不多。  害其实最终目的都是为了就业，但是目前真的不如十年前甚至五年前，太饱和了，现在哪里像以前啊。 --><h2 id="回归过去"><a class="markdownIt-Anchor" href="#回归过去"></a> 回归过去</h2><p><s>其实过去也没那么的烂，写过的诗词挺多</s></p><p>最起码还是参加过一些竞赛的，在简历上有项目经历和荣誉奖项可写。</p><p>还有认识了好多好多朋友（在大学貌似异性缘和同性缘都挺不错的，这点很开心）</p><h2 id="展望一下24年的未来"><a class="markdownIt-Anchor" href="#展望一下24年的未来"></a> 展望一下24年的未来</h2><p>目前最要紧的事情是做算法题，毕竟蓝桥杯04-13要开始了，再不做就来不及了，还有就是学习实习那边要求的各种课程视频，毕竟实习什么都不会的话，就很说不过去。</p><p>期待未来越来越好，拉姆，嗯！要越来越幸运！</p><p>下一篇博客应该是关于AI工具的分享，毕竟今天弄了一天了（好）</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;如果能重来&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#如果能重来&quot;&gt;&lt;/a&gt; 如果能重来&lt;/h2&gt;
&lt;p&gt;一眨眼就到大三下学期了，想想似乎是昨天才刚步入大学校园，急景流年，韶光如箭啊。&lt;/p&gt;
&lt;p&gt;目前来看，大学生活虽谈不上颓废，</summary>
      
    
    
    
    <category term="dairy" scheme="https://sherry14love.github.io/categories/dairy/"/>
    
    
    <category term="日记" scheme="https://sherry14love.github.io/tags/%E6%97%A5%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>2023下半年之奇怪的散文总结</title>
    <link href="https://sherry14love.github.io/2024/01/08/diary/2023/"/>
    <id>https://sherry14love.github.io/2024/01/08/diary/2023/</id>
    <published>2024-01-07T16:00:00.000Z</published>
    <updated>2024-06-17T01:48:27.847Z</updated>
    
    <content type="html"><![CDATA[<h2 id="其实时间过得很快"><a class="markdownIt-Anchor" href="#其实时间过得很快"></a> 其实时间过得很快</h2><p>想起这个博客创建时还是在暑假学车那时候，计划中的GO语言也没怎么学，到现在都2024年了，碌碌无为啊。</p><p>也发生了很多事，有悲有喜，有痛苦也有快乐，印象最深刻的是梦与现实的纠缠，这并不好，因为会打扰到别人。</p><p>记录一下“有意思”的时刻吧，出门被绊已是家常便饭，上次计算智能张伟伟老师让做小组PPT讲解论文，拉姆那一组是拉姆上去演讲，然后bingo，组长选的论文是会议论文而且发布时间有点早，不符合要求，重新做（QAQ）。</p><p>这个其实还好，上次跟着钟佬打亚太数模才是真的痛苦，什么都不会，最后一天熬了通宵在早上八点半交上去了作品，距离截至时间就剩下了半个小时，然后回去的时候全宿舍还都在睡觉，被迫在宿舍门口等待，又困又累又冷，后来还是km醒了，给拉姆开得门，上床睡觉醒来就是晚上六七点了。</p><p>预约纪念币也是如此，地图上明明是中原区，拉姆预约网点当时很着急，看见带有中原的，就选了，结果那边距离这里很远，坐车要一个半小时起步，高新区才是距离拉姆最近的网点（QAQ）</p><p>让拉姆想想，还有被别人第n次当成女生，走错实验室，走错教室，一觉醒来七点五十八（有早八）等<br /><img src="https://www.qiuxs.cn/sharing-tools/img/read/17c5e537b12f0be6f4d335031f710891" alt="第n次被当成女生" /><br />其实也有幸运的时刻，比如在提前考试的那一周，和王振宇在背复习资料的时候，看到了奇妙君在送GPT4激活码，然后然后拉姆就抽到了！虽然是个阉割版，但是这很德克斯特！！</p><p>上面是一个幸运时刻，但下面的让拉姆觉得更幸运，就是和曾经的故人聊天，很开心。</p><p>虽然拉姆可能会打扰到别人，但是如果拉姆能提供情绪价值，这是很幸运且值得的。拉姆喜欢这种感觉。如果没有提供情绪价值，拉姆真的很抱歉，此非本愿，愿君谅解。</p><p><strong>旧日未见乱心神，因梦记君扰故人</strong></p><p>眨眼间，距离高二的转折点过了四年，距离最开心的七年级过了八年，其实时间过得很快。</p><h2 id="每个人时刻都在改变着自己"><a class="markdownIt-Anchor" href="#每个人时刻都在改变着自己"></a> 每个人时刻都在改变着自己</h2><p>每个人或许都在变得陌生，时间是可怕的东西，不过在时光的洗礼之后，所记得的，才更加珍贵。</p><p>拉姆不知道未来，就像曾经不知道现在，愧疚解不开执念，念念不忘不一定会有回响，每一次的疑问不一定都有回应。</p><p>猫猫是可爱的动物，拉姆很喜欢。</p><p>拉姆有个奇怪的能力，动物化，有时候会把别人看成某些小动物，很有意思。</p><p>不过拉姆很少能把别人看成猫猫，如果拉姆把你看成猫猫了，那么可能，拉姆想要养你，毕竟猫猫那么可爱（bushi）</p><p>提前考试那一周，很痛苦，可以和上上学期备战四级的时候不小心闪到腰有的一拼，那时候躺了两三天，腰才好一点，谁家系个鞋带能闪到腰！</p><p>不气不气，明天还要去吹寒风排队，敲，倒霉…</p><p>不过今天还有个单项，起码( )还是赔钱了…</p><p>果然，拉姆是拉姆，不是德克斯特，也不是乔治戴诺&lt;(＿　＿)&gt;</p><h2 id="期待"><a class="markdownIt-Anchor" href="#期待"></a> 期待</h2><p>每个人都会有期待吧，希望24年可以，不那么倒霉，hhhh说笑了，倒霉已经习惯了，争取以后当乔治戴诺O(∩_∩)O</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;其实时间过得很快&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#其实时间过得很快&quot;&gt;&lt;/a&gt; 其实时间过得很快&lt;/h2&gt;
&lt;p&gt;想起这个博客创建时还是在暑假学车那时候，计划中的GO语言也没怎么学，到现在都2024年了，碌碌无为啊。&lt;/p</summary>
      
    
    
    
    <category term="dairy" scheme="https://sherry14love.github.io/categories/dairy/"/>
    
    
    <category term="日记" scheme="https://sherry14love.github.io/tags/%E6%97%A5%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>GPT-4(8k)免费使用方法</title>
    <link href="https://sherry14love.github.io/2023/12/22/Tool/GPT4.0/"/>
    <id>https://sherry14love.github.io/2023/12/22/Tool/GPT4.0/</id>
    <published>2023-12-21T16:00:00.000Z</published>
    <updated>2024-06-17T01:50:18.383Z</updated>
    
    <content type="html"><![CDATA[<h2 id="进入coze"><a class="markdownIt-Anchor" href="#进入coze"></a> 进入Coze</h2><p>我们需要进入官网，点击<a href="https://www.coze.com/">Coze官网接口</a>，进入注册页面。</p><p><img src="https://static.st.qiuxs.cn/image-bed/0/2023/12/22/03_01_09_da0c3f98bcded3d281867daf3adcbb15.jpg" alt="Coze1.jpg" /></p><p>这个时候有两种注册方法，一个是Google账号，还有一个是手机号，这个随便选择一个都可以的。</p><p><img src="https://static.st.qiuxs.cn/image-bed/0/2023/12/22/03_01_13_6a65a773ff9dc481ce00451580757148.jpg" alt="Coze2.jpg" /></p><p>进入之后的页面如下图所示：</p><p><img src="https://static.st.qiuxs.cn/image-bed/0/2023/12/22/03_01_17_1bd6c31ed3ff7cccfae1c6dc2fb44a84.jpg" alt="Coze3.jpg" /></p><p>点击Bots，进入之后Create Bots</p><p><img src="https://static.st.qiuxs.cn/image-bed/0/2023/12/22/03_01_21_9210b88bd19981b07521b1e2130b45a3.jpg" alt="Coze4.jpg" /></p><p>这里面可以选择GPT-4(8k)和GPT-3.5(16k)，以及调节设置，这个时候就可以使用GPT4.0了，不过如果习惯使用openAI官网的chatGPT，那么可能这个界面的操作不会那么舒服。</p><p><img src="https://static.st.qiuxs.cn/image-bed/0/2023/12/22/03_01_25_fa82f3ba0ee592d6a1266c0800808527.jpg" alt="Coze5.jpg" /></p><p>以上就是GPT-4的免费使用过程了，需要注意的是，应该是需要科学上网的，其他方面应该不会有问题，那么祝各位体验愉快。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;进入coze&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#进入coze&quot;&gt;&lt;/a&gt; 进入Coze&lt;/h2&gt;
&lt;p&gt;我们需要进入官网，点击&lt;a href=&quot;https://www.coze.com/&quot;&gt;Coze官网接口&lt;/a&gt;，进入注册</summary>
      
    
    
    
    <category term="Tool" scheme="https://sherry14love.github.io/categories/Tool/"/>
    
    
    <category term="GPT" scheme="https://sherry14love.github.io/tags/GPT/"/>
    
  </entry>
  
</feed>
